%%
body

static PyTypeObject *_PyPangoCairoContext_Type;
#define PyPangoCairoContext_Type (*_PyPangoCairoContext_Type)

static PyObject *
_wrap_clutter_cairo_set_source_color (PyObject *self,
                                      PyObject *args,
                                      PyObject *kwargs)
{
    static char *kwlist[] = { "color", NULL };
    PyObject *py_color;
    ClutterColor *color = NULL;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                      "O:cluttercairo.CairoContext.set_source_color",
                                      kwlist, &py_color))
      return NULL;

    if (pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR))
      color = pyg_boxed_get (py_color, ClutterColor);
    else
      {
        PyErr_SetString (PyExc_TypeError, "color should be a clutter.Color");
        return NULL;
      }

    clutter_cairo_set_source_color (PycairoContext_GET (self), color);

    Py_INCREF(Py_None);
    return Py_None;
}

static PyMethodDef _PyClutterCairoContext_methods[] = {
  { "set_source_color", (PyCFunction)_wrap_clutter_cairo_set_source_color, METH_VARARGS | METH_KEYWORDS },
  { NULL, NULL, 0 }
};

PyTypeObject PyClutterCairoContext_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                  /* ob_size */
    "cluttercairo.CairoContext",        /* tp_name */
    0,           			/* tp_basicsize */
    0,                                  /* tp_itemsize */
    /* methods */
    (destructor)0,     			/* tp_dealloc */
    (printfunc)0,                       /* tp_print */
    (getattrfunc)0,                     /* tp_getattr */
    (setattrfunc)0,                     /* tp_setattr */
    (cmpfunc)0,                         /* tp_compare */
    (reprfunc)0,                        /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    (hashfunc)0,                        /* tp_hash */
    (ternaryfunc)0,                     /* tp_call */
    (reprfunc)0,                        /* tp_str */
    (getattrofunc)0,                    /* tp_getattro */
    (setattrofunc)0,                    /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,   		/* tp_flags */
    "A pangocairo.CairoContext enhanced with some additional clutter methods", /* Documentation string */
    (traverseproc)0,                    /* tp_traverse */
    (inquiry)0,                         /* tp_clear */
    (richcmpfunc)0,                     /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
    (getiterfunc)0,                     /* tp_iter */
    (iternextfunc)0,                    /* tp_iternext */
    _PyClutterCairoContext_methods,     /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    (PyTypeObject *)0,                  /* tp_base */
    (PyObject *)0,                      /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    (initproc)0,          		/* tp_init */
    0,                			/* tp_alloc */
    0,         				/* tp_new */
    0,                                  /* tp_free */
    (inquiry)0,                         /* tp_is_gc */
    (PyObject *)0,                      /* tp_bases */
};

%%
headers
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include <pycairo.h>
#include <clutter/clutter.h>
#include <clutter-cairo/clutter-cairo.h>
extern Pycairo_CAPI_t *Pycairo_CAPI;
%%
modulename cluttercairo
%%
import gobject.GObject as PyGObject_Type
import clutter.Texture as PyClutterTexture_Type
%%
ignore-glob
  *_get_type
  clutter_cairo_set_source_color

%%
init
  if ((module = PyImport_ImportModule ("pangocairo")) != NULL) {
    PyObject *moddict = PyModule_GetDict (module);

    _PyPangoCairoContext_Type = (PyTypeObject *) PyDict_GetItemString (moddict, "CairoContext");
    if (_PyPangoCairoContext_Type == NULL) {
      PyErr_SetString (PyExc_ImportError, "cannot import name CairoContext from pangocairo");
      return;
    }
  }
  else {
    return;
  }

  PyClutterCairoContext_Type.tp_base = &PyPangoCairoContext_Type;
  if (PyType_Ready (&PyClutterCairoContext_Type) < 0) {
    g_return_if_reached ();
  }
  if (PyDict_SetItemString (d, "CairoContext", (PyObject *) &PyClutterCairoContext_Type) < 0) {
    g_return_if_reached ();
  }

%%
override clutter_cairo_create noargs
static PyObject *
_wrap_clutter_cairo_create (PyGObject *self)
{
  cairo_t *ret;

  ret = clutter_cairo_create (CLUTTER_CAIRO (self->obj));
  return PycairoContext_FromContext (ret, &PyClutterCairoContext_Type, NULL);
}
%%
override clutter_cairo_create_region kwargs
static PyObject *
_wrap_clutter_cairo_create_region (PyGObject *self,
                                   PyObject  *args,
                                   PyObject  *kwargs)
{
    static char *kwlist[] = { "x_offset", "y_offset", "width", "height", NULL };
    int x_offset, y_offset;
    PyObject *py_width = NULL, *py_height = NULL;
    cairo_t *ret;
    guint width = 0, height = 0;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,"iiOO:ClutterCairo.cairo_create_region", kwlist, &x_offset, &y_offset, &py_width, &py_height))
      return NULL;

    if (py_width) {
        if (PyLong_Check(py_width))
            width = PyLong_AsUnsignedLong(py_width);
        else if (PyInt_Check(py_width))
            width = PyInt_AsLong(py_width);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'width' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }

    if (py_height) {
        if (PyLong_Check(py_height))
            height = PyLong_AsUnsignedLong(py_height);
        else if (PyInt_Check(py_height))
            height = PyInt_AsLong(py_height);
        else
            PyErr_SetString(PyExc_TypeError, "Parameter 'height' must be an int or a long");
        if (PyErr_Occurred())
            return NULL;
    }
    
    ret = clutter_cairo_create_region (CLUTTER_CAIRO (self->obj),
                                       x_offset, y_offset,
                                       width, height);
    return PycairoContext_FromContext (ret, &PyClutterCairoContext_Type, NULL);
}
