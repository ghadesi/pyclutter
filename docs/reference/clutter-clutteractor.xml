<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="class-clutteractor">
  <refmeta>
    <refentrytitle>clutter.Actor</refentrytitle>
    <manvolnum>3</manvolnum>
    <refmiscinfo>PyGTK Docs</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>clutter.Actor</refname>
    <refpurpose>clutter.Actor â€” Base abstract class for all visual stage actors.</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Synopsis</title>

<classsynopsis language="python">
  <ooclass><classname>clutter.Actor</classname></ooclass>
  <ooclass><classname>gobject.GInitiallyUnowned</classname></ooclass>

<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--show">show</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--show-all">show_all</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--hide">hide</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--hide-all">hide_all</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--realize">realize</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--unrealize">unrealize</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--paint">paint</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--pick">pick</link></methodname>
    <methodparam><parameter>color</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--queue-redraw">queue_redraw</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--destroy">destroy</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-geometry">set_geometry</link></methodname>
    <methodparam><parameter>geometry</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-geometry">get_geometry</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-size">set_size</link></methodname>
    <methodparam><parameter role="keyword">width</parameter></methodparam>
    <methodparam><parameter role="keyword">height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-position">set_position</link></methodname>
    <methodparam><parameter role="keyword">x</parameter></methodparam>
    <methodparam><parameter role="keyword">y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-position">get_position</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-x">set_x</link></methodname>
    <methodparam><parameter>x</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-y">set_y</link></methodname>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-width">set_width</link></methodname>
    <methodparam><parameter>width</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-width">get_width</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-height">set_height</link></methodname>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-height">get_height</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-x">get_x</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-y">get_y</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-rotation">set_rotation</link></methodname>
    <methodparam><parameter role="keyword">axis</parameter></methodparam>
    <methodparam><parameter role="keyword">angle</parameter></methodparam>
    <methodparam><parameter role="keyword">x</parameter></methodparam>
    <methodparam><parameter role="keyword">y</parameter></methodparam>
    <methodparam><parameter role="keyword">z</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-rotation">get_rotation</link></methodname>
    <methodparam><parameter>axis</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-opacity">set_opacity</link></methodname>
    <methodparam><parameter>opacity</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-opacity">get_opacity</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-name">set_name</link></methodname>
    <methodparam><parameter>name</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-name">get_name</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-gid">get_gid</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-clip">set_clip</link></methodname>
    <methodparam><parameter role="keyword">x_offset</parameter></methodparam>
    <methodparam><parameter role="keyword">y_offset</parameter></methodparam>
    <methodparam><parameter role="keyword">width</parameter></methodparam>
    <methodparam><parameter role="keyword">height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--remove-clip">remove_clip</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--has-clip">has_clip</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-parent">set_parent</link></methodname>
    <methodparam><parameter>parent</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-parent">get_parent</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--reparent">reparent</link></methodname>
    <methodparam><parameter>new_parent</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--unparent">unparent</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--raise-actor">raise_actor</link></methodname>
    <methodparam><parameter role="keyword">below</parameter><initializer>None</initializer></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--lower-actor">lower_actor</link></methodname>
    <methodparam><parameter role="keyword">above</parameter><initializer>None</initializer></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--raise-top">raise_top</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--lower-bottom">lower_bottom</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-depth">set_depth</link></methodname>
    <methodparam><parameter role="keyword">depth</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-depth">get_depth</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-scale">set_scale</link></methodname>
    <methodparam><parameter role="keyword">scale_x</parameter></methodparam>
    <methodparam><parameter role="keyword">scale_y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-scale">get_scale</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-size">get_size</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--move-by">move_by</link></methodname>
    <methodparam><parameter>dx</parameter></methodparam>
    <methodparam><parameter>dy</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--apply-transform-to-point">apply_transform_to_point</link></methodname>
    <methodparam><parameter>point</parameter></methodparam>
    <methodparam><parameter>vertex</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--is-scaled">is_scaled</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--is-rotated">is_rotated</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--apply-relative-transform-to-point">apply_relative_transform_to_point</link></methodname>
    <methodparam><parameter role="keyword">ancestor</parameter></methodparam>
    <methodparam><parameter role="keyword">point</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-clip">get_clip</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-clipu">get_clipu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-reactive">set_reactive</link></methodname>
    <methodparam><parameter>reactive</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-reactive">get_reactive</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--event">event</link></methodname>
    <methodparam><parameter>event</parameter></methodparam>
    <methodparam><parameter>capture</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--should-pick-paint">should_pick_paint</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-shader">set_shader</link></methodname>
    <methodparam><parameter>shader</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-shader">get_shader</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-shader-param">set_shader_param</link></methodname>
    <methodparam><parameter>param</parameter></methodparam>
    <methodparam><parameter>value</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-anchor-point">set_anchor_point</link></methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--move-anchor-point">move_anchor_point</link></methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-anchor-point">get_anchor_point</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-anchor-point-from-gravity">set_anchor_point_from_gravity</link></methodname>
    <methodparam><parameter>gravity</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--move-anchor-point-from-gravity">move_anchor_point_from_gravity</link></methodname>
    <methodparam><parameter>gravity</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--transform-stage-point">transform_stage_point</link></methodname>
    <methodparam><parameter role="keyword">x</parameter></methodparam>
    <methodparam><parameter role="keyword">y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--queue-relayout">queue_relayout</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-preferred-width">get_preferred_width</link></methodname>
    <methodparam><parameter>for_height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-preferred-height">get_preferred_height</link></methodname>
    <methodparam><parameter>for_width</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-preferred-size">get_preferred_size</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--allocate">allocate</link></methodname>
    <methodparam><parameter>box</parameter></methodparam>
    <methodparam><parameter>absolute_origin_changed</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--allocate-preferred-size">allocate_preferred_size</link></methodname>
    <methodparam><parameter>absolute_origin_changed</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-allocation-coords">get_allocation_coords</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-allocation-box">get_allocation_box</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-allocation-geometry">get_allocation_geometry</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-allocation-vertices">get_allocation_vertices</link></methodname>
    <methodparam><parameter>ancestor</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-sizeu">set_sizeu</link></methodname>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-sizeu">get_sizeu</link></methodname>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-transformed-size">get_transformed_size</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-transformed-sizeu">get_transformed_sizeu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-positionu">set_positionu</link></methodname>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-positionu">get_positionu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-transformed-position">get_transformed_position</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-transformed-positionu">get_transformed_positionu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-fixed-position-set">get_fixed_position_set</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-fixed-position-set">set_fixed_position_set</link></methodname>
    <methodparam><parameter>is_set</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-widthu">get_widthu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-heightu">get_heightu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-widthu">set_widthu</link></methodname>
    <methodparam><parameter>width</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-heightu">set_heightu</link></methodname>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-xu">get_xu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-yu">get_yu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-xu">set_xu</link></methodname>
    <methodparam><parameter>x</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-yu">set_yu</link></methodname>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-rotationu">set_rotationu</link></methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>angle</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-rotationu">get_rotationu</link></methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-paint-opacity">get_paint_opacity</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-clipu">set_clipu</link></methodname>
    <methodparam><parameter>xoff</parameter></methodparam>
    <methodparam><parameter>yoff</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-clipu">get_clipu</link></methodname>
    <methodparam><parameter>xoff</parameter></methodparam>
    <methodparam><parameter>yoff</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-stage">get_stage</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-depthu">set_depthu</link></methodname>
    <methodparam><parameter>depth</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-depthu">get_depthu</link></methodname>
    <methodparam></methodparam>  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--move-byu">move_byu</link></methodname>
    <methodparam><parameter>dx</parameter></methodparam>
    <methodparam><parameter>dy</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--set-anchor-pointu">set_anchor_pointu</link></methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--move-anchor-pointu">move_anchor_pointu</link></methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis>
<methodsynopsis language="python">
    <methodname><link linkend="method-clutteractor--get-anchor-pointu">get_anchor_pointu</link></methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis>
</classsynopsis>

  </refsect1>
  <refsect1>
    <title>Ancestry</title>

<synopsis>
<link linkend="class-gobject">gobject.GObject</link>
+-- <link linkend="class-gobject">gobject.GInitiallyUnowned</link>
   +-- <link linkend="class-clutteractor">clutter.Actor</link>
</synopsis>

  <refsect1 id="properties-clutteractor">
    <title>Properties</title>

    <blockquote role="properties">
      <informaltable pgwide="1" frame="none">
        <tgroup cols="3">
          <colspec column="1" colwidth="1in" />
          <colspec column="2" colwidth="1in" />
          <colspec column="3" colwidth="4in" />
          <tbody>
            <row valign="top">
              <entry>"clip"</entry>
              <entry>Read-Write</entry>
              <entry>The clip region for the actor.</entry>
            </row>

            <row valign="top">
              <entry>"depth"</entry>
              <entry>Read-Write</entry>
              <entry>Depth of the actor. Default value: 0. Since 0.6.</entry>
            </row>

            <row valign="top">
              <entry>"has-clip"</entry>
              <entry>Read</entry>
              <entry>Whether the actor has the clip property set or not. Allowed values: >= -2147483647. Default value: False.</entry>
            </row>

            <row valign="top">
              <entry>"height"</entry>
              <entry>Read-Write</entry>
              <entry>Height of the actor (in pixels). Allowed values: >= 0. Default value: 0.</entry>
            </row>

            <row valign="top">
              <entry>"name"</entry>
              <entry>Read-Write</entry>
              <entry>The name of the actor. Default value: None. Since 0.2.</entry>
            </row>

            <row valign="top">
              <entry>"opacity"</entry>
              <entry>Read-Write</entry>
              <entry>Opacity of the actor. Default value: 255.</entry>
            </row>

            <row valign="top">
              <entry>"reactive"</entry>
              <entry>Read-Write</entry>
              <entry>Whether the actor is reactive or not. Default value: False. Since 0.6.</entry>
            </row>

            <row valign="top">
              <entry>"rotation-angle-x"</entry>
              <entry>Read-Write</entry>
              <entry>The rotation angle on the X axis. Allowed values: >= 0. Default value: 0.</entry>
            </row>

            <row valign="top">
              <entry>"rotation-angle-y"</entry>
              <entry>Read-Write</entry>
              <entry>The rotation angle on the Y axis. Allowed values: >= 0. Default value: 0.</entry>
            </row>

            <row valign="top">
              <entry>"rotation-angle-z"</entry>
              <entry>Read-Write</entry>
              <entry>The rotation angle on the Z axis. Allowed values: >= 0. Default value: 0.</entry>
            </row>

            <row valign="top">
              <entry>"rotation-center-x"</entry>
              <entry>Read-Write</entry>
              <entry>The rotation center on the X axis.</entry>
            </row>

            <row valign="top">
              <entry>"rotation-center-y"</entry>
              <entry>Read-Write</entry>
              <entry>The rotation center on the Y axis.</entry>
            </row>

            <row valign="top">
              <entry>"rotation-center-z"</entry>
              <entry>Read-Write</entry>
              <entry>The rotation center on the Z axis.</entry>
            </row>

            <row valign="top">
              <entry>"scale-x"</entry>
              <entry>Read-Write</entry>
              <entry>Scale X. Allowed values: >= 0. Default value: 1.</entry>
            </row>

            <row valign="top">
              <entry>"scale-y"</entry>
              <entry>Read-Write</entry>
              <entry>Scale Y. Allowed values: >= 0. Default value: 1.</entry>
            </row>

            <row valign="top">
              <entry>"scale-z"</entry>
              <entry>Read-Write</entry>
              <entry>Scale Z. Allowed values: >= 0. Default value: 1.</entry>
            </row>

            <row valign="top">
              <entry>"visible"</entry>
              <entry>Read-Write</entry>
              <entry>Whether the actor is visible or not. Default value: False.</entry>
            </row>

            <row valign="top">
              <entry>"width"</entry>
              <entry>Read-Write</entry>
              <entry>Width of the actor (in pixels). Allowed values: >= 0. Default value: 0.</entry>
            </row>

            <row valign="top">
              <entry>"x"</entry>
              <entry>Read-Write</entry>
              <entry>X coordinate of the actor. Allowed values: >= -2147483647. Default value: 0.</entry>
            </row>

            <row valign="top">
              <entry>"y"</entry>
              <entry>Read-Write</entry>
              <entry>Y coordinate of the actor. Allowed values: >= -2147483647. Default value: 0.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </blockquote>

  </refsect1>

  <refsect1 id="signal-prototypes-clutteractor">
    <title>Signal Prototypes</title>

    <variablelist>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--button-press-event">button-press-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--button-release-event">button-release-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--captured-event">captured-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--destroy">destroy</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--enter-event">enter-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--event">event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--focus-in">focus-in</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--focus-out">focus-out</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--key-press-event">key-press-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--key-release-event">key-release-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--leave-event">leave-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--motion-event">motion-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--scroll-event">scroll-event</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>event</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--parent-set">parent-set</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>old_parent</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--show">show</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--hide">hide</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--paint">paint</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--realize">realize</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term> "<link linkend="signal-clutteractor--unrealize">unrealize</link>" </term>
        <listitem>
          <methodsynopsis language="python"><methodname>callback</methodname>
            <methodparam><parameter>actor</parameter></methodparam>
            <methodparam><parameter>user_param1</parameter></methodparam>
            <methodparam><parameter>...</parameter></methodparam>
          </methodsynopsis>
        </listitem>
      </varlistentry>

    </variablelist>

  </refsect1>

  <refsect1>
    <title>Ancestry</title>

    <synopsis>+-- <link linkend="class-clutteractor">clutter.Actor</link>
    </synopsis>

  </refsect1>


  <refsect1 id="description-clutteractor">
    <title>Description</title>
    <para>
      <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link> is a base abstract class for all visual elements on the stage. Every object that must appear on the main <link linkend="class-clutterstage"><classname>clutter.Stage</classname></link> must also be a <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>, either by using one of the classes provided by Clutter, or by implementing a new <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link> subclass.</para>
  </refsect1>

  </refsect1>
  <refsect1>
    <title>Methods</title>

  <refsect2 id="method-clutteractor--show">
    <title>clutter.Actor.show</title>


<programlisting>
  <methodsynopsis language="python">
    <methodname>show</methodname>
    <methodparam></methodparam>
  </methodsynopsis>
</programlisting>
    <para>Flags an actor to be displayed. An actor that isn't shown will not be rendered on the stage.</para>
    <para>Actors are visible by default. </para>
  </refsect2>


  <refsect2 id="method-clutteractor--show-all">
    <title>clutter.Actor.show_all</title>

<programlisting><methodsynopsis language="python">
    <methodname>show_all</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  </refsect2>
  <para>Calls <link linkend="method-clutteractor--show"><methodname>show()</methodname></link> on all children of an actor (if any).</para>


  <refsect2 id="method-clutteractor--hide">
    <title>clutter.Actor.hide</title>

<programlisting><methodsynopsis language="python">
    <methodname>hide</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
<para>Flags an actor to be hidden. A hidden actor will not be rendered on the stage.</para>

<para>Actors are visible by default</para>
  </refsect2>


  <refsect2 id="method-clutteractor--hide-all">
    <title>clutter.Actor.hide_all</title>

<programlisting><methodsynopsis language="python">
    <methodname>hide_all</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>

    <para>Calls <link linkend="method-clutteractor--hide"><methodname>hide()</methodname></link> on all child actors (if any).</para>
  </refsect2>




  <refsect2 id="method-clutteractor--realize">
    <title>clutter.Actor.realize</title>

<programlisting><methodsynopsis language="python">
    <methodname>realize</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>

    <para>Creates any underlying graphics resources needed by the actor to be displayed.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--unrealize">
    <title>clutter.Actor.unrealize</title>

<programlisting><methodsynopsis language="python">
    <methodname>unrealize</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
    <para>Frees up any underlying graphics resources needed by the actor to be displayed.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--paint">
    <title>clutter.Actor.paint</title>

<programlisting><methodsynopsis language="python">
    <methodname>paint</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>

    <para>Renders the actor to display.</para>
    <para>This function should not be called directly by applications. Call
    <link linkend="method-clutteractor--queue-redraw"><methodname>queue_redraw()</methodname></link>
    to queue paints, instead.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--queue-redraw">
    <title>clutter.Actor.queue_redraw</title>

    <programlisting><methodsynopsis language="python">
    <methodname>queue_redraw</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
    <para>Queues up a redraw of an actor and any children. The redraw occurs once
    the main loop becomes idle (after the current batch of events has been processed,
    roughly).</para>
    <para>Applications rarely need to call this, as redraws are handled
    automatically by modification functions.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--queue-relayout">
    <title>clutter.Actor.queue_relayout</title>

    <programlisting><methodsynopsis language="python">
    <methodname>queue_relayout</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
    <para>Indicates that the actor's size request or other layout-affecting properties
    may have changed. This function is used inside <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>
    subclass implementations, not by applications directly.</para>

    <para>Queueing a new layout automatically queues a redraw as well.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--destroy">
    <title>clutter.Actor.destroy</title>

    <programlisting><methodsynopsis language="python">
    <methodname>destroy</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
    <para>Destroys an actor. When an actor is destroyed, it will break any references
    it holds to other objects. If the actor is inside a container, the actor will
    be removed.</para>

    <para>When you destroy a container, its children will be destroyed as well.</para>

    </refsect2>

  <refsect2 id="method-clutteractor--event">
    <title>clutter.Actor.event</title>

<programlisting><methodsynopsis language="python">
    <methodname>event</methodname>
    <methodparam><parameter>event</parameter></methodparam>
    <methodparam><parameter>capture</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>event</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Event</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>capture</parameter>&nbsp;:</term>
      <listitem><simpara>True if event in in capture phase, False otherwise.</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the return value from the signal emission: True if the actor handled the event, or False if the event was not handled </simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  This function is used to emit an event on the main stage. You should rarely need to use this function, except for synthetising events.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--pick">
    <title>clutter.Actor.pick</title>

<programlisting><methodsynopsis language="python">
    <methodname>pick</methodname>
    <methodparam><parameter>color</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>color</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Color</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Renders a silhouette of the actor using the supplied color. Used internally for mapping pointer events to actors.</para>
  <para>This function should never be called directly by applications. Use <link linkend="method-clutteractor--paint">paint()</link> instead.</para>
  <para>Subclasses overiding the <link linkend="method-clutteractor--pick"><methodname>pick()</methodname></link> method should call <link
  linkend="method-clutteractor--should-pick-paint"><methodname>should_pick_paint()</methodname></link> to decide whether to render their silhouette.
  Containers should always recursively call paint for each child.</para>
  </refsect2>




  <refsect2 id="method-clutteractor--set-geometry">
    <title>clutter.Actor.set_geometry</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_geometry</methodname>
    <methodparam><parameter>geometry</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>geometry</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Geometry or a 4-tuple of integers</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor's fixed position and forces its minimum and natural size,
  in pixels. This means the untransformed actor will have the given geometry.
  This is the same as calling
  <link linkend="method-clutteractor--set-position"><methodname>set_position()</methodname></link> and
  <link linkend="method-clutteractor--set-size"><methodname>set_size()</methodname></link>.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-geometry">
    <title>clutter.Actor.get_geometry</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_geometry</methodname>
    <methodparam><parameter>geometry</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a 4-tuple containing the actor's geometry</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Gets the size and position of an actor relative to its parent actor.
  This is the same as calling
  <link linkend="method-clutteractor--get-position"><methodname>get_position()</methodname></link> and
  <link linkend="method-clutteractor--get-size"><methodname>get_size()</methodname></link>.
  It tries to "do what you mean" and get the requested size and position if the
  actor's allocation is invalid
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-size">
    <title>clutter.Actor.set_size</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_size</methodname>
    <methodparam><parameter role="keyword">width</parameter></methodparam>
    <methodparam><parameter role="keyword">height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>the width in pixels</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>the height in pixels</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor's size request in pixels. This overrides any "normal"
  size request the actor would have. For example a text actor might normally
  request the size of the text; this function would force a specific size
  instead.</para>

  <para>If width and/or height are -1 the actor will use its "normal" size
  request instead of overriding it, i.e. you can "unset" the size with -1.</para>

  <para>This function sets or unsets both the minimum and natural size</para>
  </refsect2>

  <refsect2 id="method-clutteractor--get-size">
    <title>clutter.Actor.get_size</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_size</methodname>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a 2-tuple containing the actor's width and height</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  This function tries to "do what you mean" and return the size an actor will
  have. If the actor has a valid allocation, the allocation will be returned;
  otherwise, the actors natural size request will be returned.</para>

  <para>If you care whether you get the request vs. the allocation, you should
  probably call a different function like
  <link linkend="method-clutteractor--get-allocation-coords"><methodname>get_allocation_coords()</methodname></link> or
  <link linkend="method-clutteractor--get-preferred-width"><methodname>get_preferred_width()</methodname></link>
  </para>
  </refsect2>

  <refsect2 id="method-clutteractor--set-position">
    <title>clutter.Actor.set_position</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_position</methodname>
    <methodparam><parameter role="keyword">x</parameter></methodparam>
    <methodparam><parameter role="keyword">y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>the X coordinate</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>the Y coordinate</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor's fixed position in pixels relative to any parent actor.</para>

  <para>If a layout manager is in use, this position will override the layout
  manager and force a fixed position.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-position">
    <title>clutter.Actor.get_position</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_position</methodname>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a 2-tuple containing the actor's X and Y position</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>This function tries to "do what you mean" and tell you where the actor
  is, prior to any transformations. Retrieves the fixed position of an actor in
  pixels, if one has been set; otherwise, if the allocation is valid, returns
  the actor's allocated position; otherwise, returns 0,0.</para>

  <para>The returned position is in pixels.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-x">
    <title>clutter.Actor.set_x</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_x</methodname>
    <methodparam><parameter>x</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>the X coordinate</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor's X coordinate, relative to its parent, in pixels.</para>

  <para>Overrides any layout manager and forces a fixed position for the actor.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--get-x">
    <title>clutter.Actor.get_x</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_x</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the X coordinate</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Retrieves the X coordinate of a <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>.
  </para>

  <para>This function tries to "do what you mean", by returning the correct
  value depending on the actor's state.</para>

  <para>If the actor has a valid allocation, this function will return the X
  coordinate of the origin of the allocation box.</para>

  <para>If the actor has any fixed coordinate set using
  <link linkend="method-clutteractor--set-x"><methodname>set_x()</methodname></link>,
  <link linkend="method-clutteractor--set-position"><methodname>set_position()</methodname></link>or
  <link linkend="method-clutteractor--set-geometry"><methodname>set_geometry()</methodname></link>,
  this function will return that coordinate.</para>

  <para>If both the allocation and a fixed position are missing, this function
  will return 0.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-y">
    <title>clutter.Actor.set_y</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_y</methodname>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>the Y coordinate</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor's Y coordinate, relative to its parent, in pixels.</para>

  <para>Overrides any layout manager and forces a fixed position for the actor.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--get-y">
    <title>clutter.Actor.get_y</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_y</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the Y coordinate</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Retrieves the Y coordinate of a <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>.
  </para>

  <para>This function tries to "do what you mean", by returning the correct
  value depending on the actor's state.</para>

  <para>If the actor has a valid allocation, this function will return the Y
  coordinate of the origin of the allocation box.</para>

  <para>If the actor has any fixed coordinate set using
  <link linkend="method-clutteractor--set-y"><methodname>set_y()</methodname></link>,
  <link linkend="method-clutteractor--set-position"><methodname>set_position()</methodname></link>or
  <link linkend="method-clutteractor--set-geometry"><methodname>set_geometry()</methodname></link>,
  this function will return that coordinate.</para>

  <para>If both the allocation and a fixed position are missing, this function
  will return 0.</para>

  </refsect2>

  <refsect2 id="method-clutteractor--set-width">
    <title>clutter.Actor.set_width</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_width</methodname>
    <methodparam><parameter>width</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>the width of the actor, in pixels</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Forces a width on an actor, causing the actor's preferred width and
  height (if any) to be ignored.</para>

  <para>This function sets both the minimum and natural size of the actor.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--get-width">
    <title>clutter.Actor.get_width</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_width</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the width of the actor, in pixels</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Retrieves the width of a
  <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>.
  </para>

  <para>If the actor has a valid allocation, this function will return the width
  of the allocated area given to the actor.</para>

  <para>
    If the actor does not have a valid allocation, this function will return the
    actor's natural width, that is the preferred width of the actor.</para>

  <para>If you care whether you get the preferred width or the width that has
  been assigned to the actor, you should probably call a different function like
  <link linkend="method-clutteractor--get-allocation-coords"><methodname>get_allocation_coords()</methodname></link>
  to retrieve the allocated size or
  <link linkend="method-clutteractor--get-preferred-width"><methodname>get_preferred_width()</methodname></link>
  to retrieve the preferred width.</para>


  <para>If an actor has a fixed width, for instance a width that has been
  assigned using
  <link linkend="method-clutteractor--set-width"><methodname>set_width()</methodname></link>,
  the width returned will be the same value.
  </para>

  </refsect2>

  <refsect2 id="method-clutteractor--set-height">
    <title>clutter.Actor.set_height</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_height</methodname>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>the height of the actor, in pixels</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Forces a height on an actor, causing the actor's preferred width and
  height (if any) to be ignored.</para>

  <para>This function sets both the minimum and natural size of the actor.</para>
  </refsect2>

  <refsect2 id="method-clutteractor--get-height">
    <title>clutter.Actor.get_height</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_height</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the height of the actor, in pixels</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the height of a
  <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>.
  </para>

  <para>If the actor has a valid allocation, this function will return the height
  of the allocated area given to the actor.</para>

  <para>
    If the actor does not have a valid allocation, this function will return the
    actor's natural height, that is the preferred height of the actor.</para>

  <para>If you care whether you get the preferred height or the height that has
  been assigned to the actor, you should probably call a different function like
  <link linkend="method-clutteractor--get-allocation-coords"><methodname>get_allocation_coords()</methodname></link>
  to retrieve the allocated size or
  <link linkend="method-clutteractor--get-preferred-height"><methodname>get_preferred_height()</methodname></link>
  to retrieve the preferred height.</para>


  <para>If an actor has a fixed height, for instance a height that has been
  assigned using
  <link linkend="method-clutteractor--set-height"><methodname>set_height()</methodname></link>,
  the height returned will be the same value.
  </para>

  </refsect2>



  <refsect2 id="method-clutteractor--set-rotation">
    <title>clutter.Actor.set_rotation</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_rotation</methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>angle</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>axis</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.RotateAxis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>angle</parameter>&nbsp;:</term>
      <listitem><simpara>the rotation angle</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>X coordinate of the center of rotation, relative to the anchor point</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>Y coordinate of the center of rotation, relative to the anchor point</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>z</parameter>&nbsp;:</term>
      <listitem><simpara>Z coordinate of the center of rotation, relative to the anchor point</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>Sets the rotation angle of self around the given axis.</para>
  <para>The rotation center coordinates used depend on the value of axis:
    <itemizedlist>
      <listitem>
        <simpara>clutter.X_AXIS requires y and z</simpara>
      </listitem>
      <listitem>
        <simpara>clutter.Y_AXIS requires x and z</simpara>
      </listitem>
      <listitem>
        <simpara>clutter.Z_AXIS requires x and y</simpara>
      </listitem>
    </itemizedlist>
  </para>

  <para>The rotation coordinates are relative to the anchor point of the actor,
  set using
  <link linkend="method-clutteractor--set-anchor-point"><methodname>set_anchor_point()</methodname></link>.
  If no anchor point is set, the upper left corner is assumed as the origin.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-rotation">
    <title>clutter.Actor.get_rotation</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_rotation</methodname>
    <methodparam><parameter>axis</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>axis</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterRotateAxis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a 4-tuple containing the angle and the coordinates of the center of rotation on all three axes</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>Retrieves the angle and center of rotation on the given axis.</para>

  <para>The coordinates of the center returned by this function depend on the axis passed.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-opacity">
    <title>clutter.Actor.set_opacity</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_opacity</methodname>
    <methodparam><parameter>opacity</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>opacity</parameter>&nbsp;:</term>
      <listitem><simpara>the new opacity</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor's opacity, with zero being completely transparent and 255 (0xff) being fully opaque.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-opacity">
    <title>clutter.Actor.get_opacity</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_opacity</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the opacity of the actor</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Retrieves the opacity value of an actor, as set by <link linkend="method-clutteractor--set-opacity"><methodname>set_opacity()</methodname></link>.</para>


  <para>For retrieving the absolute opacity of the actor inside a paint virtual function, see <link linkend="method-clutteractor--get-paint-opacity"><methodname>get_paint_opacity()</methodname></link>.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-name">
    <title>clutter.Actor.set_name</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_name</methodname>
    <methodparam><parameter>name</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>name</parameter>&nbsp;:</term>
      <listitem><simpara>a string</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the given name to self. The name can be used to identify a
  <link linkend="class-clutteractor"><classname>clutter.Actor</classname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-name">
    <title>clutter.Actor.get_name</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_name</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a string</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Retrieves the actors name.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-gid">
    <title>clutter.Actor.get_gid</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_gid</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>an integer identifier</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Retrieves the actors unique id</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-clip">
    <title>clutter.Actor.set_clip</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_clip</methodname>
    <methodparam><parameter role="keyword">x_offset</parameter></methodparam>
    <methodparam><parameter role="keyword">y_offset</parameter></methodparam>
    <methodparam><parameter role="keyword">width</parameter></methodparam>
    <methodparam><parameter role="keyword">height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x_offset</parameter>&nbsp;:</term>
      <listitem><simpara>the X offset of the clip</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y_offset</parameter>&nbsp;:</term>
      <listitem><simpara>the Y offset of the clip</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>the width of the clip</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>the height of the clip</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets clip area in pixels for self. The clip area is always computed from the
  upper left corner of the actor, even if the anchor point is set otherwise.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--remove-clip">
    <title>clutter.Actor.remove_clip</title>

<programlisting><methodsynopsis language="python">
    <methodname>remove_clip</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
    <para>Removes clip area from the actor.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--has-clip">
    <title>clutter.Actor.has_clip</title>

<programlisting><methodsynopsis language="python">
    <methodname>has_clip</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a boolean value</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Determines whether the actor has a clip area set or not.</para>

  </refsect2>

  <refsect2 id="method-clutteractor--get-clip">
    <title>clutter.Actor.get_clip</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_clip</methodname>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a 4-tuple containing the X and Y offsets, and the width and height of the clip</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Gets the clip area for the actor, in pixels.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-parent">
    <title>clutter.Actor.set_parent</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_parent</methodname>
    <methodparam><parameter>parent</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>parent</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Actor</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the parent of self to parent. The opposite function is
  <link linkend="method-clutteractor--unparent"><methodname>unparent()</methodname></link>.
  </para>
  <para>
  This function should not be used by applications, but by custom container
  actor subclasses.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-parent">
    <title>clutter.Actor.get_parent</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_parent</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a clutter.Actor</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Retrieves the parent of the actor.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--reparent">
    <title>clutter.Actor.reparent</title>

<programlisting><methodsynopsis language="python">
    <methodname>reparent</methodname>
    <methodparam><parameter>new_parent</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>new_parent</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Actor</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  This function resets the parent actor of the actor. It is logically equivalent to
  calling
  <link linkend="method-clutteractor--unparent"><methodname>unparent()</methodname></link> and
  <link linkend="method-clutteractor--set-parent"><methodname>set_parent()</methodname></link>.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--unparent">
    <title>clutter.Actor.unparent</title>

<programlisting><methodsynopsis language="python">
    <methodname>unparent</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
    <para>This function should not be used in applications. It should be called
    by implementations of container actors, to dissociate a child from the
    container.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--raise-actor">
    <title>clutter.Actor.raise_actor</title>

<programlisting><methodsynopsis language="python">
    <methodname>raise_actor</methodname>
    <methodparam><parameter>above</parameter><initializer>None</initializer></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>above</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Actor, or None</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Raises the actor above a sibling.</para>
  <para>Both actors must have the same parent.</para>
  <para>This function is the equivalent of
  <link linkend="method-cluttercontainer--raise-child"><methodname>clutter.Container.raise_child()</methodname></link>.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--lower-actor">
    <title>clutter.Actor.lower_actor</title>

<programlisting><methodsynopsis language="python">
    <methodname>lower_actor</methodname>
    <methodparam><parameter>below</parameter><initializer>None</initializer></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>below</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Actor, or None</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Lowers the actor below a sibling</para>
  <para>Both actors must have the same parent.</para>
  <para>This function is the equivalent of
  <link linkend="method-cluttercontainer--lower-child"><methodname>clutter.Container.lower_child()</methodname></link>.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--raise-top">
    <title>clutter.Actor.raise_top</title>

<programlisting><methodsynopsis language="python">
    <methodname>raise_top</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <para>Raises an actor to the top.</para>

  <para>This function calls
  <link linkend="method-clutteractor--raise"><methodname>raise()</methodname></link>
  internally.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--lower-bottom">
    <title>clutter.Actor.lower_bottom</title>

<programlisting><methodsynopsis language="python">
    <methodname>lower_bottom</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <para>Lowers an actor to the bottom.</para>

  <para>This function calls
  <link linkend="method-clutteractor--lower_actor"><methodname>lower_actor()</methodname></link>
  internally.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-depth">
    <title>clutter.Actor.set_depth</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_depth</methodname>
    <methodparam><parameter>depth</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>depth</parameter>&nbsp;:</term>
      <listitem><simpara>the Z coordinate of the actor</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the Z co-ordinate of self to depth. The Units of which are dependant on
  the perspective setup.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-depth">
    <title>clutter.Actor.get_depth</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_depth</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>the Z coordinate of the actor, in pixels</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Retrieves the depth of self.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-scale">
    <title>clutter.Actor.set_scale</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_scale</methodname>
    <methodparam><parameter>scale_x</parameter></methodparam>
    <methodparam><parameter>scale_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>scale_x</parameter>&nbsp;:</term>
      <listitem><simpara>the scaling factor on the X axis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>scale_y</parameter>&nbsp;:</term>
      <listitem><simpara>the scaling factor on the Y axis</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Scales an actor with the given factors. The scaling is always relative to the anchor point.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-scale">
    <title>clutter.Actor.get_scale</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_scale</methodname>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a 2-tuple containing the scaling factors on the X and Y axes</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Retrieves an actors scale factors.</para>
  </refsect2>





  <refsect2 id="method-clutteractor--move-by">
    <title>clutter.Actor.move_by</title>

<programlisting><methodsynopsis language="python">
    <methodname>move_by</methodname>
    <methodparam><parameter>dx</parameter></methodparam>
    <methodparam><parameter>dy</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>dx</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>dy</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Moves an actor by the specified distance relative to its current position in
  pixels. This function modifies the fixed position of an actor and thus removes
  it from any layout management. Another way to move an actor is with an anchor
  point, see
  <link linkend="method-clutteractor-set-anchor-point"><methodname>set_anchor_point()</methodname></link>.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--apply-transform-to-point">
    <title>clutter.Actor.apply_transform_to_point</title>

<programlisting><methodsynopsis language="python">
    <methodname>apply_transform_to_point</methodname>
    <methodparam><parameter>point</parameter></methodparam>
    <methodparam><parameter>vertex</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>point</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Vertex</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>vertex</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.Vertex</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Transforms point in coordinates relative to the actor into
  screen-relative coordinates with the current actor transformation (i.e. scale,
  rotation, etc)</para>
  </refsect2>


  <refsect2 id="method-clutteractor--is-scaled">
    <title>clutter.Actor.is_scaled</title>

<programlisting><methodsynopsis language="python">
    <methodname>is_scaled</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Checks whether the actor is scaled in either dimension.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--is-rotated">
    <title>clutter.Actor.is_rotated</title>

<programlisting><methodsynopsis language="python">
    <methodname>is_rotated</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Checks whether any rotation is applied to the actor.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--apply-relative-transform-to-point">
    <title>clutter.Actor.apply_relative_transform_to_point</title>

<programlisting><methodsynopsis language="python">
    <methodname>apply_relative_transform_to_point</methodname>
    <methodparam><parameter>ancestor</parameter></methodparam>
    <methodparam><parameter>point</parameter></methodparam>
    <methodparam><parameter>vertex</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>ancestor</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterActor*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>point</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterVertex*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>vertex</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterVertex*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Transforms point in coordinates relative to the actor into ancestor-relative
  coordinates using the relevant transform stack (i.e. scale, rotation, etc).
  </para>
  <para>
  If ancestor is None the ancestor will be the
  <link linkend="class-clutterstage"><classname>clutter.Stage</classname></link>.
  In this case, the coordinates returned will be the coordinates on the stage
  before the projection is applied. This is different from the behaviour of
  <link linkend="method-clutteractor--apply-transform-to-point"><methodname>apply_transform_to_point()</methodname></link>.
  </para>
  </refsect2>





  <refsect2 id="method-clutteractor--set-reactive">
    <title>clutter.Actor.set_reactive</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_reactive</methodname>
    <methodparam><parameter>reactive</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>reactive</parameter>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the actor to be reactive. Reactive actors will receive events.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-reactive">
    <title>clutter.Actor.get_reactive</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_reactive</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Checks whether actor is marked as reactive.</para>
  </refsect2>





  <refsect2 id="method-clutteractor--should-pick-paint">
    <title>clutter.Actor.should_pick_paint</title>

<programlisting><methodsynopsis language="python">
    <methodname>should_pick_paint</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Utility call for subclasses overiding the pick method.</para>

  <para>This function should never be called directly by applications.</para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-shader">
    <title>clutter.Actor.set_shader</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_shader</methodname>
    <methodparam><parameter>shader</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>shader</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterShader*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets the
  <link linkend="class-cluttershader"><classname>clutter.Shader</classname></link>
  to be used when rendering self. If shader is None it will unset any currently
  set shader for the actor.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-shader">
    <title>clutter.Actor.get_shader</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_shader</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a ClutterShader*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Queries the currently set
  <link linkend="class-cluttershader"><classname>clutter.Shader</classname></link>
  on the actor.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-shader-param">
    <title>clutter.Actor.set_shader_param</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_shader_param</methodname>
    <methodparam><parameter>param</parameter></methodparam>
    <methodparam><parameter>value</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>param</parameter>&nbsp;:</term>
      <listitem><simpara>a string</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>value</parameter>&nbsp;:</term>
      <listitem><simpara>a float</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the value for a named parameter of the shader applied to actor.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-anchor-point">
    <title>clutter.Actor.set_anchor_point</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_anchor_point</methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>anchor_x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>anchor_y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets an anchor point for the actor. The anchor point is a point in the
  coordinate space of an actor to which the actor position within its parent
  is relative; the default is (0, 0), i.e. the top-left corner of the actor.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--move-anchor-point">
    <title>clutter.Actor.move_anchor_point</title>

<programlisting><methodsynopsis language="python">
    <methodname>move_anchor_point</methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>anchor_x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>anchor_y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets an anchor point for the actor, and adjusts the actor postion so that the
  relative position of the actor toward its parent remains the same.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-anchor-point">
    <title>clutter.Actor.get_anchor_point</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_anchor_point</methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>anchor_x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>anchor_y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Gets the current anchor point of the actor in pixels.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-anchor-point-from-gravity">
    <title>clutter.Actor.set_anchor_point_from_gravity</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_anchor_point_from_gravity</methodname>
    <methodparam><parameter>gravity</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>gravity</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterGravity</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>Sets an anchor point on the actor, based on the given gravity (this is a
  convenience function wrapping
  <link linkend="method-clutteractor--set-anchor-point"><methodname>set_anchor_point()</methodname></link>
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--move-anchor-point-from-gravity">
    <title>clutter.Actor.move_anchor_point_from_gravity</title>

<programlisting><methodsynopsis language="python">
    <methodname>move_anchor_point_from_gravity</methodname>
    <methodparam><parameter>gravity</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>gravity</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterGravity</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets an anchor point on the actor based on the given gravity, adjusting the
  actor postion so that its relative position within its parent remains
  unchanged.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--transform-stage-point">
    <title>clutter.Actor.transform_stage_point</title>

<programlisting><methodsynopsis language="python">
    <methodname>transform_stage_point</methodname>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>x_out</parameter></methodparam>
    <methodparam><parameter>y_out</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x_out</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y_out</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  This function translates screen coordinates (x, y) to coordinates relative to
  the actor. For example, it can be used to translate screen events from global
  screen coordinates into actor-local coordinates.
  </para>

  <para>
  The conversion can fail, notably if the transform stack results in the actor
  being projected on the screen as a mere line.
  </para>

  <para>The conversion should not be expected to be pixel-perfect due to the
  nature of the operation. In general the error grows when the skewing of the
  actor rectangle on screen increases.
  </para>

  <caution>
    <para>This function is fairly computationally intensive.</para>
    <para>This function only works when the allocation is up-to-date, i.e. inside of paint()</para>
  </caution>
  </refsect2>





  <refsect2 id="method-clutteractor--get-preferred-width">
    <title>clutter.Actor.get_preferred_width</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_preferred_width</methodname>
    <methodparam><parameter>for_height</parameter></methodparam>
    <methodparam><parameter>min_width_p</parameter></methodparam>
    <methodparam><parameter>natural_width_p</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>for_height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>min_width_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>natural_width_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Computes the requested minimum and natural widths for an actor, optionally
  depending on the specified height, or if they are already computed, returns
  the cached values.
  </para>
  <para>
  An actor may not get its request - depending on the layout manager that's in
  effect.
  </para>
  <para>
  A request should not incorporate the actor's scale or anchor point; those
  transformations do not affect layout, only rendering.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-preferred-height">
    <title>clutter.Actor.get_preferred_height</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_preferred_height</methodname>
    <methodparam><parameter>for_width</parameter></methodparam>
    <methodparam><parameter>min_height_p</parameter></methodparam>
    <methodparam><parameter>natural_height_p</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>for_width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>min_height_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>natural_height_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Computes the requested minimum and natural heights for an actor, or if they
  are already computed, returns the cached values.
  </para>
  <para>
  An actor may not get its request - depending on the layout manager that's in effect.
  </para>
  <para>
  A request should not incorporate the actor's scale or anchor point; those
  transformations do not affect layout, only rendering.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-preferred-size">
    <title>clutter.Actor.get_preferred_size</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_preferred_size</methodname>
    <methodparam><parameter>min_width_p</parameter></methodparam>
    <methodparam><parameter>min_height_p</parameter></methodparam>
    <methodparam><parameter>natural_width_p</parameter></methodparam>
    <methodparam><parameter>natural_height_p</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>min_width_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>min_height_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>natural_width_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>natural_height_p</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Computes the preferred minimum and natural size of an actor, taking into
  account the actor's geometry management (either height-for-width or
  width-for-height).
  </para>
  <para>
    The width and height used to compute the preferred height and preferred
    width are the actor's natural ones.
  </para>
  <para>
  If you need to control the height for the preferred width, or the width for
  the preferred height, you should use
  <link linkend="method-clutteractor--get-preferred-width"><methodname>get_preferred_width()</methodname></link> and
  <link linkend="method-clutteractor--get-preferred-height"><methodname>get_preferred_height()</methodname></link>,
  and check the actor's preferred geometry management using the "request-mode" property.
  </para>

  </refsect2>




  <refsect2 id="method-clutteractor--allocate">
    <title>clutter.Actor.allocate</title>

<programlisting><methodsynopsis language="python">
    <methodname>allocate</methodname>
    <methodparam><parameter>box</parameter></methodparam>
    <methodparam><parameter>absolute_origin_changed</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>box</parameter>&nbsp;:</term>
      <listitem><simpara>a clutter.ActorBox</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>absolute_origin_changed</parameter>&nbsp;:</term>
      <listitem><simpara>a boolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Called by the parent of an actor to assign the actor its size. Should never be
  called by applications (except when implementing a container or layout manager).
  </para>
  <para>
  Actors can know from their allocation box whether they have moved with respect
  to their parent actor. The absolute_origin_changed parameter additionally
  indicates whether the parent has moved with respect to the stage, for example
  because a grandparent's origin has moved.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--allocate-preferred-size">
    <title>clutter.Actor.allocate_preferred_size</title>

<programlisting><methodsynopsis language="python">
    <methodname>allocate_preferred_size</methodname>
    <methodparam><parameter>absolute_origin_changed</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>absolute_origin_changed</parameter>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Allocates the natural size of the actor.
  </para>
  <para>
  This function is a utility call for ClutterActor implementations that
  allocates the actor's preferred natural size. It can be used by fixed layout
  managers (like ClutterGroup or so called 'composite actors') inside the
  <link linkend="method-clutteractor--allocate"><methodname>allocate()</methodname></link>
  implementation to give each child exactly how much space it requires.
  </para>
  <para>
  This function is not meant to be used by applications. It is also not meant
  to be used outside the implementation of the
  <link linkend="method-clutteractor--allocate"><methodname>allocate()</methodname></link>
  virtual function.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-allocation-coords">
    <title>clutter.Actor.get_allocation_coords</title>

<programlisting>
  <methodsynopsis language="python">
    <methodname>get_allocation_coords</methodname>
  </methodsynopsis>
</programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x_1</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y_1</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x_2</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y_2</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Gets the layout box an actor has been assigned. The allocation can only be
  assumed valid inside a paint() method; anywhere else, it may be out-of-date.
  </para>
  <para>
  An allocation does not incorporate the actor's scale or anchor point; those
  transformations do not affect layout, only rendering.
  </para>
  <para>
  The returned coordinates are in pixels.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-allocation-box">
    <title>clutter.Actor.get_allocation_box</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_allocation_box</methodname>
    <methodparam><parameter>box</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>box</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterActorBox*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Gets the layout box an actor has been assigned. The allocation can only be
  assumed valid inside a paint() method; anywhere else, it may be out-of-date.
  </para>
  <para>
  An allocation does not incorporate the actor's scale or anchor point; those
  transformations do not affect layout, only rendering.
  </para>

  <note>
  Do not call any of the clutter_actor_get_allocation_*() family of functions
  inside the implementation of the get_preferred_width() or
  get_preferred_height() virtual functions.
  </note>


  </refsect2>


  <refsect2 id="method-clutteractor--get-allocation-geometry">
    <title>clutter.Actor.get_allocation_geometry</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_allocation_geometry</methodname>
    <methodparam><parameter>geom</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>geom</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterGeometry*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Gets the layout box an actor has been assigned. The allocation can only be
  assumed valid inside a paint() method; anywhere else, it may be out-of-date.
  </para>
  <para>
  An allocation does not incorporate the actor's scale or anchor point; those
  transformations do not affect layout, only rendering.
  </para>
  <para>
  The returned rectangle is in pixels.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-allocation-vertices">
    <title>clutter.Actor.get_allocation_vertices</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_allocation_vertices</methodname>
    <methodparam><parameter>ancestor</parameter></methodparam>
    <methodparam><parameter>verts[4]</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>ancestor</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterActor*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>verts[4]</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterVertex</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Calculates the transformed coordinates of the four corners of the actor in the
  plane of ancestor. The returned vertices relate to the
  <link linkend="class-clutteractorbox"><classname>clutter.ActorBox</classname></link>
  coordinates as follows:

    <itemizedlist>
      <listitem>
        <simpara>v[0] contains (x1, y1)</simpara>
      </listitem>
      <listitem>
        <simpara>v[1] contains (x2, y1)</simpara>
      </listitem>
      <listitem>
        <simpara>v[2] contains (x1, y2)</simpara>
      </listitem>
      <listitem>
        <simpara>v[3] contains (x2, y2)</simpara>
      </listitem>
    </itemizedlist>
 </para>

  <para>
    If ancestor is NONE the ancestor will be the
    <link linkend="class-clutterstage"><classname>ClutterStage</classname></link>.
    In this case, the coordinates returned will be the coordinates on the stage
    before the projection is applied. This is different from the behaviour of
    <link linkend="method-clutteractor--get_abs_allocation_verticies"><methodname>get_abs_allocation_vertices()</methodname></link>
    .
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-sizeu">
    <title>clutter.Actor.set_sizeu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_sizeu</methodname>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Overrides the actor's size request in ClutterUnits. If width and/or height are
  -1 the actor will use its normal size request (the override is removed).
  </para>
  <para>
  This function sets or unsets both the minimum and natural size.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-sizeu">
    <title>clutter.Actor.get_sizeu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_sizeu</methodname>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  This function tries to "do what you mean" and return the size an actor will
  have. If the actor has a valid allocation, the allocation will be returned;
  otherwise, the actors natural size request will be returned.
  </para>
  <para>
  If you care whether you get the request vs. the allocation, you should
  probably call a different function like
  <link linkend="method-clutteractor--get-allocation-coords"><methodname>get_allocation_coords()</methodname></link> or
  <link linkend="method-clutteractor--get-preferred-width"><methodname>get_preferred_width()</methodname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-transformed-size">
    <title>clutter.Actor.get_transformed_size</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_transformed_size</methodname>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a guint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a guint*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Gets the absolute size of an actor taking into account any scaling factors
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-transformed-sizeu">
    <title>clutter.Actor.get_transformed_sizeu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_transformed_sizeu</methodname>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Gets the absolute size of an actor in ClutterUnitss, taking into account the
  scaling factors.
  </para>
  <para>
  If the actor has a valid allocation, the allocated size will be used. If the
  actor has not a valid allocation then the preferred size will be transformed
  and returned.
  </para>
  <para>
  If you want the transformed allocation, see
  <link linkend="method-clutteractor--get-abs-allocation-vertices"><methodname>get_abs_allocation_vertices()</methodname></link>
  instead.
  </para>

  <note>
    When the actor (or one of its ancestors) is rotated around the X or Y axis,
    it no longer appears as on the stage as a rectangle, but as a generic
    quadrangle; in that case this function returns the size of the smallest
    rectangle that encapsulates the entire quad. Please note that in this case
    no assumptions can be made about the relative position of this envelope to
    the absolute position of the actor, as returned by
    <link linkend="method-clutteractor--get-transformed-position"><methodname>get_transformed_position()</methodname></link>;
    if you need this information, you need to use
    <link linkend="method-clutteractor--get-abs-allocation-vertices"><methodname>get_abs_allocation_vertices()</methodname></link>;
    to get the coords of the actual quadrangle.
  </note>

  </refsect2>


  <refsect2 id="method-clutteractor--set-positionu">
    <title>clutter.Actor.set_positionu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_positionu</methodname>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets the actor's position in ClutterUnits relative to any parent actor.
  </para>
  <para>
  If a layout manager is in use, this position will override the layout manager
  and force a fixed position.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-positionu">
    <title>clutter.Actor.get_positionu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_positionu</methodname>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  This function tries to "do what you mean" and tell you where the actor is,
  prior to any transformations. Retrieves the fixed position of an actor in
  pixels, if one has been set; otherwise, if the allocation is valid, returns
  the actor's allocated position; otherwise, returns 0,0.
  </para>
  <para>
  The returned position is in ClutterUnits.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-transformed-position">
    <title>clutter.Actor.get_transformed_position</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_transformed_position</methodname>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Gets the absolute position of an actor, in pixels, relative to the stage.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-transformed-positionu">
    <title>clutter.Actor.get_transformed_positionu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_transformed_positionu</methodname>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Gets the absolute position of an actor, in ClutterUnits, relative to the stage.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-fixed-position-set">
    <title>clutter.Actor.get_fixed_position_set</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_fixed_position_set</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Checks whether an actor has a fixed position set (and will thus be unaffected
  by any layout manager).
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-fixed-position-set">
    <title>clutter.Actor.set_fixed_position_set</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_fixed_position_set</methodname>
    <methodparam><parameter>is_set</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>is_set</parameter>&nbsp;:</term>
      <listitem><simpara>a gboolean</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets whether an actor has a fixed position set (and will thus be unaffected by
  any layout manager).
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-widthu">
    <title>clutter.Actor.get_widthu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_widthu</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Retrieves the width of a ClutterActor, in ClutterUnits.
  </para>
  <para>
  If the actor has a valid allocation, this function will return the width of
  the allocated area given to the actor.
  </para>
  <para>
  If the actor does not have a valid allocation, this function will return the
  actor's natural width, that is the preferred width of the actor.
  </para>
  <para>
  If you care whether you get the preferred width or the width that has been
  assigned to the actor, you should probably call a different function like

  <link linkend="method-clutteractor--get-allocation-coords"><methodname>get_allocation_coords()</methodname></link>
  to retrieve the allocated size or
  <link linkend="method-clutteractor--get-preferred-width"><methodname>get_preferred_width()</methodname></link>
  to retrieve the preferred width.
  </para>
  <para>
  If an actor has a fixed width, for instance a width that has been assigned using
  <link linkend="method-clutteractor--set-width"><methodname>clutter_actor_set_width()</methodname></link>,
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-heightu">
    <title>clutter.Actor.get_heightu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_heightu</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the height of a ClutterActor, in ClutterUnits.
  </para>
  <para>
  If the actor has a valid allocation, this function will return the height of
  the allocated area given to the actor.
  </para>
  <para>
  If the actor does not have a valid allocation, this function will return the
  actor's natural height, that is the preferred height of the actor.
  </para>
  <para>
  If you care whether you get the preferred height or the height that has been
  assigned to the actor, you should probably call a different function like

  <link linkend="method-clutteractor--get-allocation-coords"><methodname>get_allocation_coords()</methodname></link>
  to retrieve the allocated size or
  <link linkend="method-clutteractor--get-preferred-height"><methodname>get_preferred_height()</methodname></link>
  to retrieve the preferred height.
  </para>
  <para>
  If an actor has a fixed height, for instance a height that has been assigned using
  <link linkend="method-clutteractor--set-height"><methodname>clutter_actor_set_height()</methodname></link>,
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-widthu">
    <title>clutter.Actor.set_widthu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_widthu</methodname>
    <methodparam><parameter>width</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Forces a width on an actor, causing the actor's preferred width and height
  (if any) to be ignored.
  </para>
  <para>
  This function sets both the minimum and natural size of the actor.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--set-heightu">
    <title>clutter.Actor.set_heightu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_heightu</methodname>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Forces a height on an actor, causing the actor's preferred width and height
  (if any) to be ignored.
  <para>
  </para>
  This function sets both the minimum and natural size of the actor.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-xu">
    <title>clutter.Actor.get_xu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_xu</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Retrieves the X coordinate of a
  <link linkend="class-clutteractor"><classname>ClutterActor</classname></link>,
  in ClutterUnits.
  </para>
  <para>
  This function tries to "do what you mean", by returning the correct value
  depending on the actor's state.
  </para>
  <para>
  If the actor has a valid allocation, this function will return the X
  coordinate of the origin of the allocation box.
  </para>
  <para>
  If the actor has any fixed coordinate set using
  <link linkend="method-clutteractor--set-x"><methodname>set_x()</methodname></link>,
  <link linkend="method-clutteractor--set-position"><methodname>set_position()</methodname></link> or
  <link linkend="method-clutteractor--set-geometry"><methodname>set_geometry()</methodname></link>,
  this function will return that coordinate.
  </para>
  <para>
  If both the allocation and a fixed position are missing, this function will
  return 0.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-yu">
    <title>clutter.Actor.get_yu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_yu</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the Y coordinate of a
  <link linkend="class-clutteractor"><classname>ClutterActor</classname></link>,
  in ClutterUnits.
  </para>
  <para>
  This function tries to "do what you mean", by returning the correct value
  depending on the actor's state.
  </para>
  <para>
  If the actor has a valid allocation, this function will return the Y
  coordinate of the origin of the allocation box.
  </para>
  <para>
  If the actor has any fixed coordinate set using
  <link linkend="method-clutteractor--set-y"><methodname>set_y()</methodname></link>,
  <link linkend="method-clutteractor--set-position"><methodname>set_position()</methodname></link> or
  <link linkend="method-clutteractor--set-geometry"><methodname>set_geometry()</methodname></link>,
  this function will return that coordinate.
  </para>
  <para>
  If both the allocation and a fixed position are missing, this function will
  return 0.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-xu">
    <title>clutter.Actor.set_xu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_xu</methodname>
    <methodparam><parameter>x</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Sets the actor's X coordinate, relative to its parent.
  </para>
  <para>
  Overrides any layout manager and forces a fixed position for the actor.
  </para>


  </refsect2>


  <refsect2 id="method-clutteractor--set-yu">
    <title>clutter.Actor.set_yu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_yu</methodname>
    <methodparam><parameter>y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>

  <para>
  Sets the actor's Y coordinate, relative to its parent.
  </para>
  <para>
  Overrides any layout manager and forces a fixed position for the actor.
  </para>

  </variablelist>



  </refsect2>


  <refsect2 id="method-clutteractor--set-rotationx">
    <title>clutter.Actor.set_rotationx</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_rotationx</methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>angle</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>axis</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterRotateAxis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>angle</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterFixed</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>z</parameter>&nbsp;:</term>
      <listitem><simpara>a gint</simpara></listitem>
    </varlistentry>
  </variablelist>


  <para>
  Sets the rotation angle of self around the given axis.
  </para>
  <para>
  This function is the fixed point variant of
  <link linkend="method-clutteractor--set-rotation"><methodname>set_rotation()</methodname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-rotationu">
    <title>clutter.Actor.set_rotationu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_rotationu</methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>angle</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>axis</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterRotateAxis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>angle</parameter>&nbsp;:</term>
      <listitem><simpara>a gdouble</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>z</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Sets the rotation angle of self around the given axis.
  </para>
  <para>
  This function is the units based variant of
  <link linkend="method-clutteractor--set-rotation"><methodname>set_rotation()</methodname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-rotationx">
    <title>clutter.Actor.get_rotationx</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_rotationx</methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>axis</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterRotateAxis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>z</parameter>&nbsp;:</term>
      <listitem><simpara>a gint*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a ClutterFixed</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the angle and center of rotation on the given axis, set using
  <link linkend="method-clutteractor--set-rotation"><methodname>set_rotation()</methodname></link>.
  </para>
  <para>
  This function is the fixed point variant of
  <link linkend="method-clutteractor--get-rotation"><methodname>et_rotation()</methodname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-rotationu">
    <title>clutter.Actor.get_rotationu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_rotationu</methodname>
    <methodparam><parameter>axis</parameter></methodparam>
    <methodparam><parameter>x</parameter></methodparam>
    <methodparam><parameter>y</parameter></methodparam>
    <methodparam><parameter>z</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>axis</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterRotateAxis</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>z</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gdouble</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the angle and center of rotation on the given axis, set using
  <link linkend="method-clutteractor--set-rotation"><methodname>set_rotation()</methodname></link>.
  </para>
  <para>
  This function is the units based variant of
  <link linkend="method-clutteractor--get-rotation"><methodname>et_rotation()</methodname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-paint-opacity">
    <title>clutter.Actor.get_paint_opacity</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_paint_opacity</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a guint8</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the absolute opacity of the actor, as it appears on the stage.
  </para>
  <para>
  This function traverses the hierarchy chain and composites the opacity of the
  actor with that of its parents.
  </para>
  <para>
  This function is intended for subclasses to use in the paint virtual function,
  to paint themselves with the correct opacity.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-clipu">
    <title>clutter.Actor.set_clipu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_clipu</methodname>
    <methodparam><parameter>xoff</parameter></methodparam>
    <methodparam><parameter>yoff</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>xoff</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>yoff</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Unit-based variant of
  <link linkend="method-clutteractor--set-clip"><methodname>set_clip()</methodname></link>
  </para>

  <para>
  Sets clip area for self. The clip area is always computed from the upper left
  corner of the actor, even if the anchor point is set otherwise.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-clipu">
    <title>clutter.Actor.get_clipu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_clipu</methodname>
    <methodparam><parameter>xoff</parameter></methodparam>
    <methodparam><parameter>yoff</parameter></methodparam>
    <methodparam><parameter>width</parameter></methodparam>
    <methodparam><parameter>height</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>xoff</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>yoff</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>width</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>height</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Unit-based variant of
  <link linkend="method-clutteractor--get-clip"><methodname>get_clip()</methodname></link>.
  </para>
  <para>
  Gets the clip area for self, in ClutterUnits.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-stage">
    <title>clutter.Actor.get_stage</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_stage</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a ClutterActor*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the
  <link linkend="class-clutterstage"><classname>ClutterStage</classname></link>
  where the actor is contained.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-depthu">
    <title>clutter.Actor.set_depthu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_depthu</methodname>
    <methodparam><parameter>depth</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>depth</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>Sets the Z co-ordinate of self to depth in ClutterUnits, the units of
  which are dependant on the perspective setup.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-depthu">
    <title>clutter.Actor.get_depthu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_depthu</methodname>
    <methodparam></methodparam>  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><emphasis>Returns</emphasis>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Retrieves the depth of the actor.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-scalex">
    <title>clutter.Actor.set_scalex</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_scalex</methodname>
    <methodparam><parameter>scale_x</parameter></methodparam>
    <methodparam><parameter>scale_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>scale_x</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterFixed</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>scale_y</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterFixed</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Fixed point version of
  <link linkend="method-clutteractor--set-scale"><methodname>set_scale()</methodname></link>.
  </para>
  <para>
  Scales an actor with the given factors. The scaling is always relative to the
  anchor point.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-scalex">
    <title>clutter.Actor.get_scalex</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_scalex</methodname>
    <methodparam><parameter>scale_x</parameter></methodparam>
    <methodparam><parameter>scale_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>scale_x</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterFixed*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>scale_y</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterFixed*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Fixed point version of
  <link linkend="method-clutteractor--get-scale"><methodname>get_scale()</methodname></link>.
  </para>
  <para>
  Retrieves the scale factors of an actor.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--move-byu">
    <title>clutter.Actor.move_byu</title>

<programlisting><methodsynopsis language="python">
    <methodname>move_byu</methodname>
    <methodparam><parameter>dx</parameter></methodparam>
    <methodparam><parameter>dy</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>dx</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>dy</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Moves an actor by the specified distance relative to its current position.
  </para>
  <para>
  The move is accomplished by setting a fixed position, overriding any layout
  manager, see
  <link linkend="method-clutteractor--set-positionu"><methodname>set_positionu()</methodname></link>.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--set-anchor-pointu">
    <title>clutter.Actor.set_anchor_pointu</title>

<programlisting><methodsynopsis language="python">
    <methodname>set_anchor_pointu</methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>anchor_x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>anchor_y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets an anchor point for self. The anchor point is a point in the coordinate
  space of an actor to which the actor position within its parent is relative;
  the default is (0, 0), i.e. the top-left corner of the actor.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--move-anchor-pointu">
    <title>clutter.Actor.move_anchor_pointu</title>

<programlisting><methodsynopsis language="python">
    <methodname>move_anchor_pointu</methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>anchor_x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>anchor_y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32</simpara></listitem>
    </varlistentry>
  </variablelist>
  <para>
  Sets an anchor point for the actor, and adjusts the actor postion so that the
  relative position of the actor toward its parent remains the same.
  </para>
  </refsect2>


  <refsect2 id="method-clutteractor--get-anchor-pointu">
    <title>clutter.Actor.get_anchor_pointu</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_anchor_pointu</methodname>
    <methodparam><parameter>anchor_x</parameter></methodparam>
    <methodparam><parameter>anchor_y</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>anchor_x</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
    <varlistentry>
      <term><parameter>anchor_y</parameter>&nbsp;:</term>
      <listitem><simpara>a gint32*</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>Gets the current anchor point of the actor in ClutterUnits.
  </para>

  </refsect2>


  <refsect2 id="method-clutteractor--get-abs-allocation-vertices">
    <title>clutter.Actor.get_abs_allocation_vertices</title>

<programlisting><methodsynopsis language="python">
    <methodname>get_abs_allocation_vertices</methodname>
    <methodparam><parameter>verts[4]</parameter></methodparam>
  </methodsynopsis></programlisting>
  <variablelist>
    <varlistentry>
      <term><parameter>verts[4]</parameter>&nbsp;:</term>
      <listitem><simpara>a ClutterVertex</simpara></listitem>
    </varlistentry>
  </variablelist>

  <para>
  Calculates the transformed screen coordinates of the four corners of the actor;
  the returned vertices relate to the
  <link linkend="class-clutteractorbox"><classname>clutter.ActorBox</classname></link>
  coordinates as follows:

  <itemizedlist>
    <listitem>
      <simpara>v[0] contains (x1, y1)</simpara>
    </listitem>
    <listitem>
      <simpara>v[1] contains (x2, y1)</simpara>
    </listitem>
    <listitem>
      <simpara>v[2] contains (x1, y2)</simpara>
    </listitem>
    <listitem>
    <simpara>v[3] contains (x2, y2)</simpara>
    </listitem>
   </itemizedlist>



  </para>

  </refsect2>
<refsect1>
  <title>Signals</title>

  <refsect2 id="signal-clutteractor--button-press-event">
    <title>The "button-press-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-clutterbuttonevent"><classname>clutter.ButtonEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "button-press-event" signal is emitted each time a mouse button is pressed on <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--button-release-event">
    <title>The "button-release-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-clutterbuttonevent"><classname>clutter.ButtonEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "button-release-event" signal is emitted each time a mouse button is released on <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--captured-event">
    <title>The "captured-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which received the signal</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-clutterevent"><classname>clutter.Event</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "captured-event" signal is emitted when an event is captured by Clutter. This signal will be emitted starting from the top-level container (the <link linkend="class-clutterstage"><classname>clutter.Stage</classname></link>) to the actor which received the event going down the hierarchy. This signal can be used to intercept every event before the specialized events (like "<link linkend="signal-clutteractor--button-press-event">button-press-event</link>" or "<link linkend="signal-clutteractor--button-released-event">key-released-event</link>") are emitted.</para>

  </refsect2>
  <refsect2 id="signal-clutteractor--destroy">
    <title>The "destroy" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which received the signal</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "destroy" signal is emitted when an actor is destroyed, either by direct invocation of <link linkend="method-clutteractor--destroy"><methodname>clutter.Actor.destroy</methodname>()</link> or when the <link linkend="class-cluttergroup"><classname>clutter.Group</classname></link> that contains the actor is destroyed.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--enter-event">
    <title>The "enter-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which the pointer has entered</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-cluttercrossingevent"><classname>clutter.CrossingEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "event-event" signal is emitted when the pointer enters the <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--event">
    <title>The "event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-cluttercrossingevent"><classname>clutter.Event</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "event" signal is emitted each time an event is received by the actor. This signal will be emitted on every actor, following the hierarchy chain, until it reaches the top-level container (the <link linkend="class-clutterstage"><classname>clutter.Stage</classname></link>).</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--focus-in">
    <title>The "focus-in" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which now now has key focus</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "focus-in" signal is emitted when <parameter>actor</parameter> recieves key focus.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--focus-out">
    <title>The "focus-out" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which now now has key focus</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "focus-out" signal is emitted when <parameter>actor</parameter> loses key focus.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--hide">
    <title>The "hide" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the object which received the signal</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "hide" signal is emitted when an actor is no longer visible.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--key-press-event">
    <title>The "key-press-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-clutterkeyevent"><classname>clutter.KeyEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "key-press-event" signal is emitted each time a keyboard button is pressed on <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--key-release-event">
    <title>The "key-release-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-clutterkeyevent"><classname>clutter.KeyEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "key-press-event" signal is emitted each time a keyboard button is released on <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--leave-event">
    <title>The "leave-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which the pointer has left</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-cluttercrossingevent"><classname>clutter.CrossingEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "leave-event" signal is emitted when the pointer leaves the <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--motion-event">
    <title>The "motion-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which the pointer has moved on</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-cluttermotionevent"><classname>clutter.MotionEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "motion-event" signal is emitted each time the mouse pointer is moved on <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--parent-set">
    <title>The "parent-set" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>old_parent</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the signal</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>old_parent</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the previous parent of the actor, or <code>None</code></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "parent-set" signal is emitted when the parent of the actor changes.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--scroll-event">
    <title>The "scroll-event" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>event</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>event</parameter>&nbsp;: </term>
        <listitem>
          <simpara>a <link linkend="class-clutterscrollevent"><classname>clutter.ScrollEvent</classname></link></simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>Returns</parameter>&nbsp;: </term>
        <listitem>
          <simpara><code>True</code> if the event has been handled by the actor, or <code>False</code> to continue the emission.</simpara>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>The "scroll-event" signal is emitted each time the mouse is scrolled on <parameter>actor</parameter>.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--show">
    <title>The "show" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "show" signal is emitted when an actor becomes visible.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--paint">
    <title>The "paint" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "paint" signal is emitted when an actor is being painted.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--realize">
    <title>The "realize" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "realize" signal is emitted when an actor is being realized.</para>

  </refsect2>

  <refsect2 id="signal-clutteractor--unrealize">
    <title>The "unrealize" clutter.Actor signal</title>

    <programlisting><methodsynopsis language="python">
        <methodname>callback</methodname>
        <methodparam><parameter>actor</parameter></methodparam>
        <methodparam><parameter>user_param1</parameter></methodparam>
        <methodparam><parameter>...</parameter></methodparam>
    </methodsynopsis></programlisting>

    <variablelist>
      <varlistentry>
        <term>
          <parameter>actor</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the actor which received the event</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>user_param1</parameter>&nbsp;: </term>
        <listitem>
          <simpara>the first user parameter (if any) specified with the <methodname>connect</methodname>() method</simpara>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <parameter>...</parameter>&nbsp;: </term>
        <listitem>
          <simpara>additional user parameters (if any)</simpara>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The "unrealize" signal is emitted when an actor is being unrealized.</para>

  </refsect2>

</refsect1>

  </refsect1>
</refentry>
