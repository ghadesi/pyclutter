%%
ignore
  clutter_actor_set_rotationx
  clutter_actor_get_rotationx
  clutter_actor_set_scalex
  clutter_actor_get_scalex
  clutter_actor_set_scale_with_gravityx
%%
override clutter_actor_get_geometry noargs
static PyObject *
_wrap_clutter_actor_get_geometry (PyGObject *self)
{
        ClutterGeometry geom = { 0, };

        clutter_actor_get_geometry (CLUTTER_ACTOR (self->obj), &geom);

        return Py_BuildValue ("(iiii)",
                              geom.x, geom.y, geom.width, geom.height);
}
%%
override clutter_actor_set_geometry kwargs
static PyObject *
_wrap_clutter_actor_set_geometry (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
        static char *kwlist[] = { "geometry", NULL };
        PyObject *py_geom;
        ClutterGeometry geom;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterActor.set_geometry", kwlist,
                                          &py_geom)) {
                return NULL;
        }

        if (!pyclutter_geometry_from_pyobject (py_geom, &geom)) {
                PyErr_Clear ();
                PyErr_SetString (PyExc_TypeError,
                                 "color must be a ClutterGeometry or 4-tuple");
                return NULL;
        }

        clutter_actor_set_geometry (CLUTTER_ACTOR (self->obj), &geom);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_actor_get_coords noargs
static PyObject *
_wrap_clutter_actor_get_coords (PyGObject *self)
{
	gint x1, y1;
	gint x2, y2;

	clutter_actor_get_coords (CLUTTER_ACTOR (self->obj),
				  &x1, &y1,
				  &x2, &y2);
	return Py_BuildValue("(iiii)", x1, y1, x2, y2);
}
%%
override clutter_actor_get_abs_position noargs
static PyObject *
_wrap_clutter_actor_get_abs_position (PyGObject *self)
{
	gint pos_x, pos_y;

	clutter_actor_get_abs_position (CLUTTER_ACTOR (self->obj),
					&pos_x,
					&pos_y);
	return Py_BuildValue("(ii)", pos_x, pos_y);
}
%%
override clutter_actor_get_abs_size noargs
static PyObject *
_wrap_clutter_actor_get_abs_size (PyGObject *self)
{
        guint width, height;

        clutter_actor_get_abs_size (CLUTTER_ACTOR (self->obj),
                                    &width,
                                    &height);
        return Py_BuildValue ("(ii)", width, height);
}
%%
override clutter_actor_get_size noargs
static PyObject *
_wrap_clutter_actor_get_size (PyGObject *self)
{
        guint width, height;

        clutter_actor_get_size (CLUTTER_ACTOR (self->obj),
                                &width,
                                &height);
        return Py_BuildValue ("(ii)", width, height);
}
%%
override clutter_actor_get_scale noargs
static PyObject *
_wrap_clutter_actor_get_scale (PyGObject *self)
{
        gdouble scale_x, scale_y;

        clutter_actor_get_scale (CLUTTER_ACTOR (self->obj),
                                 &scale_x,
                                 &scale_y);
        return Py_BuildValue ("(ff)", scale_x, scale_y);
}
%%
override clutter_actor_get_vertices noargs
static PyObject *
_wrap_clutter_actor_get_vertices (PyGObject *self)
{
        ClutterVertex vertices[4];
        PyObject *pyvertices;
        int i;

        clutter_actor_get_vertices (CLUTTER_ACTOR (self->obj), vertices);

        pyvertices = PyTuple_New (4);
        for (i = 0; i < 4; i++) {
                PyObject *pyvertex;

                pyvertex = pyg_boxed_new (CLUTTER_TYPE_VERTEX, &vertices[i],
                                          TRUE, TRUE);
                PyTuple_SetItem (pyvertices, i, pyvertex);
        }

        return pyvertices;
}
%%
override clutter_actor_set_rotation kwargs
static PyObject *
_wrap_clutter_actor_set_rotation (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
        static char *kwlist[] = { "axis", "angle", "x", "y", "z", NULL };
        int axis;
        double angle;
        int x, y, y;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "idiii:ClutterActor.set_rotation",
                                          kwlist,
                                          &axis,
                                          &angle,
                                          &x, &y, &z)) {
                return NULL;
        }

        clutter_actor_set_rotation (CLUTTER_ACTOR (self->obj), axis,
                                    angle,
                                    x, y, z);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_actor_get_rotation kwargs
static PyObject *
_wrap_clutter_actor_get_rotation (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
        static char *kwlist[] = { "axis", NULL };
        int axis;
        gint center_x, center_y, center_z;
        gdouble angle;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "i:ClutterActor.get_rotation", kwlist,
                                          &axis)) {
                return NULL;
        }

        angle = clutter_actor_get_rotation (CLUTTER_ACTOR (self->obj), axis,
                                            &center_x,
                                            &center_y,
                                            &center_z);

        return Py_BuildValue ("(diii)",
                              angle,
                              center_x, center_y, center_z);
}
%%
override clutter_actor_query_coords noargs
static PyObject *
_wrap_clutter_actor_query_coords (PyGObject *self)
{
        ClutterActorBox box;

        clutter_actor_query_coords (CLUTTER_ACTOR (self), &box);

        return Py_BuildValue ("(iiii)", box.x1, box.y1, box.x2, box.y2);
}
%%
override ClutterActor__proxy_do_query_coords
static void
_wrap_ClutterActor__proxy_do_query_coords (ClutterActor    *actor,
                                           ClutterActorBox *box)
{
        PyGILState_STATE state;
        PyObject *self, *py_ret;
        gint32 x1, y1, x2, y2;

        state = pyg_gil_state_ensure ();
        self = pygobject_new ((GObject *) actor);

        py_ret = PyObject_CallMethod (self, "do_query_coords", NULL);
        if (!py_ret) {
                PyErr_Print ();
                Py_DECREF (self);
                pyg_gil_state_release (state);
                
                memset (box, 0, sizeof (ClutterActorBox));
                
                return;
        }

        Py_DECREF (self);

        if (!PyArg_ParseTuple (py_ret, "iiii", &x1, &y1, &x2, &y2)) {
                PyErr_Print ();
                Py_DECREF (py_ret);
                pyg_gil_state_release (state);
                
                memset (box, 0, sizeof (ClutterActorBox));
                
                return;
        }

        Py_DECREF (py_ret);

        pyg_gil_state_release (state);

        if (box) {
                box->x1 = CLUTTER_UNITS_FROM_INT (x1);
                box->y1 = CLUTTER_UNITS_FROM_INT (y1);
                box->x2 = CLUTTER_UNITS_FROM_INT (x2);
                box->y2 = CLUTTER_UNITS_FROM_INT (y2);
        }
        else {
                memset (box, 0, sizeof (ClutterActorBox));
        }
}
%%
override ClutterActor__do_query_coords kwargs
static PyObject *
_wrap_ClutterActor__do_query_coords (PyObject *cls,
                                     PyObject *args,
                                     PyObject *kwargs)
{
        ClutterActorClass *klass;
        static char *kwlist[] = { "self", NULL };
        PyGObject *self;
        ClutterActorBox box;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O!:ClutterActor.query_coords",
                                          kwlist,
                                          &PyClutterActor_Type, &self))
                return NULL;

        klass = g_type_class_ref (pyg_type_from_object (cls));
        if (CLUTTER_ACTOR_CLASS (klass)->query_coords) {
                ClutterActor *actor = CLUTTER_ACTOR (self->obj);

                CLUTTER_ACTOR_CLASS (klass)->query_coords (actor, &box);
        }
        else {
                PyErr_SetString (PyExc_NotImplementedError,
                                 "virtual method ClutterActor.query_coords "
                                 "not implemented");
                g_type_class_unref (klass);
                return NULL;
        }

        g_type_class_unref (klass);

        return Py_BuildValue ("(iiii)", box.x1, box.y1, box.x2, box.y2);
}
%%
