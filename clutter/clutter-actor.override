%%
ignore
  clutter_actor_get_allocation_vertices
  clutter_actor_get_abs_allocation_vertices
%%
override clutter_actor_get_geometry noargs
static PyObject *
_wrap_clutter_actor_get_geometry (PyGObject *self)
{
        ClutterGeometry geom = { 0, };

        clutter_actor_get_geometry (CLUTTER_ACTOR (self->obj), &geom);

        return Py_BuildValue ("(iiii)",
                              geom.x, geom.y, geom.width, geom.height);
}
%%
override clutter_actor_set_geometry kwargs
static PyObject *
_wrap_clutter_actor_set_geometry (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
        static char *kwlist[] = { "geometry", NULL };
        PyObject *py_geom;
        ClutterGeometry geom;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterActor.set_geometry", kwlist,
                                          &py_geom)) {
                return NULL;
        }

        if (!pyclutter_geometry_from_pyobject (py_geom, &geom)) {
                PyErr_Clear ();
                PyErr_SetString (PyExc_TypeError,
                                 "color must be a ClutterGeometry or 4-tuple");
                return NULL;
        }

        clutter_actor_set_geometry (CLUTTER_ACTOR (self->obj), &geom);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_actor_get_transformed_position noargs
static PyObject *
_wrap_clutter_actor_get_transformed_position (PyGObject *self)
{
	gfloat pos_x, pos_y;

	clutter_actor_get_transformed_position (CLUTTER_ACTOR (self->obj),
                                                &pos_x,
                                                &pos_y);
	return Py_BuildValue("(dd)", pos_x, pos_y);
}
%%
override clutter_actor_get_transformed_size noargs
static PyObject *
_wrap_clutter_actor_get_transformed_size (PyGObject *self)
{
        gfloat width, height;

        clutter_actor_get_transformed_size (CLUTTER_ACTOR (self->obj),
                                            &width,
                                            &height);
        return Py_BuildValue ("(dd)", width, height);
}
%%
override clutter_actor_transform_stage_point kwargs
static PyObject *
_wrap_clutter_actor_transform_stage_point (PyGObject *self,
                                           PyObject  *args,
                                           PyObject  *kwargs)
{
        static char *kwlist[] = { "x", "y", NULL };
        gfloat x_out, y_out;
        gboolean res;
        double x, y;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "dd:ClutterActor.transform_stage_point", kwlist,
                                          &x, &y)) {
                return NULL;
        }

        x_out = y_out = 0;
        res = clutter_actor_transform_stage_point (CLUTTER_ACTOR (self->obj),
                                                   x, y, &x_out, &y_out);

        if (res)
                return Py_BuildValue ("(dd)", x_out, y_out);
        else {
                PyErr_SetString (PyClutterException, "Transformation failed");
                return NULL;
        }
}
%%
override clutter_actor_get_size noargs
static PyObject *
_wrap_clutter_actor_get_size (PyGObject *self)
{
        gfloat width, height;

        clutter_actor_get_size (CLUTTER_ACTOR (self->obj),
                                &width,
                                &height);
        return Py_BuildValue ("(dd)", width, height);
}
%%
override clutter_actor_get_position noargs
static PyObject *
_wrap_clutter_actor_get_position (PyGObject *self)
{
        gfloat x, y;

        clutter_actor_get_position (CLUTTER_ACTOR (self->obj), &x, &y);

        return Py_BuildValue ("(dd)", x, y);
}
%%
override clutter_actor_get_scale noargs
static PyObject *
_wrap_clutter_actor_get_scale (PyGObject *self)
{
        double scale_x, scale_y;

        clutter_actor_get_scale (CLUTTER_ACTOR (self->obj),
                                 &scale_x,
                                 &scale_y);
        return Py_BuildValue ("(dd)", scale_x, scale_y);
}
%%
override clutter_actor_get_scale_center noargs
static PyObject *
_wrap_clutter_actor_get_scale_center (PyGObject *self)
{
    gfloat center_x, center_y;

    clutter_actor_get_scale_center (CLUTTER_ACTOR (self->obj),
                                    &center_x,
                                    &center_y);
    return Py_BuildValue ("(dd)", center_x, center_y);
}
%%
override clutter_actor_set_rotation kwargs
static PyObject *
_wrap_clutter_actor_set_rotation (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
        static char *kwlist[] = { "axis", "angle", "x", "y", "z", NULL };
        int axis;
        double angle;
        gfloat x, y, z;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "idfff:ClutterActor.set_rotation",
                                          kwlist,
                                          &axis,
                                          &angle,
                                          &x, &y, &z)) {
                return NULL;
        }

        clutter_actor_set_rotation (CLUTTER_ACTOR (self->obj), axis,
                                    angle,
                                    x, y, z);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_actor_get_rotation kwargs
static PyObject *
_wrap_clutter_actor_get_rotation (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
        static char *kwlist[] = { "axis", NULL };
        int axis;
        gfloat center_x, center_y, center_z;
        gdouble angle;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "i:ClutterActor.get_rotation", kwlist,
                                          &axis)) {
                return NULL;
        }

        angle = clutter_actor_get_rotation (CLUTTER_ACTOR (self->obj), axis,
                                            &center_x,
                                            &center_y,
                                            &center_z);

        return Py_BuildValue ("(dddd)",
                              angle,
                              center_x, center_y, center_z);
}
%%
override clutter_actor_get_clip noargs
static PyObject *
_wrap_clutter_actor_get_clip (PyGObject *self)
{
        gfloat xoff, yoff, width, height;
        xoff = yoff = width = height = 0;

	clutter_actor_get_clip (CLUTTER_ACTOR (self->obj),
                                &xoff, &yoff,
                                &width, &height);
	return Py_BuildValue("(dddd)", xoff, yoff, width, height);
}
%%
override clutter_actor_get_allocation_box noargs
static PyObject *
_wrap_clutter_actor_get_allocation_box (PyGObject *self)
{
        ClutterActorBox box = { 0, };

        clutter_actor_get_allocation_box (CLUTTER_ACTOR (self->obj), &box);

        return Py_BuildValue ("(dddd)", box.x1, box.y1, box.x2, box.y2);
}
%%
override clutter_actor_get_allocation_geometry noargs
static PyObject *
_wrap_clutter_actor_get_allocation_geometry (PyGObject *self)
{
        ClutterGeometry geom = { 0, };

        clutter_actor_get_allocation_geometry (CLUTTER_ACTOR (self->obj), &geom);

        return Py_BuildValue ("(iiii)", geom.x, geom.y, geom.width, geom.height);
}
%%
override clutter_actor_get_preferred_size noargs
static PyObject *
_wrap_clutter_actor_get_preferred_size (PyGObject *self)
{
        gfloat min_width, natural_width;
        gfloat min_height, natural_height;

        min_width = natural_width = 0;
        min_height = natural_height = 0;
        clutter_actor_get_preferred_size (CLUTTER_ACTOR (self->obj),
                                          &min_width, &min_height,
                                          &natural_width, &natural_height);

        return Py_BuildValue ("(dddd)", min_width, min_height,
                              natural_width, natural_height);
}
%%
override clutter_actor_get_preferred_width kwargs
static PyObject *
_wrap_clutter_actor_get_preferred_width (PyGObject *self,
                                         PyObject  *args,
                                         PyObject  *kwargs)
{
        static char *kwlist[] = { "for_height", NULL };
        double for_height = 0;
        gfloat min_width, natural_width;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "d:ClutterActor.get_preferred_width", kwlist,
                                          &for_height)) {
                return NULL;
        }

        min_width = natural_width = 0;
        clutter_actor_get_preferred_width (CLUTTER_ACTOR (self->obj), for_height,
                                           &min_width,
                                           &natural_width);

        return Py_BuildValue ("(dd)", min_width, natural_width);
}
%%
override ClutterActor__proxy_do_get_preferred_width
static void
_wrap_ClutterActor__proxy_do_get_preferred_width (ClutterActor *self,
                                                  gfloat        for_height,
                                                  gfloat       *min_width_p,
                                                  gfloat       *natural_width_p)
{
        PyGILState_STATE state;
        PyObject *py_self, *py_height, *py_args, *py_method, *py_ret;
        double min_width, natural_width;

        state = pyg_gil_state_ensure ();

        py_self = pygobject_new ((GObject *) self);
        if (!py_self) {
                if (PyErr_Occurred ())
                        PyErr_Print();

                pyg_gil_state_release (state);

                return;
        }

        py_height = PyFloat_FromDouble (for_height);

        py_args = PyTuple_New (1);
        PyTuple_SET_ITEM (py_args, 0, py_height);

        py_method = PyObject_GetAttrString (py_self, "do_get_preferred_width");
        if (!py_method) {
                if (PyErr_Occurred ())
                        PyErr_Print ();

                Py_DECREF (py_args);
                Py_DECREF (py_self);

                pyg_gil_state_release (state);

                return;
        }

        py_ret = PyObject_CallObject (py_method, py_args);
        if (!py_ret) {
                PyErr_Print ();

                Py_XDECREF (py_ret);
                Py_DECREF (py_method);
                Py_DECREF (py_args);
                Py_DECREF (py_self);
                
                pyg_gil_state_release (state);
                
                return;
        }

        if (!PyArg_ParseTuple (py_ret, "dd", &min_width, &natural_width)) {
                PyErr_Print ();

                if (min_width_p)
                  *min_width_p = 0;

                if (natural_width_p)
                  *natural_width_p = 0;
        }
        else {
                if (min_width_p)
                  *min_width_p = min_width;

                if (natural_width_p)
                  *natural_width_p = natural_width;
        }

        Py_DECREF (py_self);
        Py_DECREF (py_args);
        Py_DECREF (py_method);
        Py_DECREF (py_ret);

        pyg_gil_state_release (state);
}
%%
override ClutterActor__do_get_preferred_width kwargs
static PyObject *
_wrap_ClutterActor__do_get_preferred_width (PyObject *cls,
                                            PyObject *args,
                                            PyObject *kwargs)
{
        ClutterActorClass *klass;
        static char *kwlist[] = { "self", "for_height", NULL };
        PyGObject *self;
        double for_height = 0;
        gfloat min_width = 0, natural_width = 0;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O!d:ClutterActor.do_get_preferred_width",
                                          kwlist,
                                          &PyClutterActor_Type, &self,
                                          &for_height))
                return NULL;

        klass = g_type_class_ref (pyg_type_from_object (cls));
        if (CLUTTER_ACTOR_CLASS (klass)->get_preferred_width) {
                ClutterActor *actor = CLUTTER_ACTOR (self->obj);

                CLUTTER_ACTOR_CLASS (klass)->get_preferred_width (actor,
                                                                  for_height,
                                                                  &min_width,
                                                                  &natural_width);
        }
        else {
                PyErr_SetString (PyExc_NotImplementedError,
                                 "virtual method ClutterActor.get_preferred_width "
                                 "not implemented");
                g_type_class_unref (klass);
                return NULL;
        }

        g_type_class_unref (klass);

        return Py_BuildValue ("(dd)", min_width, natural_width);
}
%%
override clutter_actor_get_preferred_height kwargs
static PyObject *
_wrap_clutter_actor_get_preferred_height (PyGObject *self,
                                          PyObject  *args,
                                          PyObject  *kwargs)
{
        static char *kwlist[] = { "for_width", NULL };
        double for_width = 0;
        gfloat min_height, natural_height;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "d:ClutterActor.get_preferred_height", kwlist,
                                          &for_width)) {
                return NULL;
        }

        min_height = natural_height = 0;
        clutter_actor_get_preferred_height (CLUTTER_ACTOR (self->obj),
                                            for_width,
                                            &min_height,
                                            &natural_height);

        return Py_BuildValue ("(dd)", min_height, natural_height);
}
%%
override ClutterActor__proxy_do_get_preferred_height
static void
_wrap_ClutterActor__proxy_do_get_preferred_height (ClutterActor *self,
                                                   gfloat        for_width,
                                                   gfloat       *min_height_p,
                                                   gfloat       *natural_height_p)
{
        PyGILState_STATE state;
        PyObject *py_self, *py_width, *py_args, *py_method, *py_ret;
        double min_height, natural_height;

        state = pyg_gil_state_ensure ();

        py_self = pygobject_new ((GObject *) self);
        if (!py_self) {
                if (PyErr_Occurred ())
                        PyErr_Print();

                pyg_gil_state_release (state);

                return;
        }

        py_width = PyFloat_FromDouble (for_width);

        py_args = PyTuple_New (1);
        PyTuple_SET_ITEM (py_args, 0, py_width);

        py_method = PyObject_GetAttrString (py_self, "do_get_preferred_height");
        if (!py_method) {
                if (PyErr_Occurred ())
                        PyErr_Print ();

                Py_DECREF (py_args);
                Py_DECREF (py_self);

                pyg_gil_state_release (state);

                return;
        }

        py_ret = PyObject_CallObject (py_method, py_args);
        if (!py_ret) {
                PyErr_Print ();

                Py_XDECREF (py_ret);
                Py_DECREF (py_method);
                Py_DECREF (py_args);
                Py_DECREF (py_self);
                
                pyg_gil_state_release (state);
                
                return;
        }

        if (!PyArg_ParseTuple (py_ret, "dd", &min_height, &natural_height)) {
                PyErr_Print ();

                if (min_height_p)
                  *min_height_p = 0;

                if (natural_height_p)
                  *natural_height_p = 0;
        }
        else {
                if (min_height_p)
                  *min_height_p = min_height;

                if (natural_height_p)
                  *natural_height_p = natural_height;
        }

        Py_DECREF (py_self);
        Py_DECREF (py_args);
        Py_DECREF (py_method);
        Py_DECREF (py_ret);

        pyg_gil_state_release (state);
}
%%
override ClutterActor__do_get_preferred_height kwargs
static PyObject *
_wrap_ClutterActor__do_get_preferred_height (PyObject *cls,
                                             PyObject *args,
                                             PyObject *kwargs)
{
        ClutterActorClass *klass;
        static char *kwlist[] = { "self", "for_width", NULL };
        PyGObject *self;
        double for_width = 0;
        gfloat min_height = 0, natural_height = 0;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O!d:ClutterActor.do_get_preferred_height",
                                          kwlist,
                                          &PyClutterActor_Type, &self,
                                          &for_width))
                return NULL;

        klass = g_type_class_ref (pyg_type_from_object (cls));
        if (CLUTTER_ACTOR_CLASS (klass)->get_preferred_height) {
                ClutterActor *actor = CLUTTER_ACTOR (self->obj);

                CLUTTER_ACTOR_CLASS (klass)->get_preferred_height (actor,
                                                                   for_width,
                                                                   &min_height,
                                                                   &natural_height);
        }
        else {
                PyErr_SetString (PyExc_NotImplementedError,
                                 "virtual method ClutterActor.get_preferred_height "
                                 "not implemented");
                g_type_class_unref (klass);
                return NULL;
        }

        g_type_class_unref (klass);

        return Py_BuildValue ("(dd)", min_height, natural_height);
}
%%
override clutter_actor_get_anchor_point noargs
static PyObject *
_wrap_clutter_actor_get_anchor_point (PyGObject *self)
{
  gfloat anchor_x, anchor_y;

  anchor_x = anchor_y = 0;
  clutter_actor_get_anchor_point (CLUTTER_ACTOR (self->obj),
                                  &anchor_x, &anchor_y);

  return Py_BuildValue ("(dd)", anchor_x, anchor_y);
}
%%
override clutter_actor_raise kwargs
static PyObject *
_wrap_clutter_actor_raise (PyGObject *self,
                           PyObject  *args,
                           PyObject  *kwargs)
{
    static char *kwlist[] = { "above", NULL };
    PyObject *py_above = NULL;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "|O:ClutterActor.raise", kwlist, &py_above))
        return NULL;

    if (py_above == NULL || py_above == Py_None)
        clutter_actor_raise (CLUTTER_ACTOR (self->obj), NULL);
    else if (py_above && pygobject_check (py_above, &PyClutterActor_Type)) {
        ClutterActor *actor;

        actor = CLUTTER_ACTOR (pygobject_get (py_above));
        clutter_actor_raise (CLUTTER_ACTOR (self->obj), actor);
    }
    else {
        PyErr_SetString (PyExc_TypeError, "argument must be either an actor or None");
        return NULL;
    }

    Py_INCREF (Py_None);
    return Py_None;
}
%%
override clutter_actor_lower kwargs
static PyObject *
_wrap_clutter_actor_lower (PyGObject *self,
                           PyObject  *args,
                           PyObject  *kwargs)
{
    static char *kwlist[] = { "below", NULL };
    PyObject *py_below = NULL;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs, "|O:ClutterActor.lower", kwlist, &py_below))
        return NULL;

    if (py_below == NULL || py_below == Py_None)
        clutter_actor_lower (CLUTTER_ACTOR (self->obj), NULL);
    else if (py_below && pygobject_check (py_below, &PyClutterActor_Type)) {
        ClutterActor *actor;

        actor = CLUTTER_ACTOR (pygobject_get (py_below));
        clutter_actor_raise (CLUTTER_ACTOR (self->obj), actor);
    }
    else {
        PyErr_SetString (PyExc_TypeError, "argument must be either an actor or None");
        return NULL;
    }

    Py_INCREF (Py_None);
    return Py_None;
}
%%
override clutter_actor_apply_transform_to_point kwargs
static PyObject *
_wrap_clutter_actor_apply_transform_to_point (PyGObject *self,
                                              PyObject  *args,
                                              PyObject  *kwargs)
{
    static char *kwlist[] = { "point", NULL };
    PyObject *py_point;
    ClutterVertex *point = NULL;
    ClutterVertex retval = { 0, };

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,"O:ClutterActor.apply_transform_to_point", kwlist, &py_point))
        return NULL;

    if (pyg_boxed_check (py_point, CLUTTER_TYPE_VERTEX))
        point = pyg_boxed_get (py_point, ClutterVertex);
    else {
        PyErr_SetString (PyExc_TypeError, "point should be a clutter.Vertex");
        return NULL;
    }

    clutter_actor_apply_transform_to_point (CLUTTER_ACTOR (self->obj), point, &retval);

    return pyg_boxed_new (CLUTTER_TYPE_VERTEX, &retval, TRUE, TRUE);
}
%%
override clutter_actor_apply_relative_transform_to_point kwargs
static PyObject *
_wrap_clutter_actor_apply_relative_transform_to_point (PyGObject *self,
                                                       PyObject  *args,
                                                       PyObject  *kwargs)
{
    static char *kwlist[] = { "ancestor", "point", NULL };
    PyObject *py_ancestor = NULL;
    PyObject *py_point;
    ClutterActor *ancestor = NULL;
    ClutterVertex *point = NULL;
    ClutterVertex retval = { 0, };

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,"OO:ClutterActor.apply_transform_to_point", kwlist, &py_ancestor, &py_point))
        return NULL;

    if (py_ancestor == NULL || py_ancestor == Py_None)
        ancestor = NULL;
    else if (py_ancestor && pygobject_check (py_ancestor, &PyClutterActor_Type))
        ancestor = CLUTTER_ACTOR (pygobject_get (py_ancestor));
    else {
        PyErr_SetString (PyExc_TypeError, "ancestor should be a clutter.Actor or None");
        return NULL;
    }

    if (pyg_boxed_check (py_point, CLUTTER_TYPE_VERTEX))
        point = pyg_boxed_get (py_point, ClutterVertex);
    else {
        PyErr_SetString (PyExc_TypeError, "point should be a clutter.Vertex");
        return NULL;
    }

    clutter_actor_apply_relative_transform_to_point (CLUTTER_ACTOR (self->obj),
                                                     ancestor,
                                                     point, &retval);

    return pyg_boxed_new (CLUTTER_TYPE_VERTEX, &retval, TRUE, TRUE);
}
%%
override clutter_actor_get_transformation_matrix noargs
static PyObject *
_wrap_clutter_actor_get_transformation_matrix (PyGObject *self)
{
  CoglMatrix matrix;
  PyObject *py_matrix;
  PyTypeObject *type;

  cogl_matrix_init_identity (&matrix);
  clutter_actor_get_transformation_matrix (CLUTTER_ACTOR (self->obj), &matrix);

  type = &PyCoglMatrix_Type;
  py_matrix = type->tp_alloc (type, 0);
  ((PyCoglMatrix *)py_matrix)->matrix = matrix;

  return py_matrix;
}
%%
override ClutterActor__do_apply_transform kwargs
static PyObject *
_wrap_ClutterActor__do_apply_transform (PyObject *cls,
                                        PyObject *args,
                                        PyObject *kwargs)
{
    gpointer klass;
    static char *kwlist[] = { "self", "matrix", NULL };
    PyGObject *self;
    PyCoglMatrix *matrix;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O!O!:ClutterActor.apply_transform",
                                     kwlist, 
                                     &PyClutterActor_Type, &self,
                                     &PyCoglMatrix_Type, &matrix))
        return NULL;

    klass = g_type_class_ref(pyg_type_from_object(cls));

    if (CLUTTER_ACTOR_CLASS(klass)->apply_transform)
        CLUTTER_ACTOR_CLASS(klass)->apply_transform(CLUTTER_ACTOR(self->obj),
                                                    &matrix->matrix);
    else {
        PyErr_SetString(PyExc_NotImplementedError, "virtual method ClutterActor.apply_transform not implemented");
        g_type_class_unref(klass);
        return NULL;
    }

    g_type_class_unref(klass);
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override ClutterActor__proxy_do_apply_transform 
static void
_wrap_ClutterActor__proxy_do_apply_transform (ClutterActor *self,
                                              CoglMatrix   *matrix)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_matrix = NULL;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;
    PyTypeObject *type;
    
    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return;
    }
    if (matrix) {
        type = &PyCoglMatrix_Type;
        py_matrix = type->tp_alloc (type, 0);
        ((PyCoglMatrix *)py_matrix)->matrix = *matrix;
    }
    else {
        Py_INCREF(Py_None);
        py_matrix = Py_None;
    }
    
    py_args = PyTuple_New(1);
    PyTuple_SET_ITEM(py_args, 0, py_matrix);
    
    py_method = PyObject_GetAttrString(py_self, "do_apply_transform");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_XDECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "virtual method should return None");
        PyErr_Print();
        Py_XDECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return;
    }
    
    Py_XDECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);
}
