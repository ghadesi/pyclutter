;; -* scheme -*-

(include "clutter-base-types.defs")

;; From clutter-actor.h

(define-function actor_get_type
  (c-name "clutter_actor_get_type")
  (return-type "GType")
)

(define-method show
  (of-object "ClutterActor")
  (c-name "clutter_actor_show")
  (return-type "none")
)

(define-method show_all
  (of-object "ClutterActor")
  (c-name "clutter_actor_show_all")
  (return-type "none")
)

(define-virtual show_all
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
  )
)

(define-method hide
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide")
  (return-type "none")
)

(define-method hide_all
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide_all")
  (return-type "none")
)

(define-virtual hide_all
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
  )
)

(define-method realize
  (of-object "ClutterActor")
  (c-name "clutter_actor_realize")
  (return-type "none")
)

(define-virtual realize
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method unrealize
  (of-object "ClutterActor")
  (c-name "clutter_actor_unrealize")
  (return-type "none")
)

(define-virtual unrealize
  (of-object "ClutterActor")
  (return-type "none")
)

(define-method paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_paint")
  (return-type "none")
)

(define-virtual paint
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
  )
)

(define-method pick
  (of-object "ClutterActor")
  (c-name "clutter_actor_pick")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-virtual pick
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method queue_redraw
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_redraw")
  (return-type "none")
)

(define-method destroy
  (of-object "ClutterActor")
  (c-name "clutter_actor_destroy")
  (return-type "none")
)

(define-virtual allocate
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("gboolean" "origin_changed")
  )
)

(define-virtual get_preferred_width
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("gint32" "for_height")
    '("gint32*" "min_width")
    '("gint32*" "natural_width")
  )
)

(define-virtual get_preferred_height
  (of-object "ClutterActor")
  (return-type "none")
  (parameters
    '("gint32" "for_width")
    '("gint32*" "min_height")
    '("gint32*" "natural_height")
  )
)

(define-method set_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_geometry")
  (return-type "none")
  (parameters
    '("const-ClutterGeometry*" "geometry")
  )
)

(define-method get_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_geometry")
  (return-type "none")
  (parameters
    '("ClutterGeometry*" "geometry")
  )
)

(define-method set_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method set_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_position")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method set_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_x")
  (return-type "none")
  (parameters
    '("gint" "x")
  )
)

(define-method set_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_y")
  (return-type "none")
  (parameters
    '("gint" "y")
  )
)

(define-method get_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_width")
  (return-type "guint")
)

(define-method get_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_height")
  (return-type "guint")
)

(define-method set_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method set_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_height")
  (return-type "none")
  (parameters
    '("guint" "height")
  )
)

(define-method get_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_x")
  (return-type "gint")
)

(define-method get_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_y")
  (return-type "gint")
)

(define-method set_rotation
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_rotation")
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle")
    '("gint" "x")
    '("gint" "y")
    '("gint" "z")
  )
)

(define-method get_rotation
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_rotation")
  (return-type "gdouble")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "z")
  )
)

(define-method set_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_opacity")
  (return-type "none")
  (parameters
    '("guint8" "opacity")
  )
)

(define-method get_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_opacity")
  (return-type "guint8")
)

(define-method set_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_name")
  (return-type "const-gchar*")
)

(define-method get_gid
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_gid")
  (return-type "guint32")
)

(define-method set_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_clip")
  (return-type "none")
  (parameters
    '("gint" "x_offset")
    '("gint" "y_offset")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method remove_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_clip")
  (return-type "none")
)

(define-method has_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_clip")
  (return-type "gboolean")
)

(define-method set_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_parent")
  (return-type "none")
  (parameters
    '("ClutterActor*" "parent")
  )
)

(define-method get_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_parent")
  (return-type "ClutterActor*")
)

(define-method reparent
  (of-object "ClutterActor")
  (c-name "clutter_actor_reparent")
  (return-type "none")
  (parameters
    '("ClutterActor*" "new_parent")
  )
)

(define-method unparent
  (of-object "ClutterActor")
  (c-name "clutter_actor_unparent")
  (return-type "none")
)

(define-method raise_actor
  (of-object "ClutterActor")
  (c-name "clutter_actor_raise")
  (return-type "none")
  (parameters
    '("ClutterActor*" "below")
  )
)

(define-method lower_actor
  (of-object "ClutterActor")
  (c-name "clutter_actor_lower")
  (return-type "none")
  (parameters
    '("ClutterActor*" "above")
  )
)

(define-method raise_top
  (of-object "ClutterActor")
  (c-name "clutter_actor_raise_top")
  (return-type "none")
)

(define-method lower_bottom
  (of-object "ClutterActor")
  (c-name "clutter_actor_lower_bottom")
  (return-type "none")
)

(define-method set_depth
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_depth")
  (return-type "none")
  (parameters
    '("gint" "depth")
  )
)

(define-method get_depth
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_depth")
  (return-type "gint")
)

(define-method set_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale")
  (return-type "none")
  (parameters
    '("gdouble" "scale_x")
    '("gdouble" "scale_y")
  )
)

(define-method get_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale")
  (return-type "none")
  (parameters
    '("gdouble*" "scale_x")
    '("gdouble*" "scale_y")
  )
)

(define-method get_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method move_by
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_by")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method apply_transform_to_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_apply_transform_to_point")
  (return-type "none")
  (parameters
    '("ClutterVertex*" "point")
    '("ClutterVertex*" "vertex")
  )
)

(define-method is_scaled
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_scaled")
  (return-type "gboolean")
  (parameters
  )
)

(define-method is_rotated
  (of-object "ClutterActor")
  (c-name "clutter_actor_is_rotated")
  (return-type "gboolean")
  (parameters
  )
)

(define-method apply_relative_transform_to_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_apply_relative_transform_to_point")
  (return-type "none")
  (parameters
    '("ClutterActor*" "ancestor")
    '("ClutterVertex*" "point")
    '("ClutterVertex*" "vertex")
  )
)

(define-method get_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_clip")
  (return-type "none")
  (parameters
    '("gint*" "xoff")
    '("gint*" "yoff")
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method set_reactive
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_reactive")
  (return-type "none")
  (parameters
    '("gboolean" "reactive")
  )
)

(define-method get_reactive
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_reactive")
  (return-type "gboolean")
)

(define-method event
  (of-object "ClutterActor")
  (c-name "clutter_actor_event")
  (return-type "gboolean")
  (parameters
    '("ClutterEvent*" "event")
    '("gboolean" "capture")
  )
)

(define-function get_actor_by_gid
  (c-name "clutter_get_actor_by_gid")
  (return-type "ClutterActor*")
  (parameters
    '("guint32" "id")
  )
)

(define-method should_pick_paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_should_pick_paint")
  (return-type "gboolean")
)

(define-method set_shader
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_shader")
  (return-type "gboolean")
  (parameters
    '("ClutterShader*" "shader")
  )
)

(define-method get_shader
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_shader")
  (return-type "ClutterShader*")
)

(define-method set_shader_param
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_shader_param")
  (return-type "none")
  (parameters
    '("const-gchar*" "param")
    '("gfloat" "value")
  )
)

(define-method set_anchor_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_anchor_point")
  (return-type "none")
  (parameters
    '("gint" "anchor_x")
    '("gint" "anchor_y")
  )
)

(define-method move_anchor_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_anchor_point")
  (return-type "none")
  (parameters
    '("gint" "anchor_x")
    '("gint" "anchor_y")
  )
)

(define-method get_anchor_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_anchor_point")
  (return-type "none")
  (parameters
    '("gint*" "anchor_x")
    '("gint*" "anchor_y")
  )
)

(define-method set_anchor_point_from_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_anchor_point_from_gravity")
  (return-type "none")
  (parameters
    '("ClutterGravity" "gravity")
  )
)

(define-method move_anchor_point_from_gravity
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_anchor_point_from_gravity")
  (return-type "none")
  (parameters
    '("ClutterGravity" "gravity")
  )
)

(define-method transform_stage_point
  (of-object "ClutterActor")
  (c-name "clutter_actor_transform_stage_point")
  (return-type "gboolean")
  (parameters
    '("gint32" "x")
    '("gint32" "y")
    '("gint32*" "x_out")
    '("gint32*" "y_out")
  )
)

(define-function actor_box_get_from_vertices
  (c-name "clutter_actor_box_get_from_vertices")
  (return-type "none")
  (parameters
    '("ClutterVertex" "vtx[4]")
    '("ClutterActorBox*" "box")
  )
)

(define-method queue_relayout
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_relayout")
  (return-type "none")
)

(define-method get_preferred_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_width")
  (return-type "none")
  (parameters
    '("gint32" "for_height")
    '("gint32*" "min_width_p")
    '("gint32*" "natural_width_p")
  )
)

(define-method get_preferred_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_height")
  (return-type "none")
  (parameters
    '("gint32" "for_width")
    '("gint32*" "min_height_p")
    '("gint32*" "natural_height_p")
  )
)

(define-method get_preferred_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_preferred_size")
  (return-type "none")
  (parameters
    '("gint32*" "min_width_p")
    '("gint32*" "min_height_p")
    '("gint32*" "natural_width_p")
    '("gint32*" "natural_height_p")
  )
)

(define-method allocate
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate")
  (return-type "none")
  (parameters
    '("const-ClutterActorBox*" "box")
    '("gboolean" "absolute_origin_changed")
  )
)

(define-method allocate_preferred_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_preferred_size")
  (return-type "none")
  (parameters
    '("gboolean" "absolute_origin_changed")
  )
)

(define-method get_allocation_coords
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_coords")
  (return-type "none")
  (parameters
    '("gint*" "x_1")
    '("gint*" "y_1")
    '("gint*" "x_2")
    '("gint*" "y_2")
  )
)

(define-method get_allocation_box
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_box")
  (return-type "none")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method get_allocation_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_geometry")
  (return-type "none")
  (parameters
    '("ClutterGeometry*" "geom")
  )
)

(define-method get_allocation_vertices
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_allocation_vertices")
  (return-type "none")
  (parameters
    '("ClutterActor*" "ancestor")
    '("ClutterVertex" "verts[4]")
  )
)

(define-method set_sizeu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_sizeu")
  (return-type "none")
  (parameters
    '("gint32" "width")
    '("gint32" "height")
  )
)

(define-method get_sizeu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_sizeu")
  (return-type "none")
  (parameters
    '("gint32*" "width")
    '("gint32*" "height")
  )
)

(define-method get_transformed_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method get_transformed_sizeu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_sizeu")
  (return-type "none")
  (parameters
    '("gint32*" "width")
    '("gint32*" "height")
  )
)

(define-method set_positionu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_positionu")
  (return-type "none")
  (parameters
    '("gint32" "x")
    '("gint32" "y")
  )
)

(define-method get_positionu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_positionu")
  (return-type "none")
  (parameters
    '("gint32*" "x")
    '("gint32*" "y")
  )
)

(define-method get_transformed_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_transformed_positionu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_transformed_positionu")
  (return-type "none")
  (parameters
    '("gint32*" "x")
    '("gint32*" "y")
  )
)

(define-method get_fixed_position_set
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_fixed_position_set")
  (return-type "gboolean")
)

(define-method set_fixed_position_set
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_fixed_position_set")
  (return-type "none")
  (parameters
    '("gboolean" "is_set")
  )
)

(define-method get_widthu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_widthu")
  (return-type "gint32")
)

(define-method get_heightu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_heightu")
  (return-type "gint32")
)

(define-method set_widthu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_widthu")
  (return-type "none")
  (parameters
    '("gint32" "width")
  )
)

(define-method set_heightu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_heightu")
  (return-type "none")
  (parameters
    '("gint32" "height")
  )
)

(define-method get_xu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_xu")
  (return-type "gint32")
)

(define-method get_yu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_yu")
  (return-type "gint32")
)

(define-method set_xu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_xu")
  (return-type "none")
  (parameters
    '("gint32" "x")
  )
)

(define-method set_yu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_yu")
  (return-type "none")
  (parameters
    '("gint32" "y")
  )
)

(define-method set_rotationx
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_rotationx")
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("ClutterFixed" "angle")
    '("gint" "x")
    '("gint" "y")
    '("gint" "z")
  )
)

(define-method set_rotationu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_rotationu")
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle")
    '("gint32" "x")
    '("gint32" "y")
    '("gint32" "z")
  )
)

(define-method get_rotationx
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_rotationx")
  (return-type "ClutterFixed")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "z")
  )
)

(define-method get_rotationu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_rotationu")
  (return-type "gdouble")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gint32*" "x")
    '("gint32*" "y")
    '("gint32*" "z")
  )
)

(define-method get_paint_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_opacity")
  (return-type "guint8")
)

(define-method set_clipu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_clipu")
  (return-type "none")
  (parameters
    '("gint32" "xoff")
    '("gint32" "yoff")
    '("gint32" "width")
    '("gint32" "height")
  )
)

(define-method get_clipu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_clipu")
  (return-type "none")
  (parameters
    '("gint32*" "xoff")
    '("gint32*" "yoff")
    '("gint32*" "width")
    '("gint32*" "height")
  )
)

(define-method get_stage
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_stage")
  (return-type "ClutterActor*")
)

(define-method set_depthu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_depthu")
  (return-type "none")
  (parameters
    '("gint32" "depth")
  )
)

(define-method get_depthu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_depthu")
  (return-type "gint32")
)

(define-method move_byu
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_byu")
  (return-type "none")
  (parameters
    '("gint32" "dx")
    '("gint32" "dy")
  )
)

(define-method set_anchor_pointu
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_anchor_pointu")
  (return-type "none")
  (parameters
    '("gint32" "anchor_x")
    '("gint32" "anchor_y")
  )
)

(define-method move_anchor_pointu
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_anchor_pointu")
  (return-type "none")
  (parameters
    '("gint32" "anchor_x")
    '("gint32" "anchor_y")
  )
)

(define-method get_anchor_pointu
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_anchor_pointu")
  (return-type "none")
  (parameters
    '("gint32*" "anchor_x")
    '("gint32*" "anchor_y")
  )
)

(define-method get_abs_allocation_vertices
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_abs_allocation_vertices")
  (return-type "none")
  (parameters
    '("ClutterVertex" "verts[4]")
  )
)

(define-method get_paint_visibility
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_paint_visibility")
  (return-type "gboolean")
)



;; From clutter-alpha.h

(define-function alpha_get_type
  (c-name "clutter_alpha_get_type")
  (return-type "GType")
)

(define-function alpha_new
  (c-name "clutter_alpha_new")
  (is-constructor-of "ClutterAlpha")
  (return-type "ClutterAlpha*")
)

(define-function alpha_new_full
  (c-name "clutter_alpha_new_full")
  (return-type "ClutterAlpha*")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method get_alpha
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_alpha")
  (return-type "guint32")
)

(define-method set_func
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_func")
  (return-type "none")
  (parameters
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_closure
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_closure")
  (return-type "none")
  (parameters
    '("GClosure*" "closure")
  )
)

(define-method set_timeline
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_timeline")
  (return-type "none")
  (parameters
    '("ClutterTimeline*" "timeline")
  )
)

(define-method get_timeline
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_timeline")
  (return-type "ClutterTimeline*")
)

(define-function ramp_inc_func
  (c-name "clutter_ramp_inc_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function ramp_dec_func
  (c-name "clutter_ramp_dec_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function ramp_func
  (c-name "clutter_ramp_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function sine_func
  (c-name "clutter_sine_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function sine_inc_func
  (c-name "clutter_sine_inc_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function sine_dec_func
  (c-name "clutter_sine_dec_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function sine_half_func
  (c-name "clutter_sine_half_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function square_func
  (c-name "clutter_square_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function smoothstep_inc_func
  (c-name "clutter_smoothstep_inc_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function smoothstep_dec_func
  (c-name "clutter_smoothstep_dec_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function exp_inc_func
  (c-name "clutter_exp_inc_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function exp_dec_func
  (c-name "clutter_exp_dec_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)



;; From clutter-backend.h

(define-function backend_get_type
  (c-name "clutter_backend_get_type")
  (return-type "GType")
)

(define-function backend_get_default
  (c-name "clutter_get_default_backend")
  (return-type "ClutterBackend*")
)

(define-method set_resolution
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_resolution")
  (return-type "none")
  (parameters
    '("guint" "dpi")
  )
)

(define-method get_resolution
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_resolution")
  (return-type "gdouble")
)

(define-method set_double_click_time
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_double_click_time")
  (return-type "none")
  (parameters
    '("guint" "msec")
  )
)

(define-method get_double_click_time
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_double_click_time")
  (return-type "guint")
)

(define-method set_double_click_distance
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_double_click_distance")
  (return-type "none")
  (parameters
    '("guint" "distance")
  )
)

(define-method get_double_click_distance
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_double_click_distance")
  (return-type "guint")
)

(define-method set_font_options
  (of-object "ClutterBackend")
  (c-name "clutter_backend_set_font_options")
  (return-type "none")
  (parameters
    '("cairo_font_options_t*" "options")
  )
)

(define-method get_font_options
  (of-object "ClutterBackend")
  (c-name "clutter_backend_get_font_options")
  (return-type "cairo_font_options_t*")
)



;; From clutter-behaviour-bspline.h

(define-function behaviour_bspline_get_type
  (c-name "clutter_behaviour_bspline_get_type")
  (return-type "GType")
)

(define-function behaviour_bspline_new
  (c-name "clutter_behaviour_bspline_new")
  (is-constructor-of "ClutterBehaviourBspline")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("const-ClutterKnot*" "knots")
    '("guint" "n_knots")
  )
)

(define-method append_knot
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_append_knot")
  (return-type "none")
  (parameters
    '("const-ClutterKnot*" "knot")
  )
)

(define-method append_knots
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_append_knots")
  (return-type "none")
  (parameters
    '("const-ClutterKnot*" "first_knot")
  )
  (varargs #t)
)

(define-method truncate
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_truncate")
  (return-type "none")
  (parameters
    '("guint" "offset")
  )
)

(define-method join
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_join")
  (return-type "none")
  (parameters
    '("ClutterBehaviourBspline*" "bs2")
  )
)

(define-method split
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_split")
  (return-type "ClutterBehaviour*")
  (parameters
    '("guint" "offset")
  )
)

(define-method clear
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_clear")
  (return-type "none")
)

(define-method adjust
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_adjust")
  (return-type "none")
  (parameters
    '("guint" "offset")
    '("ClutterKnot*" "knot")
  )
)

(define-method set_origin
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_set_origin")
  (return-type "none")
  (parameters
    '("ClutterKnot*" "knot")
  )
)

(define-method get_origin
  (of-object "ClutterBehaviourBspline")
  (c-name "clutter_behaviour_bspline_get_origin")
  (return-type "none")
  (parameters
    '("ClutterKnot*" "knot")
  )
)



;; From clutter-behaviour-depth.h

(define-function behaviour_depth_get_type
  (c-name "clutter_behaviour_depth_get_type")
  (return-type "GType")
)

(define-function behaviour_depth_new
  (c-name "clutter_behaviour_depth_new")
  (is-constructor-of "ClutterBehaviourDepth")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("depth_start")
    '("depth_end")
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourDepth")
  (c-name "clutter_behaviour_depth_set_bounds")
  (return-type "none")
  (parameters
    '("gint" "depth_start")
    '("gint" "depth_end")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourDepth")
  (c-name "clutter_behaviour_depth_get_bounds")
  (return-type "none")
  (parameters
    '("gint*" "depth_start")
    '("gint*" "depth_end")
  )
)



;; From clutter-behaviour-ellipse.h

(define-function behaviour_ellipse_get_type
  (c-name "clutter_behaviour_ellipse_get_type")
  (return-type "GType")
)

(define-function behaviour_ellipse_new
  (c-name "clutter_behaviour_ellipse_new")
  (is-constructor-of "ClutterBehaviourEllipse")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gdouble" "start")
    '("gdouble" "end")
  )
)

(define-method set_center
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_center")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_center
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_center")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method set_width
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_width")
  (return-type "none")
  (parameters
    '("gint" "width")
  )
)

(define-method get_width
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_width")
  (return-type "gint")
)

(define-method set_height
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_height")
  (return-type "none")
  (parameters
    '("gint" "height")
  )
)

(define-method get_height
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_height")
  (return-type "gint")
)

(define-method set_angle_start
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_angle_start")
  (return-type "none")
  (parameters
    '("gdouble" "angle_start")
  )
)

(define-method get_angle_start
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_angle_start")
  (return-type "gdouble")
)

(define-method set_angle_end
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_angle_end")
  (return-type "none")
  (parameters
    '("gdouble" "angle_end")
  )
)

(define-method get_angle_end
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_angle_end")
  (return-type "gdouble")
)

(define-method set_angle_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_angle_tilt")
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle_tilt")
  )
)

(define-method get_angle_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_angle_tilt")
  (return-type "gdouble")
  (parameters
    '("ClutterRotateAxis" "axis")
  )
)

(define-method set_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_tilt")
  (return-type "none")
  (parameters
    '("gdouble" "angle_tilt_x")
    '("gdouble" "angle_tilt_y")
    '("gdouble" "angle_tilt_z")
  )
)

(define-method get_tilt
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_tilt")
  (return-type "none")
  (parameters
    '("gdouble*" "angle_tilt_x")
    '("gdouble*" "angle_tilt_y")
    '("gdouble*" "angle_tilt_z")
  )
)

(define-method get_direction
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_get_direction")
  (return-type "ClutterRotateDirection")
)

(define-method set_direction
  (of-object "ClutterBehaviourEllipse")
  (c-name "clutter_behaviour_ellipse_set_direction")
  (return-type "none")
  (parameters
    '("ClutterRotateDirection" "direction")
  )
)



;; From clutter-behaviour.h

(define-function behaviour_get_type
  (c-name "clutter_behaviour_get_type")
  (return-type "GType")
)

(define-method apply
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_apply")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_remove")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove_all
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_remove_all")
  (return-type "none")
)

(define-method actors_foreach
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_actors_foreach")
  (return-type "none")
  (parameters
    '("ClutterBehaviourForeachFunc" "func")
    '("gpointer" "data")
  )
)

(define-method get_n_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_n_actors")
  (return-type "gint")
)

(define-method get_nth_actor
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_nth_actor")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index_")
  )
)

(define-method get_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_actors")
  (return-type "GSList*")
)

(define-method get_alpha
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_alpha")
  (return-type "ClutterAlpha*")
)

(define-method set_alpha
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_set_alpha")
  (return-type "none")
  (parameters
    '("ClutterAlpha*" "alpha")
  )
)

(define-method is_applied
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_is_applied")
  (return-type "gboolean")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-virtual alpha_notify
  (of-object "ClutterBehaviour")
  (return-type "none")
  (parameters
    '("guint32" "alpha_value")
  )
)



;; From clutter-behaviour-opacity.h

(define-function behaviour_opacity_get_type
  (c-name "clutter_behaviour_opacity_get_type")
  (return-type "GType")
)

(define-function behaviour_opacity_new
  (c-name "clutter_behaviour_opacity_new")
  (is-constructor-of "ClutterBehaviourOpacity")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("opacity_start")
    '("opacity_end")
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourOpacity")
  (c-name "clutter_behaviour_opacity_set_bounds")
  (return-type "none")
  (parameters
    '("guint8" "opacity_start")
    '("guint8" "opacity_end")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourOpacity")
  (c-name "clutter_behaviour_opacity_get_bounds")
  (return-type "none")
  (parameters
    '("guint8*" "opacity_start")
    '("guint8*" "opacity_end")
  )
)



;; From clutter-behaviour-path.h

(define-function behaviour_path_get_type
  (c-name "clutter_behaviour_path_get_type")
  (return-type "GType")
)

(define-function behaviour_path_new
  (c-name "clutter_behaviour_path_new")
  (is-constructor-of "ClutterBehaviourPath")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("const-ClutterKnot*" "knots")
    '("guint" "n_knots")
  )
)

(define-method get_knots
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_get_knots")
  (return-type "GSList*")
)

(define-method append_knot
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_append_knot")
  (return-type "none")
  (parameters
    '("const-ClutterKnot*" "knot")
  )
)

(define-method append_knots
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_append_knots")
  (return-type "none")
  (parameters
    '("const-ClutterKnot*" "first_knot")
  )
  (varargs #t)
)

(define-method insert_knot
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_insert_knot")
  (return-type "none")
  (parameters
    '("guint" "offset")
    '("const-ClutterKnot*" "knot")
  )
)

(define-method remove_knot
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_remove_knot")
  (return-type "none")
  (parameters
    '("guint" "offset")
  )
)

(define-method clear
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_clear")
  (return-type "none")
)



;; From clutter-behaviour-rotate.h

(define-function behaviour_rotate_get_type
  (c-name "clutter_behaviour_rotate_get_type")
  (return-type "GType")
)

(define-function behaviour_rotate_new
  (c-name "clutter_behaviour_rotate_new")
  (is-constructor-of "ClutterBehaviourRotate")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (optional))
    '("axis")
    '("direction" (optional))
    '("angle_start")
    '("angle_end")
  )
)

(define-method get_center
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_center")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gint*" "z")
  )
)

(define-method set_center
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_center")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "z")
  )
)

(define-method get_axis
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_axis")
  (return-type "ClutterRotateAxis")
)

(define-method set_axis
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_axis")
  (return-type "none")
  (parameters
    '("ClutterRotateAxis" "axis")
  )
)

(define-method get_direction
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_direction")
  (return-type "ClutterRotateDirection")
)

(define-method set_direction
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_direction")
  (return-type "none")
  (parameters
    '("ClutterRotateDirection" "direction")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_get_bounds")
  (return-type "none")
  (parameters
    '("gdouble*" "angle_start")
    '("gdouble*" "angle_end")
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourRotate")
  (c-name "clutter_behaviour_rotate_set_bounds")
  (return-type "none")
  (parameters
    '("gdouble" "angle_start")
    '("gdouble" "angle_end")
  )
)



;; From clutter-behaviour-scale.h

(define-function behaviour_scale_get_type
  (c-name "clutter_behaviour_scale_get_type")
  (return-type "GType")
)

(define-function behaviour_scale_new
  (c-name "clutter_behaviour_scale_new")
  (is-constructor-of "ClutterBehaviourScale")
  (return-type "ClutterBehaviour*")
  (properties
    '("x_scale_start")
    '("y_scale_start")
    '("x_scale_end")
    '("y_scale_end")
    '("alpha" (optional))
  )
)

(define-method set_bounds
  (of-object "ClutterBehaviourScale")
  (c-name "clutter_behaviour_scale_set_bounds")
  (return-type "none")
  (parameters
    '("gdouble" "x_scale_begin")
    '("gdouble" "y_scale_begin")
    '("gdouble" "x_scale_end")
    '("gdouble" "y_scale_end")
  )
)

(define-method get_bounds
  (of-object "ClutterBehaviourScale")
  (c-name "clutter_behaviour_scale_get_bounds")
  (return-type "none")
  (parameters
    '("gdouble*" "x_scale_begin")
    '("gdouble*" "y_scale_begin")
    '("gdouble*" "x_scale_end")
    '("gdouble*" "y_scale_end")
  )
)



;; From clutter-child-meta.h

(define-function child_meta_get_type
  (c-name "clutter_child_meta_get_type")
  (return-type "GType")
)

(define-method get_container
  (of-object "ClutterChildMeta")
  (c-name "clutter_child_meta_get_container")
  (return-type "ClutterContainer*")
)

(define-method get_actor
  (of-object "ClutterChildMeta")
  (c-name "clutter_child_meta_get_actor")
  (return-type "ClutterActor*")
)



;; From clutter-clone-texture.h

(define-function clone_texture_get_type
  (c-name "clutter_clone_texture_get_type")
  (return-type "GType")
)

(define-function clone_texture_new
  (c-name "clutter_clone_texture_new")
  (is-constructor-of "ClutterCloneTexture")
  (return-type "ClutterActor*")
  (properties
    '("parent-texture" (argname "texture"))
  )
)

(define-method get_parent_texture
  (of-object "ClutterCloneTexture")
  (c-name "clutter_clone_texture_get_parent_texture")
  (return-type "ClutterTexture*")
)

(define-method set_parent_texture
  (of-object "ClutterCloneTexture")
  (c-name "clutter_clone_texture_set_parent_texture")
  (return-type "none")
  (parameters
    '("ClutterTexture*" "texture")
  )
)



;; From clutter-color.h

(define-function color_new
  (c-name "clutter_color_new")
  (is-constructor-of "ClutterColor")
  (return-type "ClutterColor*")
)

(define-method copy
  (of-object "ClutterColor")
  (c-name "clutter_color_copy")
  (return-type "ClutterColor*")
)

(define-method free
  (of-object "ClutterColor")
  (c-name "clutter_color_free")
  (return-type "none")
)

(define-function color_parse
  (c-name "clutter_color_parse")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "color")
    '("ClutterColor*" "dest")
  )
)

(define-method equal
  (of-object "ClutterColor")
  (c-name "clutter_color_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterColor*" "b")
  )
)

(define-method to_string
  (of-object "ClutterColor")
  (c-name "clutter_color_to_string")
  (return-type "gchar*")
)

(define-function color_get_type
  (c-name "clutter_color_get_type")
  (return-type "GType")
)

(define-method add
  (of-object "ClutterColor")
  (c-name "clutter_color_add")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "src2")
    '("ClutterColor*" "dest")
  )
)

(define-method subtract
  (of-object "ClutterColor")
  (c-name "clutter_color_subtract")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "src2")
    '("ClutterColor*" "dest")
  )
)

(define-method lighten
  (of-object "ClutterColor")
  (c-name "clutter_color_lighten")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
  )
)

(define-method darken
  (of-object "ClutterColor")
  (c-name "clutter_color_darken")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
  )
)

(define-method shade
  (of-object "ClutterColor")
  (c-name "clutter_color_shade")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
    '("gdouble" "shade")
  )
)

(define-method to_hls
  (of-object "ClutterColor")
  (c-name "clutter_color_to_hls")
  (return-type "none")
  (parameters
    '("guint8*" "hue")
    '("guint8*" "luminance")
    '("guint8*" "saturation")
  )
)

(define-method from_hls
  (of-object "ClutterColor")
  (c-name "clutter_color_from_hls")
  (return-type "none")
  (parameters
    '("guint8" "hue")
    '("guint8" "luminance")
    '("guint8" "saturation")
  )
)

(define-method to_pixel
  (of-object "ClutterColor")
  (c-name "clutter_color_to_pixel")
  (return-type "guint32")
)

(define-method from_pixel
  (of-object "ClutterColor")
  (c-name "clutter_color_from_pixel")
  (return-type "none")
  (parameters
    '("guint32" "pixel")
  )
)



;; From clutter-container.h

(define-function container_get_type
  (c-name "clutter_container_get_type")
  (return-type "GType")
)

(define-method add
  (of-object "ClutterContainer")
  (c-name "clutter_container_add")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
  )
  (varargs #t)
)

(define-method add_actor
  (of-object "ClutterContainer")
  (c-name "clutter_container_add_actor")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method add_valist
  (of-object "ClutterContainer")
  (c-name "clutter_container_add_valist")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
    '("va_list" "var_args")
  )
)

(define-virtual add
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove
  (of-object "ClutterContainer")
  (c-name "clutter_container_remove")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
  )
  (varargs #t)
)

(define-method remove_actor
  (of-object "ClutterContainer")
  (c-name "clutter_container_remove_actor")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove_valist
  (of-object "ClutterContainer")
  (c-name "clutter_container_remove_valist")
  (return-type "none")
  (parameters
    '("ClutterActor*" "first_actor")
    '("va_list" "var_args")
  )
)

(define-virtual remove
  (of-object "ClutterContainer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_children
  (of-object "ClutterContainer")
  (c-name "clutter_container_get_children")
  (return-type "GList*")
)

(define-method foreach
  (of-object "ClutterContainer")
  (c-name "clutter_container_foreach")
  (return-type "none")
  (parameters
    '("ClutterCallback" "callback")
    '("gpointer" "user_data")
  )
)

(define-method find_child_by_name
  (of-object "ClutterContainer")
  (c-name "clutter_container_find_child_by_name")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "child_name")
  )
)

(define-method raise_child
  (of-object "ClutterContainer")
  (c-name "clutter_container_raise_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling" (null-ok) (default NULL))
  )
)

(define-method lower_child
  (of-object "ClutterContainer")
  (c-name "clutter_container_lower_child")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling" (null-ok) (default NULL))
  )
)

(define-method sort_depth_order
  (of-object "ClutterContainer")
  (c-name "clutter_container_sort_depth_order")
  (return-type "none")
)

(define-function container_class_find_child_property
  (c-name "clutter_container_class_find_child_property")
  (return-type "GParamSpec*")
  (parameters
    '("GObjectClass*" "klass")
    '("const-gchar*" "property_name")
  )
)

(define-function container_class_list_child_properties
  (c-name "clutter_container_class_list_child_properties")
  (return-type "GParamSpec**")
  (parameters
    '("GObjectClass*" "klass")
    '("guint*" "n_properties")
  )
)

(define-method get_child_meta
  (of-object "ClutterContainer")
  (c-name "clutter_container_get_child_meta")
  (return-type "ClutterChildMeta*")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method child_set_property
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_set_property")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("const-gchar*" "property")
    '("const-GValue*" "value")
  )
)

(define-method child_get_property
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_get_property")
  (return-type "none")
  (parameters
    '("ClutterActor*" "child")
    '("const-gchar*" "property")
    '("GValue*" "value")
  )
)

(define-method child_set
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_set")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_prop")
  )
  (varargs #t)
)

(define-method child_get
  (of-object "ClutterContainer")
  (c-name "clutter_container_child_get")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("const-gchar*" "first_prop")
  )
  (varargs #t)
)



;; From clutter-effect.h

(define-function effect_template_get_type
  (c-name "clutter_effect_template_get_type")
  (return-type "GType")
)

(define-function effect_template_new
  (c-name "clutter_effect_template_new")
  (is-constructor-of "ClutterEffectTemplate")
  (return-type "ClutterEffectTemplate*")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("ClutterAlphaFunc" "alpha_func")
  )
)

(define-function effect_template_new_full
  (c-name "clutter_effect_template_new_full")
  (return-type "ClutterEffectTemplate*")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("ClutterAlphaFunc" "alpha_func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-function effect_template_new_for_duration
  (c-name "clutter_effect_template_new_for_duration")
  (return-type "ClutterEffectTemplate*")
  (parameters
    '("guint" "msecs")
    '("ClutterAlphaFunc" "alpha_func")
  )
)

(define-method construct
  (of-object "ClutterEffectTemplate")
  (c-name "clutter_effect_template_construct")
  (return-type "none")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("ClutterAlphaFunc" "alpha_func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_timeline_clone
  (of-object "ClutterEffectTemplate")
  (c-name "clutter_effect_template_set_timeline_clone")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_timeline_clone
  (of-object "ClutterEffectTemplate")
  (c-name "clutter_effect_template_get_timeline_clone")
  (return-type "gboolean")
)

(define-function effect_path
  (c-name "clutter_effect_path")
  (return-type "ClutterTimeline*")
  (parameters
    '("ClutterEffectTemplate*" "template_")
    '("ClutterActor*" "actor")
    '("const-ClutterKnot*" "knots")
    '("guint" "n_knots")
    '("ClutterEffectCompleteFunc" "func")
    '("gpointer" "data")
  )
)

(define-function effect_rotate
  (c-name "clutter_effect_rotate")
  (return-type "ClutterTimeline*")
  (parameters
    '("ClutterEffectTemplate*" "template_")
    '("ClutterActor*" "actor")
    '("ClutterRotateAxis" "axis")
    '("gdouble" "angle")
    '("gint" "center_x")
    '("gint" "center_y")
    '("gint" "center_z")
    '("ClutterRotateDirection" "direction")
    '("ClutterEffectCompleteFunc" "func")
    '("gpointer" "data")
  )
)


(define-function effect_depth
  (c-name "clutter_effect_depth")
  (return-type "ClutterTimeline*")
  (parameters
    '("ClutterEffectTemplate*" "template_")
    '("ClutterActor*" "actor")
    '("gint" "end_depth")
    '("ClutterEffectCompleteFunc" "completed_func")
    '("gpointer" "completed_data")
  )
)

(define-function effect_fade
  (c-name "clutter_effect_fade")
  (return-type "ClutterTimeline*")
  (parameters
    '("ClutterEffectTemplate*" "template_")
    '("ClutterActor*" "actor")
    '("guint8" "end_opacity")
    '("ClutterEffectCompleteFunc" "completed_func")
    '("gpointer" "completed_data")
  )
)

(define-function effect_move
  (c-name "clutter_effect_move")
  (return-type "ClutterTimeline*")
  (parameters
    '("ClutterEffectTemplate*" "template_")
    '("ClutterActor*" "actor")
    '("gint" "x")
    '("gint" "y")
    '("ClutterEffectCompleteFunc" "completed_func")
    '("gpointer" "completed_data")
  )
)

(define-function effect_scale
  (c-name "clutter_effect_scale")
  (return-type "ClutterTimeline*")
  (parameters
    '("ClutterEffectTemplate*" "template_")
    '("ClutterActor*" "actor")
    '("gdouble" "scale_end")
    '("ClutterEffectCompleteFunc" "completed_func")
    '("gpointer" "completed_data")
  )
)



;; From clutter-entry.h

(define-function entry_get_type
  (c-name "clutter_entry_get_type")
  (return-type "GType")
)

(define-function entry_new
  (c-name "clutter_entry_new")
  (is-constructor-of "ClutterEntry")
  (return-type "ClutterActor*")
)

(define-function entry_new_full
  (c-name "clutter_entry_new_full")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
    '("const-ClutterColor*" "color")
  )
)

(define-function entry_new_with_text
  (c-name "clutter_entry_new_with_text")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
  )
)

(define-method set_text
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method get_text
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_text")
  (return-type "const-gchar*")
)

(define-method set_font_name
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_font_name
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_font_name")
  (return-type "const-gchar*")
)

(define-method set_color
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method get_layout
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_layout")
  (return-type "PangoLayout*")
)

(define-method set_alignment
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_alignment")
  (return-type "none")
  (parameters
    '("PangoAlignment" "alignment")
  )
)

(define-method get_alignment
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_alignment")
  (return-type "PangoAlignment")
)

(define-method set_cursor_position
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_cursor_position")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method get_cursor_position
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_cursor_position")
  (return-type "gint")
)

(define-method insert_unichar
  (of-object "ClutterEntry")
  (c-name "clutter_entry_insert_unichar")
  (return-type "none")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method delete_chars
  (of-object "ClutterEntry")
  (c-name "clutter_entry_delete_chars")
  (return-type "none")
  (parameters
    '("guint" "len")
  )
)

(define-method insert_text
  (of-object "ClutterEntry")
  (c-name "clutter_entry_insert_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
    '("gssize" "position")
  )
)

(define-method delete_text
  (of-object "ClutterEntry")
  (c-name "clutter_entry_delete_text")
  (return-type "none")
  (parameters
    '("gssize" "start_pos")
    '("gssize" "end_pos")
  )
)

(define-method set_visible_cursor
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_visible_cursor")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-method get_visible_cursor
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_visible_cursor")
  (return-type "gboolean")
)

(define-method set_visibility
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_visibility")
  (return-type "none")
  (parameters
    '("gboolean" "visible")
  )
)

(define-method get_visibility
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_visibility")
  (return-type "gboolean")
)

(define-method set_invisible_char
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_invisible_char")
  (return-type "none")
  (parameters
    '("gunichar" "wc")
  )
)

(define-method get_invisible_char
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_invisible_char")
  (return-type "gunichar")
)

(define-method set_max_length
  (of-object "ClutterEntry")
  (c-name "clutter_entry_set_max_length")
  (return-type "none")
  (parameters
    '("gint" "max")
  )
)

(define-method get_max_length
  (of-object "ClutterEntry")
  (c-name "clutter_entry_get_max_length")
  (return-type "gint")
)



;; From clutter-enum-types.h

(define-function shader_error_get_type
  (c-name "clutter_shader_error_get_type")
  (return-type "GType")
)

(define-function actor_flags_get_type
  (c-name "clutter_actor_flags_get_type")
  (return-type "GType")
)

(define-function pack_type_get_type
  (c-name "clutter_pack_type_get_type")
  (return-type "GType")
)

(define-function modifier_type_get_type
  (c-name "clutter_modifier_type_get_type")
  (return-type "GType")
)

(define-function event_type_get_type
  (c-name "clutter_event_type_get_type")
  (return-type "GType")
)

(define-function scroll_direction_get_type
  (c-name "clutter_scroll_direction_get_type")
  (return-type "GType")
)

(define-function stage_state_get_type
  (c-name "clutter_stage_state_get_type")
  (return-type "GType")
)

(define-function feature_flags_get_type
  (c-name "clutter_feature_flags_get_type")
  (return-type "GType")
)

(define-function init_error_get_type
  (c-name "clutter_init_error_get_type")
  (return-type "GType")
)

(define-function texture_error_get_type
  (c-name "clutter_texture_error_get_type")
  (return-type "GType")
)

(define-function texture_flags_get_type
  (c-name "clutter_texture_flags_get_type")
  (return-type "GType")
)

(define-function gravity_get_type
  (c-name "clutter_gravity_get_type")
  (return-type "GType")
)

(define-function rotate_axis_get_type
  (c-name "clutter_rotate_axis_get_type")
  (return-type "GType")
)

(define-function rotate_direction_get_type
  (c-name "clutter_rotate_direction_get_type")
  (return-type "GType")
)

(define-function event_flags_get_type
  (c-name "clutter_event_flags_get_type")
  (return-type "GType")
)

(define-function script_error_get_type
  (c-name "clutter_script_error_get_type")
  (return-type "GType")
)

(define-function timeline_direction_get_type
  (c-name "clutter_timeline_direction_get_type")
  (return-type "GType")
)

(define-function texture_quality_get_type
  (c-name "clutter_texture_quality_get_type")
  (return-type "GType")
)

(define-function request_mode_get_type
  (c-name "clutter_request_mode_get_type")
  (return-type "GType")
)



;; From clutter-event.h

(define-function event_get_type
  (c-name "clutter_event_get_type")
  (return-type "GType")
)

(define-function events_pending
  (c-name "clutter_events_pending")
  (return-type "gboolean")
)

(define-function event_get
  (c-name "clutter_event_get")
  (return-type "ClutterEvent*")
)

(define-function event_peek
  (c-name "clutter_event_peek")
  (return-type "ClutterEvent*")
)

(define-method put
  (of-object "ClutterEvent")
  (c-name "clutter_event_put")
  (return-type "none")
)

(define-function event_new
  (c-name "clutter_event_new")
  (is-constructor-of "ClutterEvent")
  (return-type "ClutterEvent*")
  (parameters
    '("ClutterEventType" "type")
  )
)

(define-method copy
  (of-object "ClutterEvent")
  (c-name "clutter_event_copy")
  (return-type "ClutterEvent*")
)

(define-method free
  (of-object "ClutterEvent")
  (c-name "clutter_event_free")
  (return-type "none")
)

(define-method type
  (of-object "ClutterEvent")
  (c-name "clutter_event_type")
  (return-type "ClutterEventType")
)

(define-method get_time
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_time")
  (return-type "guint32")
)

(define-method get_state
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_state")
  (return-type "ClutterModifierType")
)

(define-method get_coords
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_coords")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method get_source
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_source")
  (return-type "ClutterActor*")
)

(define-method symbol
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_symbol")
  (return-type "guint")
)

(define-method code
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_code")
  (return-type "guint16")
)

(define-method unicode
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_unicode")
  (return-type "guint32")
)

(define-method button
  (of-object "ClutterButtonEvent")
  (c-name "clutter_button_event_button")
  (return-type "guint32")
)

(define-function keysym_to_unicode
  (c-name "clutter_keysym_to_unicode")
  (return-type "guint32")
  (parameters
    '("guint" "keyval")
  )
)

(define-method get_stage
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_stage")
  (return-type "ClutterStage*")
)

(define-method get_device_id
  (of-object "ClutterEvent")
  (c-name "clutter_event_get_device_id")
  (return-type "gint")
)



;; From clutter-feature.h

(define-function feature_available
  (c-name "clutter_feature_available")
  (return-type "gboolean")
  (parameters
    '("ClutterFeatureFlags" "feature")
  )
)

(define-function feature_get_all
  (c-name "clutter_feature_get_all")
  (return-type "ClutterFeatureFlags")
)



;; From clutter-group.h

(define-function group_get_type
  (c-name "clutter_group_get_type")
  (return-type "GType")
)

(define-function group_new
  (c-name "clutter_group_new")
  (is-constructor-of "ClutterGroup")
  (return-type "ClutterActor*")
)

(define-method get_nth_child
  (of-object "ClutterGroup")
  (c-name "clutter_group_get_nth_child")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index_")
  )
)

(define-method get_n_children
  (of-object "ClutterGroup")
  (c-name "clutter_group_get_n_children")
  (return-type "gint")
)

(define-method remove_all
  (of-object "ClutterGroup")
  (c-name "clutter_group_remove_all")
  (return-type "none")
)

(define-method raise
  (of-object "ClutterGroup")
  (c-name "clutter_group_raise")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling")
  )
)

(define-method lower
  (of-object "ClutterGroup")
  (c-name "clutter_group_lower")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling")
  )
)

(define-method sort_depth_order
  (of-object "ClutterGroup")
  (c-name "clutter_group_sort_depth_order")
  (return-type "none")
)



;; From clutter.h



;; From clutter-keysyms.h



;; From clutter-label.h

(define-function label_get_type
  (c-name "clutter_label_get_type")
  (return-type "GType")
)

(define-function label_new
  (c-name "clutter_label_new")
  (is-constructor-of "ClutterLabel")
  (return-type "ClutterActor*")
)

(define-function label_new_full
  (c-name "clutter_label_new_full")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
    '("ClutterColor*" "color")
  )
)

(define-function label_new_with_text
  (c-name "clutter_label_new_with_text")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
  )
)

(define-method set_text
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method get_text
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_text")
  (return-type "const-gchar*")
)

(define-method set_font_name
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_font_name
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_font_name")
  (return-type "const-gchar*")
)

(define-method set_color
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_ellipsize
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_ellipsize")
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "mode")
  )
)

(define-method get_ellipsize
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_ellipsize")
  (return-type "PangoEllipsizeMode")
)

(define-method set_line_wrap
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_line_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "wrap")
  )
)

(define-method get_line_wrap
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_line_wrap")
  (return-type "gboolean")
)

(define-method set_line_wrap_mode
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_line_wrap_mode")
  (return-type "none")
  (parameters
    '("PangoWrapMode" "wrap_mode")
  )
)

(define-method get_line_wrap_mode
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_line_wrap_mode")
  (return-type "PangoWrapMode")
)

(define-method get_layout
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_layout")
  (return-type "PangoLayout*")
)

(define-method set_attributes
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_attributes")
  (return-type "none")
  (parameters
    '("PangoAttrList*" "attrs")
  )
)

(define-method get_attributes
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_attributes")
  (return-type "PangoAttrList*")
)

(define-method set_use_markup
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_use_markup")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_markup
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_use_markup")
  (return-type "gboolean")
)

(define-method set_alignment
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_alignment")
  (return-type "none")
  (parameters
    '("PangoAlignment" "alignment")
  )
)

(define-method get_alignment
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_alignment")
  (return-type "PangoAlignment")
)

(define-method set_justify
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_justify")
  (return-type "none")
  (parameters
    '("gboolean" "justify")
  )
)

(define-method get_justify
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_justify")
  (return-type "gboolean")
)



;; From clutter-main.h

(define-function init_error_quark
  (c-name "clutter_init_error_quark")
  (return-type "GQuark")
)

(define-function init
  (c-name "clutter_init")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function init_with_args
  (c-name "clutter_init_with_args")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function get_option_group
  (c-name "clutter_get_option_group")
  (return-type "GOptionGroup*")
)

(define-function main
  (c-name "clutter_main")
  (return-type "none")
)

(define-function main_quit
  (c-name "clutter_main_quit")
  (return-type "none")
)

(define-function main_level
  (c-name "clutter_main_level")
  (return-type "gint")
)

(define-function redraw
  (c-name "clutter_redraw")
  (return-type "none")
  (parameters
    '("ClutterStage*" "stage")
  )
)

(define-function get_debug_enabled
  (c-name "clutter_get_debug_enabled")
  (return-type "gboolean")
)

(define-function get_show_fps
  (c-name "clutter_get_show_fps")
  (return-type "gboolean")
)

(define-function base_init
  (c-name "clutter_base_init")
  (return-type "none")
)

(define-function get_timestamp
  (c-name "clutter_get_timestamp")
  (return-type "gulong")
)

(define-function threads_init
  (c-name "clutter_threads_init")
  (return-type "none")
)

(define-function threads_set_lock_functions
  (c-name "clutter_threads_set_lock_functions")
  (return-type "none")
  (parameters
    '("GCallback" "enter_fn")
    '("GCallback" "leave_fn")
  )
)

(define-function threads_enter
  (c-name "clutter_threads_enter")
  (return-type "none")
)

(define-function threads_leave
  (c-name "clutter_threads_leave")
  (return-type "none")
)

(define-function threads_add_idle
  (c-name "clutter_threads_add_idle")
  (return-type "guint")
  (parameters
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function threads_add_idle_full
  (c-name "clutter_threads_add_idle_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function threads_add_timeout
  (c-name "clutter_threads_add_timeout")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function threads_add_timeout_full
  (c-name "clutter_threads_add_timeout_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function set_motion_events_enabled
  (c-name "clutter_set_motion_events_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "enable")
  )
)

(define-function get_motion_events_enabled
  (c-name "clutter_get_motion_events_enabled")
  (return-type "gboolean")
)

(define-function set_motion_events_frequency
  (c-name "clutter_set_motion_events_frequency")
  (return-type "none")
  (parameters
    '("guint" "frequency")
  )
)

(define-function get_motion_events_frequency
  (c-name "clutter_get_motion_events_frequency")
  (return-type "guint")
)

(define-function set_default_frame_rate
  (c-name "clutter_set_default_frame_rate")
  (return-type "none")
  (parameters
    '("guint" "frames_per_sec")
  )
)

(define-function get_default_frame_rate
  (c-name "clutter_get_default_frame_rate")
  (return-type "guint")
)

(define-function grab_pointer
  (c-name "clutter_grab_pointer")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function ungrab_pointer
  (c-name "clutter_ungrab_pointer")
  (return-type "none")
)

(define-function get_pointer_grab
  (c-name "clutter_get_pointer_grab")
  (return-type "ClutterActor*")
)

(define-function grab_keyboard
  (c-name "clutter_grab_keyboard")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-function ungrab_keyboard
  (c-name "clutter_ungrab_keyboard")
  (return-type "none")
)

(define-function get_keyboard_grab
  (c-name "clutter_get_keyboard_grab")
  (return-type "ClutterActor*")
)

(define-function do_event
  (c-name "clutter_do_event")
  (return-type "none")
  (parameters
    '("ClutterEvent*" "event")
  )
)

(define-function threads_add_frame_source
  (c-name "clutter_threads_add_frame_source")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
  )
)

(define-function threads_add_frame_source_full
  (c-name "clutter_threads_add_frame_source_full")
  (return-type "guint")
  (parameters
    '("gint" "priority")
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-function clear_glyph_cache
  (c-name "clutter_clear_glyph_cache")
  (return-type "none")
)

(define-function set_use_mipmapped_text
  (c-name "clutter_set_use_mipmapped_text")
  (return-type "none")
  (parameters
    '("gboolean" "value")
  )
)

(define-function get_use_mipmapped_text
  (c-name "clutter_get_use_mipmapped_text")
  (return-type "gboolean")
)

(define-function get_input_device_for_id
  (c-name "clutter_get_input_device_for_id")
  (return-type "ClutterInputDevice*")
  (parameters
    '("gint" "id")
  )
)

(define-function grab_pointer_for_device
  (c-name "clutter_grab_pointer_for_device")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("gint" "id")
  )
)

(define-function ungrab_pointer_for_device
  (c-name "clutter_ungrab_pointer_for_device")
  (return-type "none")
  (parameters
    '("gint" "id")
  )
)



;; From clutter-media.h

(define-function media_get_type
  (c-name "clutter_media_get_type")
  (return-type "GType")
)

(define-method set_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_uri")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-virtual set_uri
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("const-gchar*" "uri")
  )
)

(define-method get_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_uri")
  (return-type "const-gchar*")
)

(define-virtual get_uri
  (of-object "ClutterMedia")
  (return-type "const-gchar*")
)

(define-method set_playing
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_playing")
  (return-type "none")
  (parameters
    '("gboolean" "playing")
  )
)

(define-virtual set_playing
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("gboolean" "playing")
  )
)

(define-method get_playing
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_playing")
  (return-type "gboolean")
)

(define-virtual get_playing
  (of-object "ClutterMedia")
  (return-type "gboolean")
)

(define-method set_position
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_position")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-virtual set_position
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("gint" "position")
  )
)

(define-method get_position
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_position")
  (return-type "int")
)

(define-virtual get_position
  (of-object "ClutterMedia")
  (return-type "gint")
)

(define-method set_volume
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_volume")
  (return-type "none")
  (parameters
    '("gdouble" "volume")
  )
)

(define-virtual set_volume
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("gdouble" "volume")
  )
)

(define-method get_volume
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_volume")
  (return-type "gdouble")
)

(define-virtual get_volume
  (of-object "ClutterMedia")
  (return-type "gdouble")
)

(define-method get_can_seek
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_can_seek")
  (return-type "gboolean")
)

(define-virtual can_seek
  (of-object "ClutterMedia")
  (return-type "gboolean")
)

(define-method get_buffer_percent
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_buffer_percent")
  (return-type "gint")
)

(define-virtual get_buffer_percent
  (of-object "ClutterMedia")
  (return-type "gint")
)

(define-method get_duration
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_duration")
  (return-type "gint")
)

(define-virtual get_duration
  (of-object "ClutterMedia")
  (return-type "gint")
)

(define-method set_filename
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)



;; From clutter-model.h

(define-function model_get_type
  (c-name "clutter_model_get_type")
  (return-type "GType")
)

(define-method set_types
  (of-object "ClutterModel")
  (c-name "clutter_model_set_types")
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("GType*" "types")
  )
)

(define-method set_names
  (of-object "ClutterModel")
  (c-name "clutter_model_set_names")
  (return-type "none")
  (parameters
    '("guint" "n_columns")
    '("const-gchar*-const[]" "names")
  )
)

(define-method append_value
  (of-object "ClutterModel")
  (c-name "clutter_model_append_value")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method prepend_value
  (of-object "ClutterModel")
  (c-name "clutter_model_prepend_value")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method get_n_columns
  (of-object "ClutterModel")
  (c-name "clutter_model_get_n_columns")
  (return-type "guint")
)

(define-method get_column_name
  (of-object "ClutterModel")
  (c-name "clutter_model_get_column_name")
  (return-type "const-gchar*")
  (parameters
    '("guint" "column")
  )
)

(define-method get_column_type
  (of-object "ClutterModel")
  (c-name "clutter_model_get_column_type")
  (return-type "GType")
  (parameters
    '("guint" "column")
  )
)

(define-method resort
  (of-object "ClutterModel")
  (c-name "clutter_model_resort")
  (return-type "none")
)

(define-method filter_row
  (of-object "ClutterModel")
  (c-name "clutter_model_filter_row")
  (return-type "gboolean")
  (parameters
    '("guint" "row")
  )
)

(define-method filter_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_filter_iter")
  (return-type "gboolean")
  (parameters
    '("ClutterModelIter*" "iter")
  )
)

(define-method append
  (of-object "ClutterModel")
  (c-name "clutter_model_append")
  (return-type "gboolean")
  (parameters
  )
  (varargs #t)
)

(define-method prepend
  (of-object "ClutterModel")
  (c-name "clutter_model_prepend")
  (return-type "gboolean")
  (parameters
  )
  (varargs #t)
)

(define-method insert
  (of-object "ClutterModel")
  (c-name "clutter_model_insert")
  (return-type "gboolean")
  (parameters
    '("guint" "index_")
  )
  (varargs #t)
)

(define-method insert_value
  (of-object "ClutterModel")
  (c-name "clutter_model_insert_value")
  (return-type "gboolean")
  (parameters
    '("guint" "index_")
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method remove
  (of-object "ClutterModel")
  (c-name "clutter_model_remove")
  (return-type "none")
  (parameters
    '("guint" "index_")
  )
)

(define-method get_n_rows
  (of-object "ClutterModel")
  (c-name "clutter_model_get_n_rows")
  (return-type "guint")
)

(define-method get_first_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_get_first_iter")
  (return-type "ClutterModelIter*")
)

(define-method get_last_iter
  (of-object "ClutterModel")
  (c-name "clutter_model_get_last_iter")
  (return-type "ClutterModelIter*")
)

(define-method get_iter_at_row
  (of-object "ClutterModel")
  (c-name "clutter_model_get_iter_at_row")
  (return-type "ClutterModelIter*")
  (parameters
    '("guint" "index_")
  )
)

(define-method set_sorting_column
  (of-object "ClutterModel")
  (c-name "clutter_model_set_sorting_column")
  (return-type "none")
  (parameters
    '("guint" "column")
  )
)

(define-method get_sorting_column
  (of-object "ClutterModel")
  (c-name "clutter_model_get_sorting_column")
  (return-type "guint")
)

(define-method foreach
  (of-object "ClutterModel")
  (c-name "clutter_model_foreach")
  (return-type "none")
  (parameters
    '("ClutterModelForeachFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method set_sort
  (of-object "ClutterModel")
  (c-name "clutter_model_set_sort")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("ClutterModelSortFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-method set_filter
  (of-object "ClutterModel")
  (c-name "clutter_model_set_filter")
  (return-type "none")
  (parameters
    '("ClutterModelFilterFunc" "func")
    '("gpointer" "user_data")
    '("GDestroyNotify" "notify")
  )
)

(define-function model_iter_get_type
  (c-name "clutter_model_iter_get_type")
  (return-type "GType")
)

(define-method get
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method get_valist
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_valist")
  (return-type "none")
  (parameters
    '("va_list" "args")
  )
)

(define-method get_value
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_value")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("GValue*" "value")
  )
)

(define-method set
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set")
  (return-type "none")
  (parameters
  )
  (varargs #t)
)

(define-method set_valist
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set_valist")
  (return-type "none")
  (parameters
    '("va_list" "args")
  )
)

(define-method set_value
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_set_value")
  (return-type "none")
  (parameters
    '("guint" "column")
    '("const-GValue*" "value")
  )
)

(define-method is_first
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_is_first")
  (return-type "gboolean")
)

(define-method is_last
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_is_last")
  (return-type "gboolean")
)

(define-method next
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_next")
  (return-type "ClutterModelIter*")
)

(define-method prev
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_prev")
  (return-type "ClutterModelIter*")
)

(define-method get_model
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_model")
  (return-type "ClutterModel*")
)

(define-method get_row
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_get_row")
  (return-type "guint")
)

(define-method copy
  (of-object "ClutterModelIter")
  (c-name "clutter_model_iter_copy")
  (return-type "ClutterModelIter*")
)



;; From clutter-list-model.h

(define-function list_model_get_type
  (c-name "clutter_list_model_get_type")
  (return-type "GType")
)

(define-function list_model_new
  (c-name "clutter_list_model_new")
  (is-constructor-of "ClutterListModel")
  (return-type "ClutterModel*")
)

(define-function list_model_newv
  (c-name "clutter_list_model_newv")
  (is-constructor-of "ClutterListModel")
  (return-type "ClutterModel*")
)



;; From clutter-rectangle.h

(define-function rectangle_get_type
  (c-name "clutter_rectangle_get_type")
  (return-type "GType")
)

(define-function rectangle_new
  (c-name "clutter_rectangle_new")
  (is-constructor-of "ClutterRectangle")
  (return-type "ClutterActor*")
  (properties
    '("color" (optional))
  )
)

(define-function rectangle_new_with_color
  (c-name "clutter_rectangle_new_with_color")
  (return-type "ClutterActor*")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_border_width
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_border_width")
  (return-type "guint")
)

(define-method set_border_width
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_border_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method get_border_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_border_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_border_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_border_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)



;; From clutter-score.h

(define-function score_get_type
  (c-name "clutter_score_get_type")
  (return-type "GType")
)

(define-function score_new
  (c-name "clutter_score_new")
  (is-constructor-of "ClutterScore")
  (return-type "ClutterScore*")
)

(define-method set_loop
  (of-object "ClutterScore")
  (c-name "clutter_score_set_loop")
  (return-type "none")
  (parameters
    '("gboolean" "loop")
  )
)

(define-method get_loop
  (of-object "ClutterScore")
  (c-name "clutter_score_get_loop")
  (return-type "gboolean")
)

(define-method rewind
  (of-object "ClutterScore")
  (c-name "clutter_score_rewind")
  (return-type "none")
)

(define-method is_playing
  (of-object "ClutterScore")
  (c-name "clutter_score_is_playing")
  (return-type "gboolean")
)

(define-method start
  (of-object "ClutterScore")
  (c-name "clutter_score_start")
  (return-type "none")
)

(define-method stop
  (of-object "ClutterScore")
  (c-name "clutter_score_stop")
  (return-type "none")
)

(define-method pause
  (of-object "ClutterScore")
  (c-name "clutter_score_pause")
  (return-type "none")
)

(define-method append
  (of-object "ClutterScore")
  (c-name "clutter_score_append")
  (return-type "guint")
  (parameters
    '("ClutterTimeline*" "parent")
    '("ClutterTimeline*" "timeline")
  )
)

(define-method append_at_marker
  (of-object "ClutterScore")
  (c-name "clutter_score_append_at_marker")
  (return-type "gulong")
  (parameters
    '("ClutterTimeline*" "parent")
    '("const-gchar*" "marker_name")
    '("ClutterTimeline*" "timeline")
  )
)

(define-method remove
  (of-object "ClutterScore")
  (c-name "clutter_score_remove")
  (return-type "none")
  (parameters
    '("guint" "id")
  )
)

(define-method remove_all
  (of-object "ClutterScore")
  (c-name "clutter_score_remove_all")
  (return-type "none")
)

(define-method get_timeline
  (of-object "ClutterScore")
  (c-name "clutter_score_get_timeline")
  (return-type "ClutterTimeline*")
  (parameters
    '("guint" "id")
  )
)

(define-method list_timelines
  (of-object "ClutterScore")
  (c-name "clutter_score_list_timelines")
  (return-type "GSList*")
)



;; From clutter-scriptable.h

(define-function scriptable_get_type
  (c-name "clutter_scriptable_get_type")
  (return-type "GType")
)

(define-method set_id
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_set_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "id")
  )
)

(define-method get_id
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_get_id")
  (return-type "const-gchar*")
)

(define-method parse_custom_node
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_parse_custom_node")
  (return-type "gboolean")
  (parameters
    '("ClutterScript*" "script")
    '("GValue*" "value")
    '("const-gchar*" "name")
    '("JsonNode*" "node")
  )
)

(define-method set_custom_property
  (of-object "ClutterScriptable")
  (c-name "clutter_scriptable_set_custom_property")
  (return-type "none")
  (parameters
    '("ClutterScript*" "script")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)



;; From clutter-script.h

(define-function script_error_quark
  (c-name "clutter_script_error_quark")
  (return-type "GQuark")
)

(define-function script_get_type
  (c-name "clutter_script_get_type")
  (return-type "GType")
)

(define-function script_new
  (c-name "clutter_script_new")
  (is-constructor-of "ClutterScript")
  (return-type "ClutterScript*")
)

(define-method load_from_file
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_file")
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method load_from_data
  (of-object "ClutterScript")
  (c-name "clutter_script_load_from_data")
  (return-type "guint")
  (parameters
    '("const-gchar*" "data")
    '("gsize" "length")
    '("GError**" "error")
  )
)

(define-method get_object
  (of-object "ClutterScript")
  (c-name "clutter_script_get_object")
  (return-type "GObject*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_get_objects")
  (return-type "gint")
  (parameters
    '("const-gchar*" "first_name")
  )
  (varargs #t)
)

(define-method unmerge_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_unmerge_objects")
  (return-type "none")
  (parameters
    '("guint" "merge_id")
  )
)

(define-method ensure_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_ensure_objects")
  (return-type "none")
)

(define-method get_type_from_name
  (of-object "ClutterScript")
  (c-name "clutter_script_get_type_from_name")
  (return-type "GType")
  (parameters
    '("const-gchar*" "type_name")
  )
)

(define-function get_script_id
  (c-name "clutter_get_script_id")
  (return-type "const-gchar*")
  (parameters
    '("GObject*" "gobject")
  )
)

(define-method connect_signals
  (of-object "ClutterScript")
  (c-name "clutter_script_connect_signals")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method connect_signals_full
  (of-object "ClutterScript")
  (c-name "clutter_script_connect_signals_full")
  (return-type "none")
  (parameters
    '("ClutterScriptConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method add_search_paths
  (of-object "ClutterScript")
  (c-name "clutter_script_add_search_paths")
  (return-type "none")
  (parameters
    '("const-gchar*-const[]" "paths")
    '("gsize" "n_paths")
  )
)

(define-method lookup_filename
  (of-object "ClutterScript")
  (c-name "clutter_script_lookup_filename")
  (return-type "gchar*")
  (parameters
    '("const-gchar*" "filename")
  )
)

(define-method list_objects
  (of-object "ClutterScript")
  (c-name "clutter_script_list_objects")
  (return-type "GList*")
)



;; From clutter-shader.h

(define-function shader_error_quark
  (c-name "clutter_shader_error_quark")
  (return-type "GQuark")
)

(define-function shader_get_type
  (c-name "clutter_shader_get_type")
  (return-type "GType")
)

(define-function shader_new
  (c-name "clutter_shader_new")
  (is-constructor-of "ClutterShader")
  (return-type "ClutterShader*")
)

(define-method set_is_enabled
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_is_enabled")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_is_enabled
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_is_enabled")
  (return-type "gboolean")
)

(define-method compile
  (of-object "ClutterShader")
  (c-name "clutter_shader_compile")
  (return-type "gboolean")
  (parameters
    '("GError**" "error")
  )
)

(define-method is_compiled
  (of-object "ClutterShader")
  (c-name "clutter_shader_is_compiled")
  (return-type "gboolean")
)

(define-method release
  (of-object "ClutterShader")
  (c-name "clutter_shader_release")
  (return-type "none")
)

(define-method set_vertex_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_vertex_source")
  (return-type "none")
  (parameters
    '("const-gchar*" "data")
    '("gssize" "length")
  )
)

(define-method set_fragment_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_fragment_source")
  (return-type "none")
  (parameters
    '("const-gchar*" "data")
    '("gssize" "length")
  )
)

(define-method get_vertex_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_vertex_source")
  (return-type "const-gchar*")
)

(define-method get_fragment_source
  (of-object "ClutterShader")
  (c-name "clutter_shader_get_fragment_source")
  (return-type "const-gchar*")
)

(define-method set_uniform_1f
  (of-object "ClutterShader")
  (c-name "clutter_shader_set_uniform_1f")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
    '("gfloat" "value")
  )
)



;; From clutter-stage.h

(define-function fog_get_type
  (c-name "clutter_fog_get_type")
  (return-type "GType")
)

(define-function perspective_get_type
  (c-name "clutter_perspective_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "ClutterPerspective")
  (c-name "clutter_perspective_copy")
  (return-type "ClutterPerspective*")
)

(define-method free
  (of-object "ClutterPerspective")
  (c-name "clutter_perspective_free")
  (return-type "none")
)

(define-function stage_get_type
  (c-name "clutter_stage_get_type")
  (return-type "GType")
)

(define-function stage_get_default
  (c-name "clutter_stage_get_default")
  (return-type "ClutterActor*")
)

(define-function clutter_stage_new
  (c-name "clutter_stage_new")
  (is-constructor-of "ClutterStage")
  (return-type "ClutterActor*")
)

(define-method set_color
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_perspective
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_perspective")
  (return-type "none")
  (parameters
    '("gfloat" "fovy")
    '("gfloat" "aspect")
    '("gfloat" "z_near")
    '("gfloat" "z_far")
  )
)

(define-method get_perspective
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_perspective")
  (return-type "none")
  (parameters
    '("gfloat*" "fovy")
    '("gfloat*" "aspect")
    '("gfloat*" "z_near")
    '("gfloat*" "z_far")
  )
)

(define-method fullscreen
  (of-object "ClutterStage")
  (c-name "clutter_stage_fullscreen")
  (return-type "none")
)

(define-method unfullscreen
  (of-object "ClutterStage")
  (c-name "clutter_stage_unfullscreen")
  (return-type "none")
)

(define-method show_cursor
  (of-object "ClutterStage")
  (c-name "clutter_stage_show_cursor")
  (return-type "none")
)

(define-method hide_cursor
  (of-object "ClutterStage")
  (c-name "clutter_stage_hide_cursor")
  (return-type "none")
)

(define-method get_actor_at_pos
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_actor_at_pos")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method event
  (of-object "ClutterStage")
  (c-name "clutter_stage_event")
  (return-type "gboolean")
  (parameters
    '("ClutterEvent*" "event")
  )
)

(define-method set_title
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_title")
  (return-type "none")
  (parameters
    '("const-gchar*" "title")
  )
)

(define-method get_title
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_title")
  (return-type "const-gchar*")
)

(define-method set_user_resizable
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_user_resizable")
  (return-type "none")
  (parameters
    '("gboolean" "value")
  )
)

(define-method get_user_resizable
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_user_resizable")
  (return-type "gboolean")
)

(define-method set_use_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_use_fog")
  (return-type "none")
  (parameters
    '("gboolean" "fog")
  )
)

(define-method get_use_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_use_fog")
  (return-type "gboolean")
)

(define-method set_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_fog")
  (return-type "none")
  (parameters
    '("gdouble" "density")
    '("gdouble" "z_near")
    '("gdouble" "z_far")
  )
)

(define-method get_fog
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_fog")
  (return-type "none")
  (parameters
    '("gdouble*" "density")
    '("gdouble*" "z_near")
    '("gdouble*" "z_far")
  )
)

(define-method set_key_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_key_focus")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method get_key_focus
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_key_focus")
  (return-type "ClutterActor*")
)

(define-method get_resolution
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_resolution")
  (return-type "gdouble")
)

(define-method is_default
  (of-object "ClutterStage")
  (c-name "clutter_stage_is_default")
  (return-type "gboolean")
)

(define-method queue_redraw
  (of-object "ClutterStage")
  (c-name "clutter_stage_queue_redraw")
  (return-type "none")
)

(define-method read_pixels
  (of-object "ClutterStage")
  (c-name "clutter_stage_read_pixels")
  (return-type "gchar*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)



;; From clutter-stage-manager.h

(define-function stage_manager_get_type
  (c-name "clutter_stage_manager_get_type")
  (return-type "GType")
)

(define-function stage_manager_get_default
  (c-name "clutter_stage_manager_get_default")
  (return-type "ClutterStageManager*")
)

(define-method set_default_stage
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_set_default_stage")
  (return-type "none")
  (parameters
    '("ClutterStage*" "stage")
  )
)

(define-method get_default_stage
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_get_default_stage")
  (return-type "ClutterStage*")
)

(define-method list_stages
  (of-object "ClutterStageManager")
  (c-name "clutter_stage_manager_list_stages")
  (return-type "GSList*")
)



;; From clutter-texture.h

(define-function texture_error_quark
  (c-name "clutter_texture_error_quark")
  (return-type "GQuark")
)

(define-function texture_get_type
  (c-name "clutter_texture_get_type")
  (return-type "GType")
)

(define-function texture_new
  (c-name "clutter_texture_new")
  (is-constructor-of "ClutterTexture")
  (return-type "ClutterActor*")
  (properties
    '("filename" (optional) (default NULL))
    '("disable_slicing" (optional) (default FALSE))
    '("tile_waste" (optional) (default 64))
  )
)

(define-function texture_new_from_actor
  (c-name "clutter_texture_new_from_actor")
  (return-type "ClutterActor*")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method set_from_rgb_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_rgb_data")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "data")
    '("gboolean" "has_alpha")
    '("gint" "width")
    '("gint" "height")
    '("gint" "rowstride")
    '("gint" "bpp")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_from_yuv_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_yuv_data")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "data")
    '("gint" "width")
    '("gint" "height")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_area_from_rgb_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_area_from_rgb_data")
  (return-type "gboolean")
  (parameters
    '("const-guchar*" "data")
    '("gboolean" "has_alpha")
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
    '("gint" "rowstride")
    '("gint" "bpp")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-function texture_handle_get_type
  (c-name "clutter_texture_handle_get_type")
  (return-type "GType")
)

(define-function texture_new_from_file
  (c-name "clutter_texture_new_from_file")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method set_from_file
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method set_filter_quality
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_filter_quality")
  (return-type "none")
  (parameters
    '("ClutterTextureQuality" "filter_quality")
  )
)

(define-method get_filter_quality
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_filter_quality")
  (return-type "ClutterTextureQuality")
)

(define-method set_max_tile_waste
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_max_tile_waste")
  (return-type "none")
  (parameters
    '("gint" "max_tile_waste")
  )
)

(define-method get_max_tile_waste
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_max_tile_waste")
  (return-type "gint")
)

(define-method get_cogl_texture
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_cogl_texture")
  (return-type "CoglHandle")
)

(define-method set_cogl_texture
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_cogl_texture")
  (return-type "none")
  (parameters
    '("CoglHandle" "handle")
  )
)



;; From clutter-timeline.h

(define-function timeline_get_type
  (c-name "clutter_timeline_get_type")
  (return-type "GType")
)

(define-function timeline_new
  (c-name "clutter_timeline_new")
  (is-constructor-of "ClutterTimeline")
  (return-type "ClutterTimeline*")
  (properties
    '("num_frames" (optional))
    '("fps" (optional))
    '("duration" (optional))
  )
)

(define-function timeline_new_for_duration
  (c-name "clutter_timeline_new_for_duration")
  (is-constructor-of "ClutterTimeline")
  (return-type "ClutterTimeline*")
  (properties
    '("duration")
  )
)

(define-method get_duration
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_duration")
  (return-type "guint")
)

(define-method set_duration
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_duration")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_direction
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_direction")
  (return-type "ClutterTimelineDirection")
)

(define-method set_direction
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_direction")
  (return-type "none")
  (parameters
    '("ClutterTimelineDirection" "direction")
  )
)

(define-method get_progress
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_progress")
  (return-type "gdouble")
)

(define-method clone
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_clone")
  (return-type "ClutterTimeline*")
)

(define-method get_speed
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_speed")
  (return-type "guint")
)

(define-method set_speed
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_speed")
  (return-type "none")
  (parameters
    '("guint" "fps")
  )
)

(define-method start
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_start")
  (return-type "none")
)

(define-method pause
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_pause")
  (return-type "none")
)

(define-method stop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_stop")
  (return-type "none")
)

(define-method set_loop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_loop")
  (return-type "none")
  (parameters
    '("gboolean" "loop")
  )
)

(define-method get_loop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_loop")
  (return-type "gboolean")
)

(define-method rewind
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_rewind")
  (return-type "none")
)

(define-method skip
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_skip")
  (return-type "none")
  (parameters
    '("guint" "n_frames")
  )
)

(define-method advance
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance")
  (return-type "none")
  (parameters
    '("guint" "frame_num")
  )
)

(define-method get_current_frame
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_current_frame")
  (return-type "gint")
)

(define-method set_n_frames
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_n_frames")
  (return-type "none")
  (parameters
    '("guint" "n_frames")
  )
)

(define-method get_n_frames
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_n_frames")
  (return-type "guint")
)

(define-method is_playing
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_is_playing")
  (return-type "gboolean")
)

(define-method set_delay
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_delay")
  (return-type "none")
  (parameters
    '("guint" "msecs")
  )
)

(define-method get_delay
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_delay")
  (return-type "guint")
)

(define-method get_delta
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_delta")
  (return-type "guint")
  (parameters
    '("guint*" "msecs")
  )
)

(define-method add_marker_at_frame
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_add_marker_at_frame")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
    '("guint" "frame_num")
  )
)

(define-method add_marker_at_time
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_add_marker_at_time")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
    '("guint" "msecs")
  )
)

(define-method remove_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_remove_marker")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method list_markers
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_list_markers")
  (return-type "gchar**")
  (parameters
    '("gint" "frame_num")
    '("gsize*" "n_markers")
  )
)

(define-method has_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_has_marker")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "marker_name")
  )
)

(define-method advance_to_marker
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance_to_marker")
  (return-type "none")
  (parameters
    '("const-gchar*" "marker_name")
  )
)



;; From clutter-timeout-pool.h

(define-function timeout_pool_new
  (c-name "clutter_timeout_pool_new")
  (is-constructor-of "ClutterTimeoutPool")
  (return-type "ClutterTimeoutPool*")
  (parameters
    '("gint" "priority")
  )
)

(define-method add
  (of-object "ClutterTimeoutPool")
  (c-name "clutter_timeout_pool_add")
  (return-type "guint")
  (parameters
    '("guint" "interval")
    '("GSourceFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "notify")
  )
)

(define-method remove
  (of-object "ClutterTimeoutPool")
  (c-name "clutter_timeout_pool_remove")
  (return-type "none")
  (parameters
    '("guint" "id")
  )
)



;; From clutter-types.h

(define-function actor_box_get_type
  (c-name "clutter_actor_box_get_type")
  (return-type "GType")
)

(define-function actor_box_new
  (c-name "clutter_actor_box_new")
  (is-constructor-of "ClutterActorBox")
  (return-type "ClutterActorBox")
)

(define-function geometry_get_type
  (c-name "clutter_geometry_get_type")
  (return-type "GType")
)

(define-function geometry_new
  (c-name "clutter_geometry_new")
  (is-constructor-of "ClutterGeometry")
  (return-type "ClutterGeometry")
)

(define-function vertex_get_type
  (c-name "clutter_vertex_get_type")
  (return-type "GType")
)

(define-function vertex_new
  (c-name "clutter_vertex_new")
  (is-constructor-of "ClutterVertex")
  (return-type "ClutterVertex")
)

(define-function knot_get_type
  (c-name "clutter_knot_get_type")
  (return-type "GType")
)

(define-function knot_new
  (c-name "clutter_knot_new")
  (is-constructor-of "ClutterKnot")
  (return-type "ClutterKnot")
)

(define-method copy
  (of-object "ClutterKnot")
  (c-name "clutter_knot_copy")
  (return-type "ClutterKnot*")
)

(define-method free
  (of-object "ClutterKnot")
  (c-name "clutter_knot_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterKnot")
  (c-name "clutter_knot_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterKnot*" "knot_b")
  )
)



;; From clutter-units.h

(define-function units_from_int
  (c-name "CLUTTER_UNITS_FROM_INT")
  (return-type "gint32")
  (parameters
    '("gint" "value")
  )
)

(define-function units_to_int
  (c-name "CLUTTER_UNITS_TO_INT")
  (return-type "gint")
  (parameters
    '("gint32" "units")
  )
)

(define-function units_from_float
  (c-name "CLUTTER_UNITS_FROM_FLOAT")
  (return-type "gint32")
  (parameters
    '("gdouble" "value")
  )
)

(define-function units_to_float
  (c-name "CLUTTER_UNITS_TO_FLOAT")
  (return-type "gdouble")
  (parameters
    '("gint32" "units")
  )
)

(define-function units_from_device
  (c-name "CLUTTER_UNITS_FROM_DEVICE")
  (return-type "gint32")
  (parameters
    '("gint" "value")
  )
)

(define-function units_to_device
  (c-name "CLUTTER_UNITS_TO_DEVICE")
  (return-type "gint")
  (parameters
    '("gint32" "units")
  )
)

(define-function units_from_pango
  (c-name "CLUTTER_UNITS_FROM_PANGO_UNIT")
  (return-type "gint32")
  (parameters
    '("gint" "value")
  )
)

(define-function units_to_pango
  (c-name "CLUTTER_UNITS_TO_PANGO_UNIT")
  (return-type "gint")
  (parameters
    '("gint32" "units")
  )
)

(define-function units_from_mm
  (c-name "CLUTTER_UNITS_FROM_MM")
  (return-type "gint32")
  (parameters
    '("gint" "value")
  )
)

(define-function units_from_points
  (c-name "CLUTTER_UNITS_FROM_POINTS")
  (return-type "gint32")
  (parameters
    '("gdouble" "value")
  )
)

(define-function units_from_stage_width_percentage
  (c-name "CLUTTER_UNITS_FROM_STAGE_WIDTH_PERCENTAGE")
  (return-type "gint32")
  (parameters
    '("gint" "value")
  )
)

(define-function units_from_stage_height_percentage
  (c-name "CLUTTER_UNITS_FROM_STAGE_HEIGHT_PERCENTAGE")
  (return-type "gint32")
  (parameters
    '("gint" "value")
  )
)

(define-function units_from_parent_width_percentage
  (c-name "CLUTTER_UNITS_FROM_PARENT_WIDTH_PERCENTAGE")
  (return-type "gint32")
  (parameters
    '("ClutterActor*" "actor")
    '("gint" "value")
  )
)

(define-function units_from_parent_height_percentage
  (c-name "CLUTTER_UNITS_FROM_PARENT_HEIGHT_PERCENTAGE")
  (return-type "gint32")
  (parameters
    '("ClutterActor*" "actor")
    '("gint" "value")
  )
)
