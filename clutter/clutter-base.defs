;; -*- scheme -*-

(include "clutter-base-types.defs")

;; From clutter-actor.h

(define-function clutter_geometry_get_type
  (c-name "clutter_geometry_get_type")
  (return-type "GType")
)

(define-function clutter_actor_box_get_type
  (c-name "clutter_actor_box_get_type")
  (return-type "GType")
)

(define-function clutter_actor_get_type
  (c-name "clutter_actor_get_type")
  (return-type "GType")
)

(define-method show
  (of-object "ClutterActor")
  (c-name "clutter_actor_show")
  (return-type "none")
)

(define-method hide
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide")
  (return-type "none")
)

(define-method realize
  (of-object "ClutterActor")
  (c-name "clutter_actor_realize")
  (return-type "none")
)

(define-method unrealize
  (of-object "ClutterActor")
  (c-name "clutter_actor_unrealize")
  (return-type "none")
)

(define-method paint
  (of-object "ClutterActor")
  (c-name "clutter_actor_paint")
  (return-type "none")
)

(define-method queue_redraw
  (of-object "ClutterActor")
  (c-name "clutter_actor_queue_redraw")
  (return-type "none")
)

(define-method destroy
  (of-object "ClutterActor")
  (c-name "clutter_actor_destroy")
  (return-type "none")
)

(define-method request_coords
  (of-object "ClutterActor")
  (c-name "clutter_actor_request_coords")
  (return-type "none")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method allocate_coords
  (of-object "ClutterActor")
  (c-name "clutter_actor_allocate_coords")
  (return-type "none")
  (parameters
    '("ClutterActorBox*" "box")
  )
)

(define-method set_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_geometry")
  (return-type "none")
  (parameters
    '("const-ClutterGeometry*" "geometry")
  )
)

(define-method get_geometry
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_geometry")
  (return-type "none")
  (parameters
    '("ClutterGeometry*" "geometry")
  )
)

(define-method get_coords
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_coords")
  (return-type "none")
  (parameters
    '("gint*" "x1")
    '("gint*" "y1")
    '("gint*" "x2")
    '("gint*" "y2")
  )
)

(define-method set_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_size")
  (return-type "none")
  (parameters
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method set_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_position")
  (return-type "none")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method get_abs_position
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_abs_position")
  (return-type "none")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
  )
)

(define-method set_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)

(define-method set_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_height")
  (return-type "none")
  (parameters
    '("guint" "height")
  )
)

(define-method get_width
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_width")
  (return-type "guint")
)

(define-method get_height
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_height")
  (return-type "guint")
)

(define-method get_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_x")
  (return-type "gint")
)

(define-method get_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_y")
  (return-type "gint")
)

(define-method rotate_x
  (of-object "ClutterActor")
  (c-name "clutter_actor_rotate_x")
  (return-type "none")
  (parameters
    '("gfloat" "angle")
    '("gint" "y")
    '("gint" "z")
  )
)

(define-method rotate_y
  (of-object "ClutterActor")
  (c-name "clutter_actor_rotate_y")
  (return-type "none")
  (parameters
    '("gfloat" "angle")
    '("gint" "x")
    '("gint" "z")
  )
)

(define-method rotate_z
  (of-object "ClutterActor")
  (c-name "clutter_actor_rotate_z")
  (return-type "none")
  (parameters
    '("gfloat" "angle")
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method set_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_opacity")
  (return-type "none")
  (parameters
    '("guint8" "opacity")
  )
)

(define-method get_opacity
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_opacity")
  (return-type "guint8")
)

(define-method set_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_name")
  (return-type "const-gchar*")
)

(define-method get_id
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_id")
  (return-type "guint32")
)

(define-method set_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_clip")
  (return-type "none")
  (parameters
    '("gint" "xoff")
    '("gint" "yoff")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method remove_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_remove_clip")
  (return-type "none")
)

(define-method has_clip
  (of-object "ClutterActor")
  (c-name "clutter_actor_has_clip")
  (return-type "gboolean")
)

(define-method set_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_parent")
  (return-type "none")
  (parameters
    '("ClutterActor*" "parent")
  )
)

(define-method get_parent
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_parent")
  (return-type "ClutterActor*")
)

(define-method reparent
  (of-object "ClutterActor")
  (c-name "clutter_actor_reparent")
  (return-type "none")
  (parameters
    '("ClutterActor*" "new_parent")
  )
)

(define-method unparent
  (of-object "ClutterActor")
  (c-name "clutter_actor_unparent")
  (return-type "none")
)

(define-method raise
  (of-object "ClutterActor")
  (c-name "clutter_actor_raise")
  (return-type "none")
  (parameters
    '("ClutterActor*" "below")
  )
)

(define-method lower
  (of-object "ClutterActor")
  (c-name "clutter_actor_lower")
  (return-type "none")
  (parameters
    '("ClutterActor*" "above")
  )
)

(define-method raise_top
  (of-object "ClutterActor")
  (c-name "clutter_actor_raise_top")
  (return-type "none")
)

(define-method lower_bottom
  (of-object "ClutterActor")
  (c-name "clutter_actor_lower_bottom")
  (return-type "none")
)

(define-method set_depth
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_depth")
  (return-type "none")
  (parameters
    '("gint" "depth")
  )
)

(define-method get_depth
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_depth")
  (return-type "gint")
)

(define-method set_scalex
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scalex")
  (return-type "none")
  (parameters
    '("gint32" "scale_x")
    '("gint32" "scale_y")
  )
)

(define-method set_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_set_scale")
  (return-type "none")
  (parameters
    '("gdouble" "scale_x")
    '("gdouble" "scale_y")
  )
)

(define-method get_scalex
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scalex")
  (return-type "none")
  (parameters
    '("gint32*" "scale_x")
    '("gint32*" "scale_y")
  )
)

(define-method get_scale
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_scale")
  (return-type "none")
  (parameters
    '("gdouble*" "scale_x")
    '("gdouble*" "scale_y")
  )
)

(define-method get_abs_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_abs_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method get_size
  (of-object "ClutterActor")
  (c-name "clutter_actor_get_size")
  (return-type "none")
  (parameters
    '("guint*" "width")
    '("guint*" "height")
  )
)

(define-method move_by
  (of-object "ClutterActor")
  (c-name "clutter_actor_move_by")
  (return-type "none")
  (parameters
    '("gint" "dx")
    '("gint" "dy")
  )
)

(define-method show_all
  (of-object "ClutterActor")
  (c-name "clutter_actor_show_all")
  (return-type "none")
)

(define-method hide_all
  (of-object "ClutterActor")
  (c-name "clutter_actor_hide_all")
  (return-type "none")
)



;; From clutter-alpha.h

(define-function clutter_alpha_get_type
  (c-name "clutter_alpha_get_type")
  (return-type "GType")
)

(define-function clutter_alpha_new
  (c-name "clutter_alpha_new")
  (is-constructor-of "ClutterAlpha")
  (return-type "ClutterAlpha*")
)

(define-function clutter_alpha_new_full
  (c-name "clutter_alpha_new_full")
  (return-type "ClutterAlpha*")
  (parameters
    '("ClutterTimeline*" "timeline")
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method get_alpha
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_alpha")
  (return-type "guint32")
)

(define-method set_func
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_func")
  (return-type "none")
  (parameters
    '("ClutterAlphaFunc" "func")
    '("gpointer" "data")
    '("GDestroyNotify" "destroy")
  )
)

(define-method set_timeline
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_set_timeline")
  (return-type "none")
  (parameters
    '("ClutterTimeline*" "timeline")
  )
)

(define-method get_timeline
  (of-object "ClutterAlpha")
  (c-name "clutter_alpha_get_timeline")
  (return-type "ClutterTimeline*")
)

(define-function alpha_ramp_inc
  (c-name "clutter_ramp_inc_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function alpha_ramp_dec
  (c-name "clutter_ramp_dec_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function alpha_ramp
  (c-name "clutter_ramp_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)

(define-function alpha_sine
  (c-name "clutter_sine_func")
  (return-type "guint32")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gpointer" "dummy")
  )
)



;; From clutter-behaviour.h

(define-function clutter_behaviour_get_type
  (c-name "clutter_behaviour_get_type")
  (return-type "GType")
)

(define-method apply
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_apply")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method remove
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_remove")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
  )
)

(define-method actors_foreach
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_actors_foreach")
  (return-type "none")
  (parameters
    '("GFunc" "func")
    '("gpointer" "data")
  )
)

(define-method get_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_actors")
  (return-type "GSList*")
)

(define-method get_n_actors
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_n_actors")
  (return-type "gint")
)

(define-method get_nth_actor
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_nth_actor")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index")
  )
)

(define-method get_alpha
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_get_alpha")
  (return-type "ClutterAlpha*")
)

(define-method set_alpha
  (of-object "ClutterBehaviour")
  (c-name "clutter_behaviour_set_alpha")
  (return-type "none")
  (parameters
    '("ClutterAlpha*" "alpha")
  )
)

(define-virtual alpha_notify
  (of-object "ClutterBehaviour")
  (return-type "none")
  (parameters
    '("guint32" "alpha_value")
  )
)



;; From clutter-behaviour-opacity.h

(define-function clutter_behaviour_opacity_get_type
  (c-name "clutter_behaviour_opacity_get_type")
  (return-type "GType")
)

(define-function clutter_behaviour_opacity_new
  (c-name "clutter_behaviour_opacity_new")
  (is-constructor-of "ClutterBehaviourOpacity")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (argname "alpha") (optional))
    '("opacity-start" (argname "opacity") (optional))
    '("opacity-end" (argname "opacity") (optional))
  )
)



;; From clutter-behaviour-path.h

(define-function clutter_knot_get_type
  (c-name "clutter_knot_get_type")
  (return-type "GType")
)

(define-function clutter_behaviour_path_get_type
  (c-name "clutter_behaviour_path_get_type")
  (return-type "GType")
)

(define-method copy
  (of-object "ClutterKnot")
  (c-name "clutter_knot_copy")
  (return-type "ClutterKnot*")
)

(define-method free
  (of-object "ClutterKnot")
  (c-name "clutter_knot_free")
  (return-type "none")
)

(define-method equal
  (of-object "ClutterKnot")
  (c-name "clutter_knot_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterKnot*" "knot_b")
  )
)

(define-function clutter_behaviour_path_new
  (c-name "clutter_behaviour_path_new")
  (is-constructor-of "ClutterBehaviourPath")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("const-ClutterKnot*" "knots")
    '("guint" "n_knots")
  )
)

(define-method get_knots
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_get_knots")
  (return-type "GSList*")
)

(define-method append_knot
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_append_knot")
  (return-type "none")
  (parameters
    '("const-ClutterKnot*" "knot")
  )
)

(define-method append_knots
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_append_knots")
  (return-type "none")
  (parameters
    '("const-ClutterKnot*" "first_knot")
  )
  (varargs #t)
)

(define-method insert_knot
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_insert_knot")
  (return-type "none")
  (parameters
    '("guint" "offset")
    '("const-ClutterKnot*" "knot")
  )
)

(define-method remove_knot
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_remove_knot")
  (return-type "none")
  (parameters
    '("guint" "offset")
  )
)

(define-method clear
  (of-object "ClutterBehaviourPath")
  (c-name "clutter_behaviour_path_clear")
  (return-type "none")
)



;; From clutter-behaviour-scale.h

(define-function clutter_behaviour_scale_get_type
  (c-name "clutter_behaviour_scale_get_type")
  (return-type "GType")
)

(define-function clutter_behaviour_scale_new
  (c-name "clutter_behaviour_scale_new")
  (is-constructor-of "ClutterBehaviourScale")
  (return-type "ClutterBehaviour*")
  (properties
    '("alpha" (argname "alpha") (optional))
    '("scale-begin" (argname "scale") (optional))
    '("scale-end" (argname "scale") (optional))
    '("scale-gravity" (argname "gravity") (optional))
  )
)

(define-function clutter_behaviour_scale_newx
  (c-name "clutter_behaviour_scale_newx")
  (return-type "ClutterBehaviour*")
  (parameters
    '("ClutterAlpha*" "alpha")
    '("gint32" "scale_begin")
    '("gint32" "scale_end")
    '("ClutterGravity" "gravity")
  )
)



;; From clutter-clone-texture.h

(define-function clutter_clone_texture_get_type
  (c-name "clutter_clone_texture_get_type")
  (return-type "GType")
)

(define-function clutter_clone_texture_new
  (c-name "clutter_clone_texture_new")
  (is-constructor-of "ClutterCloneTexture")
  (return-type "ClutterActor*")
  (properties
    '("parent-texture" (argname "texture"))
  )
)

(define-method get_parent_texture
  (of-object "ClutterCloneTexture")
  (c-name "clutter_clone_texture_get_parent_texture")
  (return-type "ClutterTexture*")
)

(define-method set_parent_texture
  (of-object "ClutterCloneTexture")
  (c-name "clutter_clone_texture_set_parent_texture")
  (return-type "none")
  (parameters
    '("ClutterTexture*" "texture")
  )
)



;; From clutter-color.h

(define-function clutter_color_get_type
  (c-name "clutter_color_get_type")
  (return-type "GType")
)

(define-function color_new
  (c-name "clutter_color_new")
  (is-constructor-of "ClutterColor")
  (return-type "ClutterColor")
)

(define-function color_parse
  (c-name "clutter_color_parse")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "color")
    '("ClutterColor*" "dest")
  )
)

(define-method copy
  (of-object "ClutterColor")
  (c-name "clutter_color_copy")
  (return-type "ClutterColor*")
)

(define-method free
  (of-object "ClutterColor")
  (c-name "clutter_color_free")
  (return-type "none")
)

(define-method to_string
  (of-object "ClutterColor")
  (c-name "clutter_color_to_string")
  (return-type "gchar*")
)

(define-method shadex
  (of-object "ClutterColor")
  (c-name "clutter_color_shadex")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
    '("ClutterFixed" "shade")
  )
)

(define-method add
  (of-object "ClutterColor")
  (c-name "clutter_color_add")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "src2")
    '("ClutterColor*" "dest")
  )
)

(define-method subtract
  (of-object "ClutterColor")
  (c-name "clutter_color_subtract")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "src2")
    '("ClutterColor*" "dest")
  )
)

(define-function color_equal
  (c-name "clutter_color_equal")
  (return-type "gboolean")
  (parameters
    '("const-ClutterColor*" "a")
    '("const-ClutterColor*" "b")
  )
)

(define-method lighten
  (of-object "ClutterColor")
  (c-name "clutter_color_lighten")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
  )
)

(define-method darken
  (of-object "ClutterColor")
  (c-name "clutter_color_darken")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
  )
)

(define-method shade
  (of-object "ClutterColor")
  (c-name "clutter_color_shade")
  (return-type "none")
  (parameters
    '("ClutterColor*" "dest")
    '("gdouble" "shade")
  )
)

(define-method to_hls
  (of-object "ClutterColor")
  (c-name "clutter_color_to_hls")
  (return-type "none")
  (parameters
    '("guint8*" "hue")
    '("guint8*" "luminance")
    '("guint8*" "saturation")
  )
)

(define-function color_from_hls
  (c-name "clutter_color_from_hls")
  (return-type "none")
  (parameters
    '("guint8" "hue")
    '("guint8" "luminance")
    '("guint8" "saturation")
  )
)

(define-method to_pixel
  (of-object "ClutterColor")
  (c-name "clutter_color_to_pixel")
  (return-type "guint32")
)

(define-function color_from_pixel
  (c-name "clutter_color_from_pixel")
  (return-type "none")
  (parameters
    '("guint32" "pixel")
  )
)



;; From clutter-enum-types.h

(define-function clutter_event_type_get_type
  (c-name "clutter_event_type_get_type")
  (return-type "GType")
)

(define-function clutter_feature_flags_get_type
  (c-name "clutter_feature_flags_get_type")
  (return-type "GType")
)

(define-function clutter_actor_flags_get_type
  (c-name "clutter_actor_flags_get_type")
  (return-type "GType")
)

(define-function clutter_gravity_get_type
  (c-name "clutter_gravity_get_type")
  (return-type "GType")
)

(define-function clutter_init_error_get_type
  (c-name "clutter_init_error_get_type")
  (return-type "GType")
)



;; From clutter-event.h

(define-function clutter_event_get_type
  (c-name "clutter_event_get_type")
  (return-type "GType")
)

(define-function clutter_event_new
  (c-name "clutter_event_new")
  (is-constructor-of "ClutterEvent")
  (return-type "ClutterEvent*")
  (parameters
    '("ClutterEventType" "type")
  )
)

(define-method type
  (of-object "ClutterEvent")
  (c-name "clutter_event_type")
  (return-type "ClutterEventType")
)

(define-method time
  (of-object "ClutterButtonEvent")
  (c-name "clutter_button_event_time")
  (return-type "guint32")
)

(define-method copy
  (of-object "ClutterEvent")
  (c-name "clutter_event_copy")
  (return-type "ClutterEvent*")
)

(define-method free
  (of-object "ClutterEvent")
  (c-name "clutter_event_free")
  (return-type "none")
)


(define-method time
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_time")
  (return-type "guint32")
)

(define-method state
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_state")
  (return-type "guint")
)

(define-method x
  (of-object "ClutterButtonEvent")
  (c-name "clutter_button_event_x")
  (return-type "gint")
)

(define-method y
  (of-object "ClutterButtonEvent")
  (c-name "clutter_button_event_y")
  (return-type "gint")
)

(define-method symbol
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_symbol")
  (return-type "guint")
)

(define-method code
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_code")
  (return-type "guint16")
)

(define-method unicode
  (of-object "ClutterKeyEvent")
  (c-name "clutter_key_event_unicode")
  (return-type "guint32")
)

(define-function clutter_keysym_to_unicode
  (c-name "clutter_keysym_to_unicode")
  (return-type "guint32")
  (parameters
    '("guint" "keyval")
  )
)



;; From clutter-feature.h

(define-function clutter_feature_get_all
  (c-name "clutter_feature_get_all")
  (return-type "ClutterFeatureFlags")
)

(define-function feature_available
  (c-name "clutter_feature_available")
  (return-type "gboolean")
  (parameters
    '("ClutterFeatureFlags" "feature")
  )
)


;; From clutter-fixed.h



;; From clutter-group.h

(define-function clutter_group_get_type
  (c-name "clutter_group_get_type")
  (return-type "GType")
)

(define-function clutter_group_new
  (c-name "clutter_group_new")
  (is-constructor-of "ClutterGroup")
  (return-type "ClutterActor*")
)

(define-method get_nth_child
  (of-object "ClutterGroup")
  (c-name "clutter_group_get_nth_child")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "index")
  )
)

(define-method get_n_children
  (of-object "ClutterGroup")
  (c-name "clutter_group_get_n_children")
  (return-type "gint")
)

(define-method find_child_by_id
  (of-object "ClutterGroup")
  (c-name "clutter_group_find_child_by_id")
  (return-type "ClutterActor*")
  (parameters
    '("guint" "id")
  )
)

(define-method raise
  (of-object "ClutterGroup")
  (c-name "clutter_group_raise")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling")
  )
)

(define-method lower
  (of-object "ClutterGroup")
  (c-name "clutter_group_lower")
  (return-type "none")
  (parameters
    '("ClutterActor*" "actor")
    '("ClutterActor*" "sibling")
  )
)

(define-method sort_depth_order
  (of-object "ClutterGroup")
  (c-name "clutter_group_sort_depth_order")
  (return-type "none")
)



;; From clutter.h



;; From clutter-keysyms.h



;; From clutter-label.h

(define-function clutter_label_get_type
  (c-name "clutter_label_get_type")
  (return-type "GType")
)

(define-function clutter_label_new
  (c-name "clutter_label_new")
  (is-constructor-of "ClutterLabel")
  (return-type "ClutterActor*")
)

(define-function clutter_label_new_with_text
  (c-name "clutter_label_new_with_text")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
  )
)

(define-function label_new_full
  (c-name "clutter_label_new_full")
  (return-type "ClutterActor*")
  (parameters
    '("const-gchar*" "font_name")
    '("const-gchar*" "text")
    '("ClutterColor*" "color")
  )
)

(define-method set_text
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method get_text
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_text")
  (return-type "const-gchar*")
)

(define-method set_font_name
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_font_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "font_name")
  )
)

(define-method get_font_name
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_font_name")
  (return-type "const-gchar*")
)

(define-method set_color
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_ellipsize
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_ellipsize")
  (return-type "none")
  (parameters
    '("PangoEllipsizeMode" "mode")
  )
)

(define-method get_ellipsize
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_ellipsize")
  (return-type "PangoEllipsizeMode")
)

(define-method set_line_wrap
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_line_wrap")
  (return-type "none")
  (parameters
    '("gboolean" "wrap")
  )
)

(define-method get_line_wrap
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_line_wrap")
  (return-type "gboolean")
)

(define-method set_line_wrap_mode
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_line_wrap_mode")
  (return-type "none")
  (parameters
    '("PangoWrapMode" "wrap_mode")
  )
)

(define-method get_line_wrap_mode
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_line_wrap_mode")
  (return-type "PangoWrapMode")
)

(define-method get_layout
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_layout")
  (return-type "PangoLayout*")
)

(define-method set_attributes
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_attributes")
  (return-type "none")
  (parameters
    '("PangoAttrList*" "attrs")
  )
)

(define-method get_attributes
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_attributes")
  (return-type "PangoAttrList*")
)

(define-method set_use_markup
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_use_markup")
  (return-type "none")
  (parameters
    '("gboolean" "setting")
  )
)

(define-method get_use_markup
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_use_markup")
  (return-type "gboolean")
)

(define-method set_alignment
  (of-object "ClutterLabel")
  (c-name "clutter_label_set_alignment")
  (return-type "none")
  (parameters
    '("PangoAlignment" "alignment")
  )
)

(define-method get_alignment
  (of-object "ClutterLabel")
  (c-name "clutter_label_get_alignment")
  (return-type "gboolean")
)



;; From clutter-main.h

(define-function init_error_quark
  (c-name "clutter_init_error_quark")
  (return-type "GQuark")
)

(define-function init_with_args
  (c-name "clutter_init_with_args")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
    '("char*" "parameter_string")
    '("GOptionEntry*" "entries")
    '("char*" "translation_domain")
    '("GError**" "error")
  )
)

(define-function get_option_group
  (c-name "clutter_get_option_group")
  (return-type "GOptionGroup*")
)

(define-function clutter_init
  (c-name "clutter_init")
  (return-type "ClutterInitError")
  (parameters
    '("int*" "argc")
    '("char***" "argv")
  )
)

(define-function main
  (c-name "clutter_main")
  (return-type "none")
)

(define-function main_quit
  (c-name "clutter_main_quit")
  (return-type "none")
)

(define-function main_level
  (c-name "clutter_main_level")
  (return-type "gint")
)

(define-function redraw
  (c-name "clutter_redraw")
  (return-type "none")
  (parameters
  )
)

(define-function get_xdisplay
  (c-name "clutter_xdisplay")
  (return-type "Display*")
)

(define-function get_xscreen
  (c-name "clutter_xscreen")
  (return-type "int")
)

(define-function get_root_xwindow
  (c-name "clutter_root_xwindow")
  (return-type "Window")
)

(define-function want_debug
  (c-name "clutter_want_debug")
  (return-type "gboolean")
)

(define-function threads_enter
  (c-name "clutter_threads_enter")
  (return-type "none")
)

(define-function threads_leave
  (c-name "clutter_threads_leave")
  (return-type "none")
)



;; From clutter-marshal.h



;; From clutter-media.h

(define-function clutter_media_get_type
  (c-name "clutter_media_get_type")
  (return-type "GType")
)

(define-virtual set_uri
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("const-char*" "uri")
  )
)

(define-method set_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_uri")
  (return-type "none")
  (parameters
    '("const-char*" "uri")
  )
)

(define-virtual get_uri
  (of-object "ClutterMedia")
  (return-type "const-char*")
)

(define-method get_uri
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_uri")
  (return-type "const-char*")
)

(define-virtual set_playing
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("gboolean" "playing")
  )
)

(define-method set_playing
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_playing")
  (return-type "none")
  (parameters
    '("gboolean" "playing")
  )
)

(define-virtual get_playing
  (of-object "ClutterMedia")
  (return-type "gboolean")
)

(define-method get_playing
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_playing")
  (return-type "gboolean")
)

(define-virtual set_position
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("int" "position")
  )
)

(define-method set_position
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_position")
  (return-type "none")
  (parameters
    '("int" "position")
  )
)

(define-virtual get_position
  (of-object "ClutterMedia")
  (return-type "int")
)

(define-method get_position
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_position")
  (return-type "int")
)

(define-virtual set_volume
  (of-object "ClutterMedia")
  (return-type "none")
  (parameters
    '("double" "volume")
  )
)

(define-method set_volume
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_volume")
  (return-type "none")
  (parameters
    '("double" "volume")
  )
)

(define-virtual get_volume
  (of-object "ClutterMedia")
  (return-type "double")
)

(define-method get_volume
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_volume")
  (return-type "double")
)

(define-virtual can_seek
  (of-object "ClutterMedia")
  (return-type "gboolean")
)

(define-method get_can_seek
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_can_seek")
  (return-type "gboolean")
)

(define-virtual get_buffer_percent
  (of-object "ClutterMedia")
  (return-type "int")
)

(define-method get_buffer_percent
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_buffer_percent")
  (return-type "int")
)

(define-virtual get_duration
  (of-object "ClutterMedia")
  (return-type "int")
)

(define-method get_duration
  (of-object "ClutterMedia")
  (c-name "clutter_media_get_duration")
  (return-type "int")
)

(define-method set_filename
  (of-object "ClutterMedia")
  (c-name "clutter_media_set_filename")
  (return-type "none")
  (parameters
    '("const-gchar*" "filename")
  )
)



;; From clutter-rectangle.h

(define-function clutter_rectangle_get_type
  (c-name "clutter_rectangle_get_type")
  (return-type "GType")
)

(define-function clutter_rectangle_new
  (c-name "clutter_rectangle_new")
  (is-constructor-of "ClutterRectangle")
  (return-type "ClutterActor*")
)

(define-function clutter_rectangle_new_with_color
  (c-name "clutter_rectangle_new_with_color")
  (return-type "ClutterActor*")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_border_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_border_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method set_border_color
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_border_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_border_width
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_get_border_width")
  (return-type "guint")
)

(define-method set_border_width
  (of-object "ClutterRectangle")
  (c-name "clutter_rectangle_set_border_width")
  (return-type "none")
  (parameters
    '("guint" "width")
  )
)



;; From clutter-stage.h

(define-function clutter_stage_get_type
  (c-name "clutter_stage_get_type")
  (return-type "GType")
)

(define-function stage_get_default
  (c-name "clutter_stage_get_default")
  (return-type "ClutterActor*")
)

(define-method get_xwindow
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_xwindow")
  (return-type "Window")
)

(define-method set_xwindow_foreign
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_xwindow_foreign")
  (return-type "gboolean")
  (parameters
    '("Window" "xid")
  )
)

(define-method set_color
  (of-object "ClutterStage")
  (c-name "clutter_stage_set_color")
  (return-type "none")
  (parameters
    '("const-ClutterColor*" "color")
  )
)

(define-method get_color
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_color")
  (return-type "none")
  (parameters
    '("ClutterColor*" "color")
  )
)

(define-method get_actor_at_pos
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_actor_at_pos")
  (return-type "ClutterActor*")
  (parameters
    '("gint" "x")
    '("gint" "y")
  )
)

(define-method snapshot
  (of-object "ClutterStage")
  (c-name "clutter_stage_snapshot")
  (return-type "GdkPixbuf*")
  (parameters
    '("gint" "x")
    '("gint" "y")
    '("gint" "width")
    '("gint" "height")
  )
)

(define-method get_xvisual
  (of-object "ClutterStage")
  (c-name "clutter_stage_get_xvisual")
  (return-type "const-XVisualInfo*")
)



;; From clutter-texture.h

(define-function clutter_texture_get_type
  (c-name "clutter_texture_get_type")
  (return-type "GType")
)

(define-function clutter_texture_new_from_pixbuf
  (c-name "clutter_texture_new_from_pixbuf")
  (return-type "ClutterActor*")
  (parameters
    '("GdkPixbuf*" "pixbuf")
  )
)

(define-function clutter_texture_new
  (c-name "clutter_texture_new")
  (is-constructor-of "ClutterTexture")
  (return-type "ClutterActor*")
)

(define-method set_from_rgb_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_rgb_data")
  (return-type "none")
  (parameters
    '("const-guchar*" "data")
    '("gboolean" "has_alpha")
    '("gint" "width")
    '("gint" "height")
    '("gint" "rowstride")
    '("gint" "bpp")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_from_yuv_data
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_from_yuv_data")
  (return-type "none")
  (parameters
    '("const-guchar*" "data")
    '("gint" "width")
    '("gint" "height")
    '("ClutterTextureFlags" "flags")
    '("GError**" "error")
  )
)

(define-method set_pixbuf
  (of-object "ClutterTexture")
  (c-name "clutter_texture_set_pixbuf")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf")
    '("GError**" "error")
  )
)

(define-method get_pixbuf
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_pixbuf")
  (return-type "GdkPixbuf*")
)

(define-method get_base_size
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_base_size")
  (return-type "none")
  (parameters
    '("gint*" "width")
    '("gint*" "height")
  )
)

(define-method bind_tile
  (of-object "ClutterTexture")
  (c-name "clutter_texture_bind_tile")
  (return-type "none")
  (parameters
    '("gint" "index")
  )
)

(define-method get_n_tiles
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_n_tiles")
  (return-type "none")
  (parameters
    '("gint*" "n_x_tiles")
    '("gint*" "n_y_tiles")
  )
)

(define-method get_x_tile_detail
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_x_tile_detail")
  (return-type "none")
  (parameters
    '("gint" "x_index")
    '("gint*" "pos")
    '("gint*" "size")
    '("gint*" "waste")
  )
)

(define-method get_y_tile_detail
  (of-object "ClutterTexture")
  (c-name "clutter_texture_get_y_tile_detail")
  (return-type "none")
  (parameters
    '("gint" "y_index")
    '("gint*" "pos")
    '("gint*" "size")
    '("gint*" "waste")
  )
)

(define-method has_generated_tiles
  (of-object "ClutterTexture")
  (c-name "clutter_texture_has_generated_tiles")
  (return-type "gboolean")
)

(define-method is_tiled
  (of-object "ClutterTexture")
  (c-name "clutter_texture_is_tiled")
  (return-type "gboolean")
)



;; From clutter-timeline.h

(define-function clutter_timeline_get_type
  (c-name "clutter_timeline_get_type")
  (return-type "GType")
)

(define-function clutter_timeline_new
  (c-name "clutter_timeline_new")
  (is-constructor-of "ClutterTimeline")
  (return-type "ClutterTimeline*")
  (properties
    '("num-frames" (argname "frames"))
    '("fps" (argname "fps"))
  )
)

(define-method get_speed
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_speed")
  (return-type "guint")
)

(define-method set_speed
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_speed")
  (return-type "none")
  (parameters
    '("guint" "fps")
  )
)

(define-method start
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_start")
  (return-type "none")
)

(define-method pause
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_pause")
  (return-type "none")
)

(define-method stop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_stop")
  (return-type "none")
)

(define-method set_loop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_loop")
  (return-type "none")
  (parameters
    '("gboolean" "loop")
  )
)

(define-method get_loop
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_loop")
  (return-type "gboolean")
)

(define-method rewind
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_rewind")
  (return-type "none")
)

(define-method skip
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_skip")
  (return-type "none")
  (parameters
    '("guint" "n_frames")
  )
)

(define-method advance
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_advance")
  (return-type "none")
  (parameters
    '("guint" "frame_num")
  )
)

(define-method get_current_frame
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_current_frame")
  (return-type "gint")
)

(define-method set_n_frames
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_set_n_frames")
  (return-type "none")
  (parameters
    '("guint" "n_frames")
  )
)

(define-method get_n_frames
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_get_n_frames")
  (return-type "guint")
)

(define-method is_playing
  (of-object "ClutterTimeline")
  (c-name "clutter_timeline_is_playing")
  (return-type "gboolean")
)



;; From clutter-util.h

(define-function clutter_util_trap_x_errors
  (c-name "clutter_util_trap_x_errors")
  (return-type "none")
)

(define-function clutter_util_untrap_x_errors
  (c-name "clutter_util_untrap_x_errors")
  (return-type "int")
)

(define-function clutter_util_next_p2
  (c-name "clutter_util_next_p2")
  (return-type "int")
  (parameters
    '("int" "a")
  )
)
