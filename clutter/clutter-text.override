%%
override clutter_text_set_color kwargs
static PyObject *
_wrap_clutter_text_set_color (PyGObject *self,
                              PyObject  *args,
                              PyObject  *kwargs)
{
        static char *kwlist[] = { "color", NULL };
        PyObject *py_color;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterText.set_color", kwlist,
                                          &py_color)) {
                return NULL;
        }

        if (!pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR)) {
                if (!pyclutter_color_from_pyobject (py_color, &color)) {
                        PyErr_Clear ();
                        PyErr_SetString (PyExc_TypeError,
                                         "color must be a ClutterColor or 4-tuple");
                        return NULL;
                }
        }
        else {
                color = *pyg_boxed_get (py_color, ClutterColor);
        }

        clutter_text_set_color (CLUTTER_TEXT (self->obj), &color);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_text_get_color noargs
static PyObject *
_wrap_clutter_text_get_color (PyGObject *self)
{
	ClutterColor color = { 0, };

	clutter_text_get_color (CLUTTER_TEXT (self->obj), &color);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_text_set_cursor_color kwargs
static PyObject *
_wrap_clutter_text_set_cursor_color (PyGObject *self,
                                     PyObject  *args,
                                     PyObject  *kwargs)
{
        static char *kwlist[] = { "color", NULL };
        PyObject *py_color;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterText.set_cursor_color",
                                          kwlist,
                                          &py_color)) {
                return NULL;
        }

        if (!pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR)) {
                if (!pyclutter_color_from_pyobject (py_color, &color)) {
                        PyErr_Clear ();
                        PyErr_SetString (PyExc_TypeError,
                                         "color must be a ClutterColor or 4-tuple");
                        return NULL;
                }
        }
        else {
                color = *pyg_boxed_get (py_color, ClutterColor);
        }

        clutter_text_set_cursor_color (CLUTTER_TEXT (self->obj), &color);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_text_get_cursor_color noargs
static PyObject *
_wrap_clutter_text_get_cursor_color (PyGObject *self)
{
	ClutterColor color = { 0, };

	clutter_text_get_cursor_color (CLUTTER_TEXT (self->obj), &color);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_text_set_selection_color kwargs
static PyObject *
_wrap_clutter_text_set_selection_color (PyGObject *self,
                                        PyObject  *args,
                                        PyObject  *kwargs)
{
        static char *kwlist[] = { "color", NULL };
        PyObject *py_color;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterText.set_selection_color",
                                          kwlist,
                                          &py_color)) {
                return NULL;
        }

        if (!pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR)) {
                if (!pyclutter_color_from_pyobject (py_color, &color)) {
                        PyErr_Clear ();
                        PyErr_SetString (PyExc_TypeError,
                                         "color must be a ClutterColor or 4-tuple");
                        return NULL;
                }
        }
        else {
                color = *pyg_boxed_get (py_color, ClutterColor);
        }

        clutter_text_set_selection_color (CLUTTER_TEXT (self->obj), &color);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_text_get_selection_color noargs
static PyObject *
_wrap_clutter_text_get_selection_color (PyGObject *self)
{
	ClutterColor color = { 0, };

	clutter_text_get_selection_color (CLUTTER_TEXT (self->obj), &color);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_text_position_to_coords kwargs
static PyObject *
_wrap_clutter_text_position_to_coords (PyGObject *self,
                                       PyObject  *args,
                                       PyObject  *kwargs)
{
    static char *kwlist[] = { "position", NULL };
    gint position;
    gfloat x, y, line_height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "i:ClutterText.position_to_coords", kwlist, &position))
        return NULL;

    clutter_text_position_to_coords (CLUTTER_TEXT (self->obj), position, &x, &y, &line_height);
    return Py_BuildValue ("(ddd)", x, y, line_height);
}
%%
