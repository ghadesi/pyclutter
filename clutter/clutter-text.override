%%
override clutter_text_set_color kwargs
static PyObject *
_wrap_clutter_text_set_color (PyGObject *self,
                              PyObject  *args,
                              PyObject  *kwargs)
{
        static char *kwlist[] = { "color", NULL };
        PyObject *py_color;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterText.set_color", kwlist,
                                          &py_color)) {
                return NULL;
        }

        if (!pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR)) {
                if (!pyclutter_color_from_pyobject (py_color, &color)) {
                        PyErr_Clear ();
                        PyErr_SetString (PyExc_TypeError,
                                         "color must be a ClutterColor or 4-tuple");
                        return NULL;
                }
        }
        else {
                color = *pyg_boxed_get (py_color, ClutterColor);
        }

        clutter_text_set_color (CLUTTER_TEXT (self->obj), &color);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_text_get_color noargs
static PyObject *
_wrap_clutter_text_get_color (PyGObject *self)
{
	ClutterColor color = { 0, };

	clutter_text_get_color (CLUTTER_TEXT (self->obj), &color);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_text_set_cursor_color kwargs
static PyObject *
_wrap_clutter_text_set_cursor_color (PyGObject *self,
                                     PyObject  *args,
                                     PyObject  *kwargs)
{
        static char *kwlist[] = { "color", NULL };
        PyObject *py_color;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterText.set_cursor_color",
                                          kwlist,
                                          &py_color)) {
                return NULL;
        }

        if (!pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR)) {
                if (!pyclutter_color_from_pyobject (py_color, &color)) {
                        PyErr_Clear ();
                        PyErr_SetString (PyExc_TypeError,
                                         "color must be a ClutterColor or 4-tuple");
                        return NULL;
                }
        }
        else {
                color = *pyg_boxed_get (py_color, ClutterColor);
        }

        clutter_text_set_cursor_color (CLUTTER_TEXT (self->obj), &color);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_text_get_cursor_color noargs
static PyObject *
_wrap_clutter_text_get_cursor_color (PyGObject *self)
{
	ClutterColor color = { 0, };

	clutter_text_get_cursor_color (CLUTTER_TEXT (self->obj), &color);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_text_set_selection_color kwargs
static PyObject *
_wrap_clutter_text_set_selection_color (PyGObject *self,
                                        PyObject  *args,
                                        PyObject  *kwargs)
{
        static char *kwlist[] = { "color", NULL };
        PyObject *py_color;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterText.set_selection_color",
                                          kwlist,
                                          &py_color)) {
                return NULL;
        }

        if (!pyg_boxed_check (py_color, CLUTTER_TYPE_COLOR)) {
                if (!pyclutter_color_from_pyobject (py_color, &color)) {
                        PyErr_Clear ();
                        PyErr_SetString (PyExc_TypeError,
                                         "color must be a ClutterColor or 4-tuple");
                        return NULL;
                }
        }
        else {
                color = *pyg_boxed_get (py_color, ClutterColor);
        }

        clutter_text_set_selection_color (CLUTTER_TEXT (self->obj), &color);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_text_get_selection_color noargs
static PyObject *
_wrap_clutter_text_get_selection_color (PyGObject *self)
{
	ClutterColor color = { 0, };

	clutter_text_get_selection_color (CLUTTER_TEXT (self->obj), &color);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_text_position_to_coords kwargs
static PyObject *
_wrap_clutter_text_position_to_coords (PyGObject *self,
                                       PyObject  *args,
                                       PyObject  *kwargs)
{
    static char *kwlist[] = { "position", NULL };
    gint position;
    gfloat x, y, line_height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "i:ClutterText.position_to_coords", kwlist, &position))
        return NULL;

    clutter_text_position_to_coords (CLUTTER_TEXT (self->obj), position, &x, &y, &line_height);
    return Py_BuildValue ("(ddd)", x, y, line_height);
}
%%
override clutter_text_set_preedit_string kwargs
static PyObject *
_wrap_clutter_text_set_preedit_string (PyGObject *self,
                                       PyObject  *args,
                                       PyObject *kwargs)
{
#if CLUTTER_CHECK_VERSION (1, 0, 8)
    static char *kwlist[] = { "preedit_str", "preedit_attr", "cursor_position", NULL };
    gchar *preedit_str = NULL;
    PyObject *py_preedit_attr = NULL;
    PangoAttrList *preedit_attr = NULL;
    guint cursor_position = 0;

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                      "|sOI:Clutter.Text.set_preedit_string",
                                      kwlist, &preedit_str, &py_preedit_attr,
                                      &cursor_position))
        return NULL;

    if (py_preedit_attr == NULL || py_preedit_attr == Py_None)
        preedit_attr = NULL;
    else if (pyg_boxed_check (py_preedit_attr, PANGO_TYPE_ATTR_LIST))
        preedit_attr = pyg_boxed_get (py_preedit_attr, PangoAttrList);
    else {
        PyErr_SetString(PyExc_TypeError,
                        "preedit_attr should be a PangoAttrList or None");
        return NULL;
    }

    clutter_text_set_preedit_string (CLUTTER_TEXT (self->obj), preedit_str,
                                     preedit_attr, cursor_position);
    
    Py_INCREF (Py_None);
    return Py_None;
#else
    PyErr_SetString (PyExc_Exception,
                     "You have to use pyclutter with at least clutter-1.0.8 "
                     "to use clutter.Text.set_preedit_string");
    return NULL;
#endif
}
