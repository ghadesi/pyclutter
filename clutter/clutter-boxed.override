%%
ignore
  clutter_knot_free
  clutter_actor_box_from_vertices
  clutter_actor_box_get_size
  clutter_actor_box_get_origin
%%
override clutter_geometry_new kwargs
static int
_wrap_clutter_geometry_new (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = { "x", "y", "width", "height", NULL };
	ClutterGeometry geom = { 0, 0, 0, 0 };

	if (!PyArg_ParseTupleAndKeywords(args, kwargs,
					 "|iiii:ClutterGeometry.__init__",
					 kwlist,
					 &(geom.x), &(geom.y),
					 &(geom.width), &(geom.height)))
		return -1;
	
	self->boxed = g_boxed_copy (CLUTTER_TYPE_GEOMETRY, &geom);
	self->free_on_dealloc = TRUE;
	self->gtype = CLUTTER_TYPE_GEOMETRY;
	
	return 0;
}
%%
override-slot ClutterGeometry.tp_as_sequence
static int
_wrap_clutter_geometry_length (PyGBoxed *self)
{
	return 4;
}
static PyObject *
_wrap_clutter_geometry_getitem (PyGBoxed *self, Py_ssize_t pos)
{
	ClutterGeometry *geom;

	if (pos < 0)
		pos += 4;
	
	if (pos < 0 || pos >= 4) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return NULL;
	}

	geom = pyg_boxed_get (self, ClutterGeometry);
	switch (pos) {
		case 0: return PyInt_FromLong (geom->x);
		case 1: return PyInt_FromLong (geom->y);
		case 2: return PyInt_FromLong (geom->width);
		case 3: return PyInt_FromLong (geom->height);
		default:
			g_assert_not_reached();
			return NULL;
	}
}
static int
_wrap_clutter_geometry_setitem (PyGBoxed *self, int pos, PyObject *value)
{
	ClutterGeometry *geom;
	gint val;

	if (pos < 0)
		pos += 4;
	
	if (pos < 0 || pos >= 4) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return -1;
	}

	geom = pyg_boxed_get (self, ClutterGeometry);
	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;
	
	switch(pos) {
		case 0: geom->x      = val; break;
		case 1: geom->y      = val; break;
		case 2: geom->width  = val; break;
		case 3: geom->height = val; break;
		default:
			g_assert_not_reached();
			return -1;
	}

	return 0;
}
static PySequenceMethods _wrap_clutter_geometry_tp_as_sequence = {
	(lenfunc) _wrap_clutter_geometry_length,
	0,
	0,
	(ssizeargfunc) _wrap_clutter_geometry_getitem,
	0,
	(ssizeobjargproc) _wrap_clutter_geometry_setitem,
        0
};
%%
override-slot ClutterGeometry.tp_richcompare
static PyObject *
_wrap_clutter_geometry_tp_richcompare (PyObject *a, PyObject *b, int op)
{
  ClutterGeometry *g_a, *g_b;

  if (!pyg_boxed_check (b, CLUTTER_TYPE_GEOMETRY)) {
      if (op == Py_NE) {
          Py_RETURN_TRUE;
      } else {
          Py_RETURN_FALSE;
      }
  }

  g_a = pyg_boxed_get (a, ClutterGeometry);
  g_b = pyg_boxed_get (b, ClutterGeometry);

  switch (op)
    {
    case Py_EQ:
      if ((g_a->x == g_b->x) && (g_a->y == g_b->y) &&
          (g_a->width == g_b->width) && (g_a->height == g_b->height))
        Py_RETURN_TRUE;
      else
        Py_RETURN_FALSE;
    case Py_NE:
      if ((g_a->x == g_b->x) && (g_a->y == g_b->y) &&
          (g_a->width == g_b->width) && (g_a->height == g_b->height))
        Py_RETURN_FALSE;
      else
        Py_RETURN_TRUE;
    default:
      PyErr_SetString (PyExc_TypeError,
                       "only '==' and '!=' comparisons are allowed");
      return NULL;
    }
}
%%
override-attr ClutterGeometry.x
static int
_wrap_clutter_geometry__set_x (PyGBoxed *self, PyObject *value, void *closure)
{
	gint val;

	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterGeometry)->x = val;

	return 0;
}
%%
override-attr ClutterGeometry.y
static int
_wrap_clutter_geometry__set_y (PyGBoxed *self, PyObject *value, void *closure)
{
	gint val;

	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterGeometry)->y = val;

	return 0;
}
%%
override-attr ClutterGeometry.width
static int
_wrap_clutter_geometry__set_width (PyGBoxed *self, PyObject *value, void *closure)
{
	gint val;

	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
        	return -1;
	
	pyg_boxed_get(self, ClutterGeometry)->width = val;
	
	return 0;
}
%%
override-attr ClutterGeometry.height
static int
_wrap_clutter_geometry__set_height (PyGBoxed *self, PyObject *value, void *closure)
{
	gint val;

	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;
	
	pyg_boxed_get (self, ClutterGeometry)->height = val;

	return 0;
}
%%
override-slot ClutterGeometry.tp_str
static PyObject *
_wrap_clutter_geometry_tp_str (PyObject *self)
{
  ClutterGeometry *geometry;
  gchar *str = NULL;
  PyObject *py_str;

  geometry = pyg_boxed_get (self, ClutterGeometry);

  str = g_strdup_printf ("<ClutterGeometry: x=%i, y=%i, width=%i, height=%i>",
                         geometry->x, geometry->y,
                         geometry->width, geometry->height);

  py_str = PyString_FromString (str);
  g_free (str);
  return py_str;
}
%%
override-slot ClutterGeometry.tp_repr
static PyObject *
_wrap_clutter_geometry_tp_repr (PyObject *self)
{
  ClutterGeometry *geometry;
  gchar *str = NULL;
  PyObject *py_str;

  geometry = pyg_boxed_get (self, ClutterGeometry);

  str = g_strdup_printf ("clutter.Geometry(%i, %i, %i, %i)",
                         geometry->x, geometry->y,
                         geometry->width, geometry->height);

  py_str = PyString_FromString (str);
  g_free (str);
  return py_str;
}
%%
override clutter_actor_box_new kwargs
static int
_wrap_clutter_actor_box_new (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = { "x1", "y1", "x2", "y2", NULL };
	ClutterActorBox box = { 0, 0, 0, 0 };
        double x1, y1, x2, y2;

	if (!PyArg_ParseTupleAndKeywords(args, kwargs,
					 "|dddd:ClutterActorBox.__init__",
					 kwlist,
					 &x1, &y1,
					 &x2, &y2))
		return -1;

        box.x1 = x1;
        box.y1 = y1;
        box.x2 = x2;
        box.y2 = y2;

	self->boxed = g_boxed_copy (CLUTTER_TYPE_ACTOR_BOX, &box);
	self->free_on_dealloc = TRUE;
	self->gtype = CLUTTER_TYPE_ACTOR_BOX;
	
	return 0;
}
%%
override-slot ClutterActorBox.tp_as_sequence
static int
_wrap_clutter_actor_box_length (PyGBoxed *self)
{
	return 4;
}
static PyObject *
_wrap_clutter_actor_box_getitem(PyGBoxed *self, int pos)
{
	ClutterActorBox *box;
        double res;

	if (pos < 0)
		pos += 4;
	
	if (pos < 0 || pos >= 4) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return NULL;
	}

	box = pyg_boxed_get (self, ClutterActorBox);
	switch (pos) {
		case 0: res = box->x1; break;
		case 1: res = box->y1; break;
		case 2: res = box->x2; break;
		case 3: res = box->y2; break;
		default:
			g_assert_not_reached();
			return NULL;
	}

        return PyFloat_FromDouble (res);
}
static int
_wrap_clutter_actor_box_setitem (PyGBoxed *self, int pos, PyObject *value)
{
	ClutterActorBox *box;
	double val;

	if (pos < 0)
		pos += 4;
	
	if (pos < 0 || pos >= 4) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return -1;
	}

        if (!PyFloat_Check (value)) {
                PyErr_SetString (PyExc_TypeError, "value must be floating point");
                return -1;
        }

	box = pyg_boxed_get (self, ClutterActorBox);
	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;
	
	switch(pos) {
		case 0: box->x1 = val; break;
		case 1: box->y1 = val; break;
		case 2: box->x2 = val; break;
		case 3: box->y2 = val; break;
		default:
			g_assert_not_reached();
			return -1;
	}

	return 0;
}
static PySequenceMethods _wrap_clutter_actor_box_tp_as_sequence = {
	(lenfunc) _wrap_clutter_actor_box_length,
	0,
	0,
	(ssizeargfunc) _wrap_clutter_actor_box_getitem,
	0,
	(ssizeobjargproc) _wrap_clutter_actor_box_setitem,
	0
};
%%
override-slot ClutterActorBox.tp_richcompare
static PyObject *
_wrap_clutter_actor_box_tp_richcompare (PyObject *a, PyObject *b, int op)
{
  ClutterActorBox *box_a, *box_b;

  if (!pyg_boxed_check (b, CLUTTER_TYPE_ACTOR_BOX)) {
      if (op == Py_NE) {
          Py_RETURN_TRUE;
      } else {
          Py_RETURN_FALSE;
      }
  }

  box_a = pyg_boxed_get (a, ClutterActorBox);
  box_b = pyg_boxed_get (b, ClutterActorBox);

  switch (op)
    {
    case Py_EQ:
      if (clutter_actor_box_equal (box_a, box_b))
        Py_RETURN_TRUE;
      else
        Py_RETURN_FALSE;
    case Py_NE:
      if (!clutter_actor_box_equal (box_a, box_b))
        Py_RETURN_TRUE;
      else
        Py_RETURN_FALSE;
    default:
      PyErr_SetString (PyExc_TypeError,
                       "only '==' and '!=' comparisons are allowed");
      return NULL;
    }
}
%%
override-slot ClutterActorBox.tp_str
static PyObject *
_wrap_clutter_actor_box_tp_str (PyObject *self)
{
  ClutterActorBox *box;
  gchar *str = NULL;
  PyObject *py_str;

  box = pyg_boxed_get (self, ClutterActorBox);

  str = g_strdup_printf ("<ClutterActorBox: x1=%0.2f, y1=%0.2f, x2=%0.2f, "
                         "y2=%0.2f>", box->x1, box->y1, box->x2, box->y2);

  py_str = PyString_FromString (str);
  g_free (str);
  return py_str;
}
%%
override-slot ClutterActorBox.tp_repr
static PyObject *
_wrap_clutter_actor_box_tp_repr (PyObject *self)
{
  ClutterActorBox *box;
  gchar *str = NULL;
  PyObject *py_str;

  box = pyg_boxed_get (self, ClutterActorBox);

  str = g_strdup_printf ("clutter.ActorBox(%f, %f, %f, %f)",
                         box->x1, box->y1, box->x2, box->y2);

  py_str = PyString_FromString (str);
  g_free (str);
  return py_str;
}
%%
override-attr ClutterActorBox.origin
static PyObject *
_wrap_clutter_actor_box__get_origin (PyGBoxed *self, void *closure)
{
        double x1, y1;
        
        x1 = pyg_boxed_get (self, ClutterActorBox)->x1;

        y1 = pyg_boxed_get (self, ClutterActorBox)->y1;

        return Py_BuildValue ("(dd)", x1, y1);
}
%%
override-attr ClutterActorBox.size
static PyObject *
_wrap_clutter_actor_box__get_size (PyGBoxed *self, void *closure)
{
        ClutterActorBox *box = pyg_boxed_get (self, ClutterActorBox);
        double width, height;

        width  = box->x2 - box->x1;
        height = box->y2 - box->y1;

        return Py_BuildValue ("(dd)", width, height);
}
%%
override-attr ClutterActorBox.x1
static int
_wrap_clutter_actor_box__set_x1 (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterActorBox)->x1 = val;

	return 0;
}
static PyObject *
_wrap_clutter_actor_box__get_x1 (PyGBoxed *self, void *closure)
{
	double x1 = pyg_boxed_get (self, ClutterActorBox)->x1;
	return PyFloat_FromDouble (x1);
}
%%
override-attr ClutterActorBox.y1
static int
_wrap_clutter_actor_box__set_y1 (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterActorBox)->y1 = val;

	return 0;
}
static PyObject *
_wrap_clutter_actor_box__get_y1 (PyGBoxed *self, void *closure)
{
	double y1 = pyg_boxed_get (self, ClutterActorBox)->y1;
	return PyFloat_FromDouble (y1);
}
%%
override-attr ClutterActorBox.x2
static int
_wrap_clutter_actor_box__set_x2 (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterActorBox)->x2 = val;

	return 0;
}
static PyObject *
_wrap_clutter_actor_box__get_x2 (PyGBoxed *self, void *closure)
{
	double x2 = pyg_boxed_get (self, ClutterActorBox)->x2;
	return PyFloat_FromDouble (x2);
}
%%
override-attr ClutterActorBox.y2
static int
_wrap_clutter_actor_box__set_y2 (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterActorBox)->y2 = val;

	return 0;
}
static PyObject *
_wrap_clutter_actor_box__get_y2 (PyGBoxed *self, void *closure)
{
	double y2 = pyg_boxed_get (self, ClutterActorBox)->y2;
	return PyFloat_FromDouble (y2);
}
%%
override clutter_knot_new kwargs
static int
_wrap_clutter_knot_new (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = { "x", "y", NULL };
	ClutterKnot knot = { 0, 0, };

	if (!PyArg_ParseTupleAndKeywords(args, kwargs,
					 "|ii:ClutterKnot.__init__",
					 kwlist,
					 &(knot.x), &(knot.y)))
		return -1;
	
	self->boxed = g_boxed_copy (CLUTTER_TYPE_KNOT, &knot);
	self->free_on_dealloc = TRUE;
	self->gtype = CLUTTER_TYPE_KNOT;
	
	return 0;
}
%%
override-slot ClutterKnot.tp_as_sequence
static int
_wrap_clutter_knot_length (PyGBoxed *self)
{
	return 2;
}
static PyObject *
_wrap_clutter_knot_getitem(PyGBoxed *self, int pos)
{
	ClutterKnot *knot;

	if (pos < 0)
		pos += 1;
	
	if (pos < 0 || pos >= 2) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return NULL;
	}

	knot = pyg_boxed_get (self, ClutterKnot);
	switch (pos) {
		case 0: return PyInt_FromLong (knot->x);
		case 1: return PyInt_FromLong (knot->y);
		default:
			g_assert_not_reached();
			return NULL;
	}
}
static int
_wrap_clutter_knot_setitem (PyGBoxed *self, int pos, PyObject *value)
{
	ClutterKnot *knot;
	gint val;

	if (pos < 0)
		pos += 1;
	
	if (pos < 0 || pos >= 2) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return -1;
	}

	knot = pyg_boxed_get (self, ClutterKnot);
	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;
	
	switch(pos) {
		case 0: knot->x = val; break;
		case 1: knot->y = val; break;
		default:
			g_assert_not_reached();
			return -1;
	}

	return 0;
}
static PySequenceMethods _wrap_clutter_knot_tp_as_sequence = {
	(lenfunc) _wrap_clutter_knot_length,
	0,
	0,
	(ssizeargfunc) _wrap_clutter_knot_getitem,
	0,
	(ssizeobjargproc) _wrap_clutter_knot_setitem,
	0
};
%%
override-attr ClutterKnot.x
static int
_wrap_clutter_knot__set_x (PyGBoxed *self, PyObject *value, void *closure)
{
	gint val;

	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterKnot)->x = val;

	return 0;
}
%%
override-attr ClutterKnot.y
static int
_wrap_clutter_knot__set_y (PyGBoxed *self, PyObject *value, void *closure)
{
	gint val;

	val = PyInt_AsLong (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterKnot)->y = val;

	return 0;
}
%%
override clutter_vertex_new kwargs
static int
_wrap_clutter_vertex_new (PyGBoxed *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = { "x", "y", "z", NULL };
	ClutterVertex vertex = { 0, 0, 0 };
        double x, y, z;

	if (!PyArg_ParseTupleAndKeywords(args, kwargs,
					 "|ddd:ClutterVertex.__init__",
					 kwlist,
					 &x, &y, &z))
		return -1;

        vertex.x = x;
        vertex.y = y;
        vertex.z = z;

	self->boxed = g_boxed_copy (CLUTTER_TYPE_VERTEX, &vertex);
	self->free_on_dealloc = TRUE;
	self->gtype = CLUTTER_TYPE_VERTEX;
	
	return 0;
}
%%
override-slot ClutterVertex.tp_as_sequence
static Py_ssize_t
_wrap_clutter_vertex_length (PyGBoxed *self)
{
	return 3;
}
static PyObject *
_wrap_clutter_vertex_getitem (PyGBoxed *self, Py_ssize_t pos)
{
	ClutterVertex *vertex;
        double res;

	if (pos < 0)
		pos += 1;
	
	if (pos < 0 || pos >= 3) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return NULL;
	}

	vertex = pyg_boxed_get (self, ClutterVertex);
	switch (pos) {
		case 0: res = vertex->x; break;
		case 1: res = vertex->y; break;
		case 2: res = vertex->z; break;
		default:
			g_assert_not_reached();
			return NULL;
	}

        return PyFloat_FromDouble (res);
}
static Py_ssize_t
_wrap_clutter_vertex_setitem (PyGBoxed *self, Py_ssize_t pos, PyObject *value)
{
	ClutterVertex *vertex;
	double val;

	if (pos < 0)
		pos += 1;
	
	if (pos < 0 || pos >= 3) {
		PyErr_SetString(PyExc_IndexError, "index out of range");
		
		return -1;
	}

        if (!PyFloat_Check (value)) {
                PyErr_SetString(PyExc_TypeError, "value must be a float");

                return -1;
        }

	vertex = pyg_boxed_get (self, ClutterVertex);
	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;
	
	switch(pos) {
		case 0: vertex->x = val; break;
		case 1: vertex->y = val; break;
		case 2: vertex->z = val; break;
		default:
			g_assert_not_reached();
			return -1;
	}

	return 0;
}
static PySequenceMethods _wrap_clutter_vertex_tp_as_sequence = {
	(lenfunc) _wrap_clutter_vertex_length,
	0,
	0,
	(ssizeargfunc) _wrap_clutter_vertex_getitem,
	0,
	(ssizeobjargproc) _wrap_clutter_vertex_setitem,
	0
};
%%
override-slot ClutterVertex.tp_richcompare
static PyObject *
_wrap_clutter_vertex_tp_richcompare (PyObject *a, PyObject *b, int op)
{
  ClutterVertex *v_a, *v_b;

  if (!pyg_boxed_check (b, CLUTTER_TYPE_VERTEX)) {
      if (op == Py_NE) {
          Py_RETURN_TRUE;
      } else {
          Py_RETURN_FALSE;
      }
  }

  v_a = pyg_boxed_get (a, ClutterVertex);
  v_b = pyg_boxed_get (b, ClutterVertex);

  switch (op)
    {
    case Py_EQ:
      if ((v_a->x == v_b->x) && (v_a->y == v_b->y) && (v_a->z == v_b->z))
        Py_RETURN_TRUE;
      else
        Py_RETURN_FALSE;
    case Py_NE:
      if ((v_a->x == v_b->x) && (v_a->y == v_b->y) && (v_a->z == v_b->z))
        Py_RETURN_FALSE;
      else
        Py_RETURN_TRUE;
    default:
      PyErr_SetString (PyExc_TypeError,
                       "only '==' and '!=' comparisons are allowed");
      return NULL;
    }
}
%%
override-attr ClutterVertex.x
static int
_wrap_clutter_vertex__set_x (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterVertex)->x = val;

	return 0;
}
static PyObject *
_wrap_clutter_vertex__get_x (PyGBoxed *self, void *closure)
{
	double x = pyg_boxed_get (self, ClutterVertex)->x;
	return PyFloat_FromDouble (x);
}
%%
override-attr ClutterVertex.y
static int
_wrap_clutter_vertex__set_y (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterVertex)->y = val;

	return 0;
}
static PyObject *
_wrap_clutter_vertex__get_y (PyGBoxed *self, void *closure)
{
	double y = pyg_boxed_get (self, ClutterVertex)->y;
	return PyFloat_FromDouble (y);
}
%%
override-attr ClutterVertex.z
static int
_wrap_clutter_vertex__set_z (PyGBoxed *self, PyObject *value, void *closure)
{
	double val;

	val = PyFloat_AsDouble (value);
	if (PyErr_Occurred ())
		return -1;

	pyg_boxed_get (self, ClutterVertex)->z = val;

	return 0;
}
static PyObject *
_wrap_clutter_vertex__get_z (PyGBoxed *self, void *closure)
{
	double z = pyg_boxed_get (self, ClutterVertex)->z;
	return PyFloat_FromDouble (z);
}
%%
override-slot ClutterVertex.tp_str
static PyObject *
_wrap_clutter_vertex_tp_str (PyObject *self)
{
  ClutterVertex *v;
  gchar *str = NULL;
  PyObject *py_str;

  v = pyg_boxed_get (self, ClutterVertex);

  str = g_strdup_printf ("<ClutterVertex: x=%0.2f, y=%0.2f, z=%0.2f>",
                         v->x, v->y, v->z);
  py_str = PyString_FromString (str);
  g_free (str);

  return py_str;
}
%%
override-slot ClutterVertex.tp_repr
static PyObject *
_wrap_clutter_vertex_tp_repr (PyObject *self)
{
  ClutterVertex *v;
  gchar *str = NULL;
  PyObject *py_str;

  v = pyg_boxed_get (self, ClutterVertex);

  str = g_strdup_printf ("clutter.Vertex(%f, %f, %f)",
                         v->x, v->y, v->z);
  py_str = PyString_FromString (str);
  g_free (str);

  return py_str;
}
