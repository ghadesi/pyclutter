%%
headers
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"

#include "pyclutter-private.h"

#include <cogl/cogl.h>


PyTypeObject PyCoglTexture_Type;
PyTypeObject PyCoglMatrix_Type;
PyTypeObject PyCoglMaterial_Type;
PyTypeObject PyCoglShader_Type;
PyTypeObject PyCoglProgram_Type;
PyTypeObject PyCoglOffscreen_Type;


%%
body

PyObject *
pycogl_handle_from_handle (CoglHandle handle)
{
  PyTypeObject *type = NULL;
  PyObject *o;

  /* if the handle is invalid we just return Py_None */
  if (handle == COGL_INVALID_HANDLE) {
      Py_INCREF (Py_None);
      return Py_None;
  }

  if (cogl_is_texture (handle))
    type = &PyCoglTexture_Type;
  else if (cogl_is_material (handle))
    type = &PyCoglMaterial_Type;
  else if (cogl_is_shader (handle))
    type = &PyCoglShader_Type;
  else if (cogl_is_program (handle))
    type = &PyCoglProgram_Type;
  else if (cogl_is_offscreen (handle))
    type = &PyCoglOffscreen_Type;
  else {
      PyErr_SetString (PyExc_TypeError, "Unknown handle type");
      return NULL;
  }

  o = type->tp_alloc (type, 0);
  if (o == NULL) {
      /* blubb */
      return NULL;
  } else {
      ((PyCoglHandle *)o)->handle = handle;
      cogl_handle_ref (handle);
  }
  return o;
}

PyObject *
pycogl_handle_from_handle_without_ref (CoglHandle handle)
{
  PyObject *o = pycogl_handle_from_handle(handle);
  if (o) {
      cogl_handle_unref(handle);
  }
  return o;
}

static PyObject *
pycogl_handle_new (PyTypeObject *type, PyObject *args, PyObject *kwargs)
{
  PyErr_SetString (PyExc_TypeError,
                   "cogl.Handle type cannot be instantiated");
  return NULL;
}

void
pycogl_handle_dealloc (PyCoglHandle *self)
{
  if (self->handle) 
    {
      cogl_handle_unref (self->handle);
      self->handle = NULL;
    }
  self->ob_type->tp_free((PyObject *)self);
}

PyTypeObject PyCoglHandle_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                  /* ob_size */
    "cogl.Handle",                      /* tp_name */
    sizeof(PyCoglHandle),               /* tp_basicsize */
    0,                                  /* tp_itemsize */
    (destructor)pycogl_handle_dealloc,  /* tp_dealloc */
    0,                                  /* tp_print */
    0,                                  /* tp_getattr */
    0,                                  /* tp_setattr */
    0,                                  /* tp_compare */
    0,                                  /* tp_repr */
    0,                                  /* tp_as_number */
    0,                                  /* tp_as_sequence */
    0,                                  /* tp_as_mapping */
    0,                                  /* tp_hash */
    0,                                  /* tp_call */
    0,                                  /* tp_str */
    0,                                  /* tp_getattro */
    0,                                  /* tp_setattro */
    0,                                  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,/* tp_flags */
    0,                                  /* tp_doc */
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
    0,                                  /* tp_iter */
    0,                                  /* tp_iternext */
    0,                                  /* tp_methods */
    0,                                  /* tp_members */
    0,                                  /* tp_getset */
    0, /* &PyBaseObject_Type, */        /* tp_base */
    0,                                  /* tp_dict */
    0,                                  /* tp_descr_get */
    0,                                  /* tp_descr_set */
    0,                                  /* tp_dictoffset */
    0,                                  /* tp_init */
    0,                                  /* tp_alloc */
    (newfunc)pycogl_handle_new,         /* tp_new */
    0,                                  /* tp_free */
    0,                                  /* tp_is_gc */
    0,                                  /* tp_bases */
};


static PyObject *
pyobject_from_cogl_color (CoglColor *color)
{
  PyObject *pyret;
  pyret = Py_BuildValue ("(ffff)",
                         cogl_color_get_red_float (color),
                         cogl_color_get_green_float (color),
                         cogl_color_get_blue_float (color),
                         cogl_color_get_alpha_float (color));
  return pyret;
}


%%
include
  cogl-texture.override
  cogl-material.override
  cogl-shader.override
  cogl-matrix.override
  cogl-offscreen.override
%%
modulename clutter.cogl
%%
import pango.Layout as PyPangoLayout_Type
import pango.LayoutLine as PyPangoLayoutLine_Type
import pangocairo.CairoFontMap as PyPangoCairoFontMap_Type
%%
ignore
  cogl_get_option_group
  cogl_get_proc_address
  cogl_color_equal
  cogl_create_program
  cogl_read_pixels
  cogl_color_new
  cogl_color_copy
  cogl_color_free
  cogl_bitmap_new_from_file
%%
ignore-glob
  cogl_fixed_*
  cogl_program_*
  cogl_vertex_*
  cogl_*_ref
  cogl_*_unref
  cogl_color_set_*
  cogl_color_get_*
%%
override cogl_get_viewport noargs
static PyObject *
_wrap_cogl_get_viewport (PyObject *self)
{
  float viewport[4] = { 0, };

  cogl_get_viewport (viewport);

  return Py_BuildValue ("(ffff)",
                        viewport[0],
                        viewport[1],
                        viewport[2],
                        viewport[3]);
}
%%
override cogl_get_bitmasks noargs
static PyObject *
_wrap_cogl_get_bitmasks (PyObject *self)
{
  gint red, green, blue, alpha;

  cogl_get_bitmasks (&red, &green, &blue, &alpha);

  return Py_BuildValue ("(iiii)", red, green, blue, alpha);
}
%%
override cogl_bitmap_get_size_from_file kwargs
static PyObject *
_wrap_cogl_bitmap_get_size_from_file (PyObject *self,
                                      PyObject *args,
                                      PyObject *kwargs)
{
    static char *kwlist[] = { "filename", NULL };
    const gchar *filename;
    gint width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "s:cogl.bitmap_get_size_from_file",
                                     kwlist, &filename))
        return NULL;
    
    cogl_bitmap_get_size_from_file (filename, &width, &height);

    return Py_BuildValue ("(ii)", width, height);
}
%%
new-constructor COGL_PANGO_TYPE_FONT_MAP
%%
override cogl_pango_font_map_new noargs
static int
_wrap_cogl_pango_font_map_new (PyGObject *self)
{
  self->obj = (GObject *) cogl_pango_font_map_new ();
  if (!self->obj)
    {
      PyErr_SetString (PyExc_RuntimeError, "could not create PangoFontMap");
      return -1;
    }

  g_object_ref (self->obj);
  pygobject_register_wrapper ((PyObject *) self);

  return 0;
}
%%
override cogl_pango_render_layout kwargs
static PyObject *
_wrap_cogl_pango_render_layout(PyObject *self,
                               PyObject *args,
                               PyObject *kwargs)
{
    static char *kwlist[] = { "layout", "x", "y", "color", "flags", NULL };
    PyGObject *layout;
    int x, y, flags;
    CoglColor color;
    PyObject *py_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O!iiOi:pango_render_layout",
                                     kwlist,
                                     &PyPangoLayout_Type,
                                     &layout,
                                     &x, &y, &py_color, &flags))
        return NULL;

    if (!pycogl_color_from_pyobject (py_color, &color))
    {
        PyErr_Clear ();
        PyErr_SetString (PyExc_TypeError,
                         "color must be a ClutterColor or 4-tuple");
        return NULL;
    }

    
    cogl_pango_render_layout(PANGO_LAYOUT(layout->obj), x, y, &color, flags);
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override cogl_pango_render_layout_subpixel kwargs
static PyObject *
_wrap_cogl_pango_render_layout_subpixel(PyObject *self,
                                        PyObject *args,
                                        PyObject *kwargs)
{
    static char *kwlist[] = { "layout", "x", "y", "color", "flags", NULL };
    PyGObject *layout;
    int x, y, flags;
    CoglColor color;
    PyObject *py_color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O!iiOi:pango_render_layout_subpixel",
                                     kwlist,
                                     &PyPangoLayout_Type,
                                     &layout,
                                     &x, &y, &py_color, &flags))
        return NULL;

    if (!pycogl_color_from_pyobject (py_color, &color))
    {
        PyErr_Clear ();
        PyErr_SetString (PyExc_TypeError,
                         "color must be a ClutterColor or 4-tuple");
        return NULL;
    }

    
    cogl_pango_render_layout_subpixel(PANGO_LAYOUT(layout->obj), x, y, &color, flags);
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override cogl_pango_render_layout_line kwargs
static PyObject *
_wrap_cogl_pango_render_layout_line(PyObject *self,
                                    PyObject *args,
                                    PyObject *kwargs)
{
    static char *kwlist[] = { "line", "x", "y", "color", NULL };
    PangoLayoutLine *line = NULL;
    PyObject *py_line, *py_color;
    int x, y;
    CoglColor color;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "OiiO:pango_render_layout_line",
                                     kwlist, &py_line, &x, &y, &py_color))
        return NULL;
    if (pyg_boxed_check(py_line, PANGO_TYPE_LAYOUT_LINE))
        line = pyg_boxed_get(py_line, PangoLayoutLine);
    else {
        PyErr_SetString(PyExc_TypeError, "line should be a PangoLayoutLine");
        return NULL;
    }
    
    if (!pycogl_color_from_pyobject (py_color, &color))
    {
        PyErr_Clear ();
        PyErr_SetString (PyExc_TypeError,
                         "color must be a ClutterColor or 4-tuple");
        return NULL;
    }

    cogl_pango_render_layout_line(line, x, y, &color);
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override cogl_set_fog kwargs
static PyObject *
_wrap_cogl_set_fog(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "fog_color", "mode", "density", "z_near", "z_far", NULL };
    CoglColor fog_color;
    PyObject *py_fog_color, *py_mode = NULL;
    double density, z_near, z_far;
    CoglFogMode mode;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "OOddd:set_fog",
                                     kwlist,
                                     &py_fog_color, &py_mode,
                                     &density, &z_near, &z_far))
        return NULL;

    if (!pycogl_color_from_pyobject (py_fog_color, &fog_color))
    {
        PyErr_Clear ();
        PyErr_SetString (PyExc_TypeError,
                         "color must be a ClutterColor or 4-tuple");
        return NULL;
    }

    if (pyg_enum_get_value(COGL_TYPE_FOG_MODE, py_mode, (gpointer)&mode))
        return NULL;
    
    cogl_set_fog(&fog_color, mode, density, z_near, z_far);
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override cogl_clear kwargs
static PyObject *
_wrap_cogl_clear(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "color", "buffers", NULL };
    CoglColor color;
    PyObject *py_color;
    unsigned long buffers;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"Ok:clear", kwlist, &py_color, &buffers))
        return NULL;

    if (!pycogl_color_from_pyobject (py_color, &color))
    {
        PyErr_Clear ();
        PyErr_SetString (PyExc_TypeError,
                         "color must be a ClutterColor or 4-tuple");
        return NULL;
    }

    cogl_clear(&color, buffers);
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override cogl_get_modelview_matrix noargs
static PyObject *
_wrap_cogl_get_modelview_matrix (PyObject *self)
{
    CoglMatrix matrix;

    cogl_get_modelview_matrix (&matrix);

    return pycogl_matrix_from_matrix (&matrix);
}
%%
override cogl_set_modelview_matrix
static PyObject *
_wrap_cogl_set_modelview_matrix (PyObject *self, PyObject *args)
{
  PyCoglMatrix *py_matrix;

  if (!PyArg_ParseTuple (args, "O!:cogl.set_modelview_matrix",
                         &PyCoglMatrix_Type, &py_matrix))
    return NULL;

  cogl_set_modelview_matrix (&py_matrix->matrix);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_get_projection_matrix noargs
static PyObject *
_wrap_cogl_get_projection_matrix (PyObject *self)
{
    CoglMatrix matrix;

    cogl_get_projection_matrix (&matrix);

    return pycogl_matrix_from_matrix (&matrix);
}
%%
override cogl_set_projection_matrix
static PyObject *
_wrap_cogl_set_projection_matrix (PyObject *self, PyObject *args)
{
  PyCoglMatrix *py_matrix;

  if (!PyArg_ParseTuple (args, "O!:cogl.set_projection_matrix",
                         &PyCoglMatrix_Type, &py_matrix))
    return NULL;

  cogl_set_projection_matrix (&py_matrix->matrix);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_color_to_clutter_color
static PyObject *
_wrap_cogl_color_to_clutter_color (PyObject *self, PyObject *args)
{
  PyObject *py_color;
  CoglColor color;

  if (!PyArg_ParseTuple (args, "O:cogl.color_to_clutter_color",
                         &py_color))
    return NULL;

  if (!pycogl_color_from_pyobject (py_color, &color))
    return NULL;

  ClutterColor *dest = clutter_color_new (
                          (gint)(cogl_color_get_red (&color) * 255),
                          (gint)(cogl_color_get_green (&color) * 255),
                          (gint)(cogl_color_get_blue (&color) * 255),
                          (gint)(cogl_color_get_alpha (&color) * 255));

  return pyg_boxed_new (CLUTTER_TYPE_COLOR, dest, TRUE, TRUE);
}
%%
override cogl_color_premultiply
static PyObject *
_wrap_cogl_color_premultiply (PyObject *self, PyObject *args)
{
  PyObject *py_color;
  CoglColor color;

  if (!PyArg_ParseTuple (args, "O:cogl.color_premultiply",
                         &py_color))
    return NULL;

  if (!pycogl_color_from_pyobject (py_color, &color))
    {
      return NULL;
    }

  cogl_color_premultiply (&color);
  return pyobject_from_cogl_color (&color);
}
%%
override cogl_set_source
static PyObject *
_wrap_cogl_set_source (PyObject *self, PyObject *args)
{
  PyCoglMaterial *material;

  if (!PyArg_ParseTuple (args, "O!:cogl.set_source",
                         &PyCoglMaterial_Type, &material))
    return NULL;

  cogl_set_source (material->handle);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_set_source_color
static PyObject *
_wrap_cogl_set_source_color (PyObject *self, PyObject *args)
{
  PyObject *py_color;
  CoglColor color;

  if (!PyArg_ParseTuple (args, "O:cogl.set_source_color",
                         &py_color))
    return NULL;

  if (!pycogl_color_from_pyobject (py_color, &color))
    return NULL;

  cogl_set_source_color (&color);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_set_source_texture
static PyObject *
_wrap_cogl_set_source_texture (PyObject *self, PyObject *args)
{
  PyCoglTexture *texture;

  if (!PyArg_ParseTuple (args, "O!:cogl.set_source_texture",
                         &PyCoglTexture_Type, &texture))
    return NULL;

  cogl_set_source_texture (texture->handle);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_path_polyline
static PyObject *
_wrap_cogl_path_polyline (PyObject *self, PyObject *args)
{
  gint len = PyTuple_Size (args);
  gfloat coords[len];
  gint i;

  if (len < 2 || (len % 2 != 0))
    {
      PyErr_SetString (PyExc_TypeError,
                       "cogl.path_polyline requires at least two values");
      return NULL;
    }

  for (i = 0; i < len; i++)
    coords[i] = PyFloat_AsDouble (PyTuple_GetItem (args, i));

  cogl_path_polyline (coords, len);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_path_polygon
static PyObject *
_wrap_cogl_path_polygon (PyObject *self, PyObject *args)
{
  gint len = PyTuple_Size (args);
  gfloat coords[len];
  gint i;

  if (len < 2 || (len % 2 != 0))
    {
      PyErr_SetString (PyExc_TypeError,
                       "cogl.path_polygon requires at least two values");
      return NULL;
    }

  for (i = 0; i < len; i++)
    coords[i] = PyFloat_AsDouble (PyTuple_GetItem (args, i));

  cogl_path_polygon (coords, len);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override cogl_set_draw_buffer
static PyObject *
_wrap_cogl_set_draw_buffer (PyObject *self, PyObject *args)
{
  PyObject *py_target;
  PyCoglOffscreen *py_handle;
  CoglBufferTarget target;

  if (!PyArg_ParseTuple (args, "OO!:cogl.set_draw_buffer",
                         &py_target, &PyCoglOffscreen_Type, &py_handle))
    return NULL;

  if (pyg_enum_get_value (COGL_TYPE_BUFFER_TARGET, py_target,
                          (gpointer)&target))
    return NULL;

  cogl_set_draw_buffer (target, py_handle->handle);

  Py_INCREF (Py_None);
  return Py_None;
}

