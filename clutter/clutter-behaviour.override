%%
ignore
  clutter_alpha_new_full
  clutter_alpha_new_with_func
  clutter_alpha_set_closure
  clutter_alpha_register_closure
  clutter_path_add_cairo_path
  clutter_behaviour_path_new_with_knots
  clutter_behaviour_path_new_with_description
%%
override clutter_alpha_set_func kwargs
static PyObject *
_wrap_clutter_alpha_set_func (PyGObject *self,
                              PyObject  *args,
                              PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        ClutterAlpha *alpha;
        PyClutterCallback *pycb;
        GType param_types[] = { CLUTTER_TYPE_ALPHA };
        gint n_params = G_N_ELEMENTS (param_types);

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.Alpha.set_func",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }

        pycb = pyclutter_callback_new (py_func, py_data,
                                       n_params, param_types);

        alpha = CLUTTER_ALPHA (self->obj);
        clutter_alpha_set_func (alpha,
                                pyclutter_alpha_func, pycb,
                                (GDestroyNotify) pyclutter_callback_free);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_alpha_register_func kwargs
static PyObject *
_wrap_clutter_alpha_register_func (PyObject *self,
                              PyObject  *args,
                              PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        PyClutterCallback *pycb;
        gulong id;
        GType param_types[] = { CLUTTER_TYPE_ALPHA };
        gint n_params = G_N_ELEMENTS (param_types);

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.alpha_register_func",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }
        
        if (py_data == NULL) {
            Py_INCREF (Py_None);
            py_data = Py_None;
        }

        pycb = pyclutter_callback_new (py_func, py_data,
                                       n_params, param_types);

        id = clutter_alpha_register_func (pyclutter_alpha_func, pycb);

        return Py_BuildValue("K", id);
}
%%
override clutter_alpha_get_mode noargs
static PyObject *
_wrap_clutter_alpha_get_mode (PyGObject *self)
{
        gulong mode = clutter_alpha_get_mode(CLUTTER_ALPHA(self->obj));
        if (mode < CLUTTER_ANIMATION_LAST) {
                return pyg_enum_from_gtype(CLUTTER_TYPE_ANIMATION_MODE, mode);
        }
        return PyLong_FromUnsignedLong(mode);
}
%%
override clutter_behaviour_actors_foreach kwargs
static void
pyclutter_behaviour_foreach (ClutterBehaviour *behaviour,
                             ClutterActor     *actor,
                             gpointer          data)
{
        PyClutterCallback *pycb = data;
        PyGILState_STATE state;
        PyObject *py_behaviour, *py_actor;
        PyObject *retobj;

        state = pyg_gil_state_ensure ();

        py_behaviour = pygobject_new ((GObject *) behaviour);
        py_actor = pygobject_new ((GObject *) actor);
        retobj = pyclutter_callback_invoke (pycb, py_behaviour, py_actor);
        if (retobj == NULL)
                PyErr_Print ();

        Py_XDECREF (retobj);

        pyg_gil_state_release (state);
}
static PyObject *
_wrap_clutter_behaviour_actors_foreach (PyGObject *self,
                                        PyObject  *args,
                                        PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        ClutterBehaviour *behaviour;
        PyClutterCallback *pycb;
        GType param_types[] = {
                CLUTTER_TYPE_BEHAVIOUR,
                CLUTTER_TYPE_ALPHA,
        };
        gint n_params = G_N_ELEMENTS (param_types);

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.Behaviour.actor_foreach",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }

        if (py_data == NULL)
          {
            Py_INCREF (Py_None);
            py_data = Py_None;
          }

        pycb = pyclutter_callback_new (py_func, py_data,
                                       n_params, param_types);
        behaviour = CLUTTER_BEHAVIOUR (self->obj);

        clutter_behaviour_actors_foreach (behaviour,
                                          pyclutter_behaviour_foreach,
                                          pycb);

        pyclutter_callback_free (pycb);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_behaviour_get_actors
static PyObject *
_wrap_clutter_behaviour_get_actors (PyGObject *self,
                                    PyObject  *args)
{
        GSList *actors, *l;
        PyObject *py_list;

        actors = clutter_behaviour_get_actors (CLUTTER_BEHAVIOUR (self->obj));

        if ((py_list = PyList_New (0)) == NULL) {
                g_slist_free (actors);
                return NULL;
        }

        for (l = actors; l != NULL; l = l->next) {
                ClutterActor *actor = l->data;
                PyObject *py_actor;

                py_actor = pygobject_new ((GObject *) actor);
                if (!py_actor) {
                        g_slist_free (actors);
                        Py_DECREF (py_list);
                        return NULL;
                }

                PyList_Append (py_list, py_actor);
                Py_DECREF (py_actor);
        }

        g_slist_free (actors);

        return py_list;
}
%%
override ClutterBehaviour__proxy_do_alpha_notify
static void
_wrap_ClutterBehaviour__proxy_do_alpha_notify (ClutterBehaviour *behaviour,
                                               gdouble           alpha_value)
{
        PyGILState_STATE state;
        PyObject *py_self;
        PyObject *py_method, *py_args;
        PyObject *py_ret, *py_alpha;
        
        state = pyg_gil_state_ensure ();

        py_self = pygobject_new ((GObject *) behaviour);
        if (!py_self) {
                if (PyErr_Occurred ())
                        PyErr_Print ();

                pyg_gil_state_release (state);
                return;
        }

        py_alpha = PyFloat_FromDouble (alpha_value);
        if (!py_alpha) {
                if (PyErr_Occurred ())
                        PyErr_Print ();

                Py_DECREF (py_self);

                pyg_gil_state_release (state);
                return;
        }

        py_args = PyTuple_New (1);
        PyTuple_SET_ITEM (py_args, 0, py_alpha);

        py_method = PyObject_GetAttrString (py_self, "do_alpha_notify");
        if (!py_method) {
                if (PyErr_Occurred ())
                        PyErr_Print ();
                
                Py_DECREF (py_args);
                Py_DECREF (py_self);

                pyg_gil_state_release (state);
                return;
        }

        py_ret = PyObject_CallObject (py_method, py_args);
        if (!py_ret) {
                if (PyErr_Occurred ())
                        PyErr_Print ();

                Py_DECREF (py_method);
                Py_DECREF (py_args);
                Py_DECREF (py_self);

                pyg_gil_state_release (state);
                return;
        }
        
        if (py_ret != Py_None) {
                PyErr_SetString (PyExc_TypeError, "retval should be None");
                PyErr_Print();
                
                Py_DECREF (py_ret);
                Py_DECREF (py_method);
                Py_DECREF (py_args);
                Py_DECREF (py_self);
                
                pyg_gil_state_release (state);
                return;
        }

        Py_DECREF (py_ret);
        Py_DECREF (py_method);
        Py_DECREF (py_args);
        Py_DECREF (py_self);

        pyg_gil_state_release (state);
}
%%
override ClutterBehaviour__do_alpha_notify kwargs
static PyObject *
_wrap_ClutterBehaviour__do_alpha_notify (PyObject *cls,
                                         PyObject *args,
                                         PyObject *kwargs)
{
        gpointer klass;
        static char *kwlist[] = { "self", "alpha", NULL };
        PyGObject *self;
        PyObject *py_alpha;
        gdouble alpha_value = 0.0;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "OO:ClutterBehaviour.alpha_notify",
                                          kwlist,
                                          &PyClutterBehaviour_Type, &self,
                                          &py_alpha))
                return NULL;

        if (py_alpha) {
                if (PyFloat_Check (py_alpha))
                        alpha_value = (gdouble) PyFloat_AsDouble (py_alpha);
                else
                        PyErr_SetString (PyExc_TypeError,
                                         "Parameter 'alpha' must be an int or a long");

                if (PyErr_Occurred ())
                        return NULL;
        }

        klass = g_type_class_ref (pyg_type_from_object (cls));
        if (CLUTTER_BEHAVIOUR_CLASS (klass)->alpha_notify) {
                ClutterBehaviour *behaviour;
                
                behaviour = CLUTTER_BEHAVIOUR (self->obj);
                CLUTTER_BEHAVIOUR_CLASS (klass)->alpha_notify (behaviour,
                                                               alpha_value);
        }
        else {
                PyErr_SetString (PyExc_NotImplementedError,
                                 "virtual method ClutterBehaviour.alpha_notify not implemented");
                g_type_class_unref (klass);
                return NULL;
        }

        g_type_class_unref (klass);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
new-constructor CLUTTER_TYPE_BEHAVIOUR_ELLIPSE
%%
override clutter_behaviour_ellipse_new kwargs
static int
_wrap_clutter_behaviour_ellipse_new (PyGObject *self,
                                     PyObject  *args,
                                     PyObject  *kwargs)
{
        static char *kwlist[] = { "alpha", "x", "y", "width", "height", "start", "end", NULL};
        PyObject *py_alpha = Py_None;
        int x, y, width, height;
        double start, end;
        ClutterKnot center = { 0, };
        ClutterAlpha *alpha;

        /* these are the default values from the properties */
        x = y = 0; /* center */
        width = 100;
        height = 50;
        start = 0.0;
        end = 360.0;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "|Oiiiidd:clutter.BehaviourEllipse.__init__",
                                          kwlist,
                                          &py_alpha,
                                          &x, &y, &width, &height,
                                          &start, &end))
                return -1;
        
        if (py_alpha == Py_None)
                alpha = NULL;
        else if (pygobject_check (py_alpha, &PyClutterAlpha_Type))
                alpha = CLUTTER_ALPHA (pygobject_get (py_alpha));
        else {
                PyErr_SetString (PyExc_TypeError,
                                 "first argument must be a ClutterAlpha or None");
                return -1;
        }

        center.x = x;
        center.y = y;

        pygobject_construct (self,
                             "alpha", alpha,
                             "center", &center,
                             "width", width,
                             "height", height,
                             "angle-start", start,
                             "angle-end", end,
                             NULL);

        return 0;
}
%%
override clutter_behaviour_ellipse_get_center noargs
static PyObject *
_wrap_clutter_behaviour_ellipse_get_center (PyGObject *self)
{
        ClutterBehaviourEllipse *ellipse;
        gint center_x, center_y;

        ellipse = CLUTTER_BEHAVIOUR_ELLIPSE (self->obj);
        clutter_behaviour_ellipse_get_center (ellipse, &center_x, &center_y);

        return Py_BuildValue ("(ii)", center_x, center_y);
}
%%
override clutter_behaviour_ellipse_get_tilt noargs
static PyObject *
_wrap_clutter_behaviour_ellipse_get_tilt (PyGObject *self)
{
        ClutterBehaviourEllipse *ellipse;
        gdouble tilt_x, tilt_y, tilt_z;

        ellipse = CLUTTER_BEHAVIOUR_ELLIPSE (self->obj);
        clutter_behaviour_ellipse_get_tilt (ellipse, &tilt_x, &tilt_y, &tilt_z);

        return Py_BuildValue ("(ddd)", tilt_x, tilt_y, tilt_z);
}
%%
override clutter_behaviour_rotate_get_center noargs
static PyObject *
_wrap_clutter_behaviour_rotate_get_center (PyGObject *self)
{
        ClutterBehaviourRotate *rotate;
        gint center_x, center_y, center_z;

        rotate = CLUTTER_BEHAVIOUR_ROTATE (self->obj);
        clutter_behaviour_rotate_get_center (rotate, &center_x, &center_y, &center_z);

        return Py_BuildValue ("(iii)", center_x, center_y, center_z);
}
%%
override clutter_behaviour_rotate_get_bounds noargs
static PyObject *
_wrap_clutter_behaviour_rotate_get_bounds (PyGObject *self)
{
        ClutterBehaviourRotate *rotate;
        gdouble start, end;

        rotate = CLUTTER_BEHAVIOUR_ROTATE (self->obj);
        clutter_behaviour_rotate_get_bounds (rotate, &start, &end);

        return Py_BuildValue ("(dd)", start, end);
}
%%
override clutter_behaviour_scale_get_bounds noargs
static PyObject *
_wrap_clutter_behaviour_scale_get_bounds (PyGObject *self)
{
        ClutterBehaviourScale *scale;
        gdouble x_start, x_end;
        gdouble y_start, y_end;

        scale = CLUTTER_BEHAVIOUR_SCALE (self->obj);
        clutter_behaviour_scale_get_bounds (scale,
                                            &x_start, &y_start,
                                            &x_end, &y_end);

        return Py_BuildValue ("(dddd)", x_start, y_start, x_end, y_end);
}
%%
override clutter_behaviour_depth_get_bounds noargs
static PyObject *
_wrap_clutter_behaviour_depth_get_bounds (PyGObject *self)
{
        ClutterBehaviourDepth *depth;
        gint start, end;

        depth = CLUTTER_BEHAVIOUR_DEPTH (self->obj);
        clutter_behaviour_depth_get_bounds (depth, &start, &end);

        return Py_BuildValue ("(ii)", start, end);
}
%%
override clutter_behaviour_opacity_get_bounds noargs
static PyObject *
_wrap_clutter_behaviour_opacity_get_bounds (PyGObject *self)
{
        ClutterBehaviourOpacity *opacity;
        guint8 start, end;

        opacity = CLUTTER_BEHAVIOUR_OPACITY (self->obj);
        clutter_behaviour_opacity_get_bounds (opacity, &start, &end);

        return Py_BuildValue ("(HH)", start, end);
}
%%
override clutter_path_get_nodes noargs
static PyObject *
_wrap_clutter_path_get_nodes (PyGObject *self)
{
        GSList *nodes, *l;
        PyObject *py_list;

        nodes = clutter_path_get_nodes (CLUTTER_PATH (self->obj));

        if ((py_list = PyList_New (0)) == NULL) {
                g_slist_free (nodes);
                return NULL;
        }

        for (l = nodes; l != NULL; l = l->next) {
                ClutterPathNode *node = l->data;
                PyObject *py_node;

                py_node = pyg_boxed_new (CLUTTER_TYPE_PATH_NODE, node, TRUE, TRUE);
                if (!py_node) {
                        g_slist_free (nodes);
                        Py_DECREF (py_list);
                        return NULL;
                }

                PyList_Append (py_list, py_node);
                Py_DECREF (py_node);
        }

        g_slist_free (nodes);

        return py_list;
}
%%
override clutter_path_get_node
static PyObject *
_wrap_clutter_path_get_node (PyGObject *self, PyObject *args)
{
  guint index;
  ClutterPathNode node;

  if (!PyArg_ParseTuple (args, "i:clutter.Path.get_node",
                         &index))
    return NULL;

  clutter_path_get_node (CLUTTER_PATH (self->obj), index, &node);

  return pyg_boxed_new (CLUTTER_TYPE_PATH_NODE, &node, TRUE, TRUE);
}
%%
override clutter_path_foreach
static void
pyclutter_path_foreach (ClutterPathNode *node,
                        gpointer             data)
{
  PyClutterCallback *pycb = data;
  PyGILState_STATE state;
  PyObject *py_node;
  PyObject *retobj;

  state = pyg_gil_state_ensure ();
  
  py_node = pyg_boxed_new (CLUTTER_TYPE_PATH_NODE, node, TRUE, TRUE);
  retobj = pyclutter_callback_invoke (pycb, py_node);
  if (retobj == NULL)
    PyErr_Print ();

  Py_XDECREF (retobj);
  pyg_gil_state_release (state);
}

static PyObject *
_wrap_clutter_path_foreach (PyGObject *self,
                            PyObject  *args,
                            PyObject  *kwargs)
{
  static char *kwlist[] = { "func", "data", NULL };
  PyObject *py_func, *py_data = NULL;
  ClutterPath *path;
  PyClutterCallback *pycb;
  GType param_types[] = { CLUTTER_TYPE_PATH_NODE, };

  if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                    "O|O:clutter.Path.foreach",
                                    kwlist,
                                    &py_func, &py_data))
    return NULL;

  if (!PyCallable_Check (py_func))
    {
      PyErr_SetString (PyExc_TypeError, "func must be callable");
      return NULL;
    }

  if (py_data == NULL)
    {
      Py_INCREF (Py_None);
      py_data = Py_None;
    }

  pycb = pyclutter_callback_new (py_func, py_data, 1, param_types);

  path = CLUTTER_PATH (self->obj);
  clutter_path_foreach (path, (ClutterPathCallback)pyclutter_path_foreach, pycb);

  pyclutter_callback_free (pycb);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override-slot ClutterPathNode.tp_init
static int
_wrap_clutter_path_node_tp_init (PyGBoxed *self, 
                                 PyObject *args,
                                 PyObject *kwargs)
{
  static char *kwlist[] = { "type", "points", NULL };
  PyObject *py_type, *py_points = NULL;
  ClutterPathNodeType type;
  ClutterPathNode node;
  gint n_points, i, p;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs, "O|O:clutter.PathNode",
                                   kwlist, &py_type, &py_points))
    return -1;

  if (pyg_enum_get_value (CLUTTER_TYPE_PATH_NODE_TYPE, py_type,
                          (gpointer)&type))
    return -1;

  node.type = type;

  switch (type)
    {
    case CLUTTER_PATH_MOVE_TO:
    case CLUTTER_PATH_REL_MOVE_TO:
    case CLUTTER_PATH_LINE_TO:
    case CLUTTER_PATH_REL_LINE_TO:
      n_points = 1;
      break;
    case CLUTTER_PATH_CURVE_TO:
    case CLUTTER_PATH_REL_CURVE_TO:
      n_points = 3;
      break;
    case CLUTTER_PATH_CLOSE:
      n_points = 0;
      break;
    default:
      PyErr_SetString (PyExc_TypeError, "Not a valid PathNode type");
      return -1;
    }

  if (n_points != 0)
    {
      if (py_points == NULL || !PyTuple_Check (py_points) ||
          PyTuple_Size (py_points) != n_points*2)
        {
          PyErr_Format (PyExc_TypeError,
                        "Node of type %i needs a tuple of %i integers",
                        type, n_points*2);
          return -1;
        }

      for (i = 0, p = 0; i < n_points; i++, p+=2)
        {
          node.points[i].x = PyInt_AsLong (PyTuple_GetItem (py_points, p));
          node.points[i].y = PyInt_AsLong (PyTuple_GetItem (py_points, p+1));
          if (PyErr_Occurred ())
            return -1;
        }
    }


  self->boxed = g_boxed_copy (CLUTTER_TYPE_PATH_NODE, &node);
  self->free_on_dealloc = TRUE;
  self->gtype = CLUTTER_TYPE_PATH_NODE;

  return 0;
}
%%
override-attr ClutterPathNode.type
static int
_wrap_clutter_path_node__set_type (PyGBoxed *self,
                                   PyObject *value,
                                   void *closure)
{
  ClutterPathNodeType type;

  if (pyg_enum_get_value (CLUTTER_TYPE_PATH_NODE_TYPE, value,
                          (gpointer)&type))
    return -1;

  pyg_boxed_get (self, ClutterPathNode)->type = type;

  return 0;
}
static PyObject *
_wrap_clutter_path_node__get_type (PyGBoxed *self, void *closure)
{
  return pyg_enum_from_gtype(CLUTTER_TYPE_PATH_NODE_TYPE,
                             pyg_boxed_get (self, ClutterPathNode)->type);
}
%%
override-slot ClutterPathNode.tp_as_sequence
static int
_wrap_clutter_path_node_length (PyGBoxed *self)
{
  switch (pyg_boxed_get (self, ClutterPathNode)->type)
    {
    case CLUTTER_PATH_MOVE_TO:
    case CLUTTER_PATH_REL_MOVE_TO:
    case CLUTTER_PATH_LINE_TO:
    case CLUTTER_PATH_REL_LINE_TO:
      return 1;
    case CLUTTER_PATH_CURVE_TO:
    case CLUTTER_PATH_REL_CURVE_TO:
      return 3;
    case CLUTTER_PATH_CLOSE:
      return 0;
    default:
      g_assert_not_reached();
      return -1;
    }
}

static PyObject *
_wrap_clutter_path_node_getitem (PyGBoxed *self, int pos)
{
  ClutterPathNode *node;
  int len;

  len = _wrap_clutter_path_node_length (self);

  node = pyg_boxed_get (self, ClutterPathNode);

  if (pos < 0)
    pos += 3;

  if (pos < 0 || pos >= len)
    {
      PyErr_SetString (PyExc_IndexError, "index out of range");
      return NULL;
    }

  return Py_BuildValue("(ii)", node->points[pos].x, node->points[pos].y);
}

static int
_wrap_clutter_path_node_setitem (PyGBoxed *self, int pos, PyObject *value)
{
  ClutterPathNode *node;
  int x, y, len;

  len = _wrap_clutter_path_node_length (self);

  if (pos < 0)
    pos += 3;

  if (pos < 0 || pos >= len)
    {
      PyErr_SetString (PyExc_IndexError, "index out of range");
      return -1;
    }

  if (!PyTuple_Check (value) || PyTuple_Size (value) != 2)
    {
      PyErr_SetString (PyExc_TypeError,
                       "a point must be a tuple of two integers");
      return -1;
    }

  node = pyg_boxed_get (self, ClutterPathNode);

  x = PyInt_AsLong (PyTuple_GetItem (value, 0));
  y = PyInt_AsLong (PyTuple_GetItem (value, 1));

  if (PyErr_Occurred ())
    {
      PyErr_SetString (PyExc_TypeError,
                       "a point must be a tuple of 2 integers");
      return -1;
    }

  node->points[pos].x = x;
  node->points[pos].y = y;

  return 0;
}

static PySequenceMethods _wrap_clutter_path_node_tp_as_sequence = {
    (lenfunc)_wrap_clutter_path_node_length,
    0,
    0,
    (ssizeargfunc)_wrap_clutter_path_node_getitem,
    0,
    (ssizeobjargproc)_wrap_clutter_path_node_setitem,
    0,
};
%%
new-constructor CLUTTER_TYPE_BEHAVIOUR_PATH
%%
override clutter_behaviour_path_new kwargs
static int
_wrap_clutter_behaviour_path_new (PyGObject *self,
                                  PyObject  *args,
                                  PyObject  *kwargs)
{
  static char *kwlist[] = { "alpha", "path", "description", "knots", NULL };
  PyGObject *py_path = NULL, *py_alpha = NULL;
  PyObject *py_knots;
  const gchar *description = NULL;
  ClutterAlpha *alpha = NULL;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                    "|O!O!sO:clutter.BehaviourPath", kwlist,
                                    &PyClutterAlpha_Type, &py_alpha,
                                    &PyClutterPath_Type, &py_path,
                                    &description, &py_knots))
    return -1;


  if (py_alpha)
    alpha = CLUTTER_ALPHA (py_alpha->obj);

  if (py_path)
    self->obj = (GObject *)clutter_behaviour_path_new (alpha,
                                              CLUTTER_PATH (py_path->obj));
  else if (description)
    self->obj = (GObject *)clutter_behaviour_path_new_with_description (alpha,
                                                               description);
  else if (py_knots) {
      guint n_knots, i;
      ClutterKnot *knots;

      if (!PyTuple_Check (py_knots)) {
          PyErr_SetString (PyExc_TypeError,
                           "knots must be a tuple containing tuples of "
                           "coordinates");
          return -1;
      }

      n_knots = PyTuple_Size (py_knots);
      knots = g_new0 (ClutterKnot, n_knots);

      for (i = 0; i < n_knots; i++) {
          PyObject *py_knot = PyTuple_GetItem (py_knots, i);

          if (PyTuple_Check (py_knot) &&
              PyTuple_Size (py_knot) == 2 &&
              PyInt_Check (PyTuple_GetItem (py_knot, 0)) &&
              PyInt_Check (PyTuple_GetItem (py_knot, 1))) {
              knots[i].x = PyInt_AsLong (PyTuple_GetItem (py_knot, 0));
              knots[i].y = PyInt_AsLong (PyTuple_GetItem (py_knot, 1));
          }
          else {
              PyErr_SetString (PyExc_TypeError,
                               "expecting a tuple of two integers");
              g_free (knots);
              return -1;
          }
      }
      self->obj = (GObject *)clutter_behaviour_path_new_with_knots (alpha,
                                                                    knots,
                                                                    n_knots);
      g_free (knots);
  }
  else
    self->obj = (GObject *)clutter_behaviour_path_new (alpha, NULL);

  pygobject_register_wrapper ((PyObject *)self);

  return 0;
}
