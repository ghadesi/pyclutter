%%
ignore
  clutter_container_add_actor
  clutter_container_add_valist
  clutter_container_remove_actor
  clutter_container_remove_valist
  clutter_container_class_find_child_property
  clutter_container_class_list_child_properties
%%
override clutter_container_add
static PyObject *
_wrap_clutter_container_add (PyGObject *self,
                             PyObject  *args)
{
	ClutterContainer *container;
	int i, len;

	if ((len = PyTuple_Size(args)) < 1) {
		PyErr_SetString(PyExc_TypeError,
				"requires at least one argument");
		return NULL;
	}

	container = CLUTTER_CONTAINER (self->obj);

	for (i = 0; i < len; i++) {
		PyGObject *pyactor;
		ClutterActor *actor;

		pyactor = (PyGObject *) PyTuple_GetItem (args, i);
		if (!pygobject_check (pyactor, &PyClutterActor_Type)) {
			PyErr_SetString (PyExc_TypeError,
					 "Expected a ClutterActor");
			return NULL;
		}
		
		actor = CLUTTER_ACTOR (pyactor->obj);

		clutter_container_add_actor (container, actor);
	}

	Py_INCREF (Py_None);
	return Py_None;
}
%%
override clutter_container_remove
static PyObject *
_wrap_clutter_container_remove (PyGObject *self,
                                PyObject  *args)
{
	ClutterContainer *container;
	int i, len;

	if ((len = PyTuple_Size(args)) < 1) {
		PyErr_SetString(PyExc_TypeError,
				"requires at least one argument");
		return NULL;
	}

	container = CLUTTER_CONTAINER (self->obj);

	for (i = 0; i < len; i++) {
		PyGObject *pyactor;
		ClutterActor *actor;

		pyactor = (PyGObject *) PyTuple_GetItem (args, i);
		if (!pygobject_check (pyactor, &PyClutterActor_Type)) {
			PyErr_SetString (PyExc_TypeError,
					 "Expected a ClutterActor");
			return NULL;
		}
		
		actor = CLUTTER_ACTOR (pyactor->obj);

		clutter_container_remove_actor (container, actor);
	}

	Py_INCREF (Py_None);
	return Py_None;
}
%%
override clutter_container_foreach kwargs
static void
pyclutter_container_foreach (ClutterActor *actor,
                             gpointer      data)
{
        PyClutterCallback *pycb = data;
        PyGILState_STATE state;
        PyObject *py_actor;
        PyObject *retobj;

        state = pyg_gil_state_ensure ();

        py_actor = pygobject_new ((GObject *) actor);
        retobj = pyclutter_callback_invoke (pycb, py_actor);
        if (retobj == NULL)
                PyErr_Print ();

        Py_XDECREF (retobj);

        pyg_gil_state_release (state);
}
static PyObject *
_wrap_clutter_container_foreach (PyGObject *self,
                                 PyObject  *args,
                                 PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        ClutterContainer *container;
        PyClutterCallback *pycb;
        GType param_types[] = { CLUTTER_TYPE_ACTOR, };

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.Container.foreach",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }

        if (py_data == NULL)
          {
            Py_INCREF (Py_None);
            py_data = Py_None;
          }

        pycb = pyclutter_callback_new (py_func, py_data,
                                       1, param_types);

        container = CLUTTER_CONTAINER (self->obj);
        clutter_container_foreach (container, pyclutter_container_foreach, pycb);

        pyclutter_callback_free (pycb);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_container_foreach_with_internals kwargs
static PyObject *
_wrap_clutter_container_foreach_with_internals (PyGObject *self,
                                                PyObject  *args,
                                                PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        ClutterContainer *container;
        PyClutterCallback *pycb;
        GType param_types[] = { CLUTTER_TYPE_ACTOR, };

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.Container.foreach_with_internals",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }

        if (py_data == NULL)
          {
            Py_INCREF (Py_None);
            py_data = Py_None;
          }

        pycb = pyclutter_callback_new (py_func, py_data,
                                       1, param_types);

        container = CLUTTER_CONTAINER (self->obj);
        clutter_container_foreach_with_internals (container, pyclutter_container_foreach, pycb);

        pyclutter_callback_free (pycb);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_container_get_children noargs
static PyObject *
_wrap_clutter_container_get_children (PyGObject *self)
{
        GList *children, *l;
        PyObject *py_list;

        children = clutter_container_get_children (CLUTTER_CONTAINER (self->obj));

        if ((py_list = PyList_New (0)) == NULL) {
                g_list_free (children);
                return NULL;
        }

        for (l = children; l != NULL; l = l->next) {
                ClutterActor *actor = l->data;
                PyObject *py_actor;

                py_actor = pygobject_new ((GObject *) actor);
                if (!py_actor) {
                        g_list_free (children);
                        Py_DECREF (py_list);
                        return NULL;
                }

                PyList_Append (py_list, py_actor);
                Py_DECREF (py_actor);
        }

        g_list_free (children);

        return py_list;
}
%%
override ClutterContainer__proxy_do_foreach
static void
_wrap_ClutterContainer__proxy_do_foreach (ClutterContainer *container,
				          ClutterCallback   callback,
				          gpointer          user_data)
{
    PyGILState_STATE state;
    PyObject *self, *py_func, *py_func_data;
    PyMethodDef pyfunc_def = { "ClutterContainer.do_foreach callback",
			       (PyCFunction)_wrap_ClutterContainerDataFunc,
                               METH_VARARGS|METH_KEYWORDS };
    PyClutterContainerDataFuncData *data;

    state = pyg_gil_state_ensure();
    
    self = pygobject_new((GObject *)container);
    py_func = PyCFunction_NewEx(&pyfunc_def, NULL, NULL);
    
    data = g_new(PyClutterContainerDataFuncData, 1);
    data->func = callback;
    data->func_data = user_data;
    PyObject_Repr(self);
    PyObject_Repr(py_func);
    py_func_data = PyCObject_FromVoidPtr(data, g_free);
    if (!PyObject_CallMethod(self, "do_foreach", "NN", 
			     py_func, py_func_data))
	PyErr_Print();
    
    pyg_gil_state_release(state);
}

%%
override ClutterContainer__do_foreach kwargs
static PyObject *
_wrap_ClutterContainer__do_foreach(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    ClutterContainerIface *iface;
    static char *kwlist[] = { "self", "callback", "user_data", NULL };
    PyGObject *self;
    PyObject *callback;
    PyObject *user_data = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O!O|O:ClutterContainer.foreach", kwlist,
                                     &PyClutterContainer_Type, &self,
                                     &callback, &user_data))
        return NULL;

    iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object (cls)),
                                  CLUTTER_TYPE_CONTAINER);
    if (iface->foreach) {
	PyClutterContainerPyCallbackData *data = g_new(PyClutterContainerPyCallbackData, 1);
	data->callback = callback;
	data->user_data = user_data;

	iface->foreach(CLUTTER_CONTAINER (self->obj),
                 (ClutterCallback)_wrap_ClutterContainer__do_foreach_callback,
                 data);
	g_free(data);
	Py_INCREF(Py_None);
	return Py_None;
    }
    else {
        PyErr_SetString(PyExc_NotImplementedError,
                        "interface method ClutterContainer.foreach "
                        "not implemented");
        return NULL;
    }
}
%%
override ClutterContainer__proxy_do_foreach_with_internals
static void
_wrap_ClutterContainer__proxy_do_foreach_with_internals (ClutterContainer *container,
                                                         ClutterCallback   callback,
				                         gpointer          user_data)
{
    PyGILState_STATE state;
    PyObject *self, *py_func, *py_func_data;
    PyMethodDef pyfunc_def = { "ClutterContainer.do_foreach_with_internals callback",
			       (PyCFunction)_wrap_ClutterContainerDataFunc,
                               METH_VARARGS|METH_KEYWORDS };
    PyClutterContainerDataFuncData *data;

    state = pyg_gil_state_ensure();
    
    self = pygobject_new((GObject *)container);
    py_func = PyCFunction_NewEx(&pyfunc_def, NULL, NULL);
    
    data = g_new(PyClutterContainerDataFuncData, 1);
    data->func = callback;
    data->func_data = user_data;
    PyObject_Repr(self);
    PyObject_Repr(py_func);
    py_func_data = PyCObject_FromVoidPtr(data, g_free);
    if (!PyObject_CallMethod(self, "do_foreach_with_internals", "NN", 
			     py_func, py_func_data))
	PyErr_Print();
    
    pyg_gil_state_release(state);
}

%%
override ClutterContainer__do_foreach_with_internals kwargs
static PyObject *
_wrap_ClutterContainer__do_foreach_with_internals(PyObject *cls, PyObject *args, PyObject *kwargs)
{
    ClutterContainerIface *iface;
    static char *kwlist[] = { "self", "callback", "user_data", NULL };
    PyGObject *self;
    PyObject *callback;
    PyObject *user_data = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O!O|O:ClutterContainer.foreach_with_internals", kwlist,
                                     &PyClutterContainer_Type, &self,
                                     &callback, &user_data))
        return NULL;

    iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object (cls)),
                                  CLUTTER_TYPE_CONTAINER);
    if (iface->foreach_with_internals) {
	PyClutterContainerPyCallbackData *data = g_new(PyClutterContainerPyCallbackData, 1);
	data->callback = callback;
	data->user_data = user_data;

	iface->foreach_with_internals(CLUTTER_CONTAINER (self->obj),
                 (ClutterCallback)_wrap_ClutterContainer__do_foreach_callback,
                 data);
	g_free(data);
	Py_INCREF(Py_None);
	return Py_None;
    }
    else {
        PyErr_SetString(PyExc_NotImplementedError,
                        "interface method ClutterContainer."
                        "foreach_with_internals not implemented");
        return NULL;
    }
}
%%
override clutter_container_child_set
static PyObject *
_wrap_clutter_container_child_set (PyGObject *self, PyObject *args)
{
  PyGObject *py_child;
  GObjectClass *klass;
  gint len, i;

  if ((len = PyTuple_Size (args)) < 3) {
      PyErr_SetString (PyExc_TypeError, "requires at least three arguments");
      return NULL;
  }

  py_child = (PyGObject *)PyTuple_GetItem (args, 0);
  if (!pygobject_check (py_child, &PyClutterActor_Type)) {
      PyErr_SetString (PyExc_TypeError,
                       "first argument must be a clutter.Actor");
      return NULL;
  }

  if ((len -1) % 2) {
      PyErr_SetString (PyExc_TypeError,
                       "Argument list must be property, value pairs");
      return NULL;
  }

  klass = G_OBJECT_GET_CLASS (self->obj);

  for (i = 1; i < len; i += 2) {
      PyObject *py_property = PyTuple_GetItem (args, i);
      PyObject *py_value = PyTuple_GetItem (args, i + 1);
      gchar *property_name;
      GParamSpec *pspec;
      GValue value = { 0, };

      if (!PyString_Check (py_property)) {
          PyErr_SetString (PyExc_TypeError,
                           "Expected string argument for property");
          return NULL;
      }

      property_name = PyString_AsString (py_property);
      pspec = clutter_container_class_find_child_property (klass,
                                                           property_name);

      if (!pspec) {
          PyErr_Format (PyExc_TypeError, 
                        "Container does not have property '%s'", property_name);
          g_free (property_name);
          return NULL;
      }

      g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

      pyg_value_from_pyobject (&value, py_value);

      clutter_container_child_set_property (CLUTTER_CONTAINER (self->obj),
                                            CLUTTER_ACTOR (py_child->obj),
                                            property_name, &value);
      g_value_unset (&value);
  }

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override clutter_container_child_get
static PyObject *
_wrap_clutter_container_child_get (PyGObject *self, PyObject *args)
{
  PyGObject *py_child;
  gint len, i;
  PyObject *py_ret;
  GObjectClass *klass;

  if ((len = PyTuple_Size (args)) < 2) {
      PyErr_SetString (PyExc_TypeError, "requires at least two arguments");
      return NULL;
  }

  py_child = (PyGObject *) PyTuple_GetItem (args, 0);
  if (!pygobject_check (py_child, &PyClutterActor_Type)) {
      PyErr_SetString (PyExc_TypeError,
                       "first argument must be a clutter.Actor");
      return NULL;
  }

  klass = G_OBJECT_GET_CLASS (self->obj);

  py_ret = PyTuple_New (len - 1);

  for (i = 1; i < len; i ++) {
      PyObject *py_property = PyTuple_GetItem (args, i);
      gchar *property_name;
      GParamSpec *pspec;
      GValue value = { 0, };

      if (!PyString_Check (py_property)) {
          PyErr_SetString (PyExc_TypeError,
                           "Expected string argument for property");
          return NULL;
      }

      property_name = PyString_AsString (py_property);
      pspec = clutter_container_class_find_child_property (klass,
                                                           property_name);

      if (!pspec) {
          PyErr_Format (PyExc_TypeError,
                        "Container does not have property '%s'", property_name);
          return NULL;
      }

      g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

      clutter_container_child_get_property (CLUTTER_CONTAINER (self->obj),
                                            CLUTTER_ACTOR (py_child->obj),
                                            property_name, &value);

      PyTuple_SetItem (py_ret, i -1, pyg_value_as_pyobject (&value, TRUE));

      g_value_unset (&value);
  }

  return py_ret;
}
%%
override clutter_container_child_set_property
static PyObject *
_wrap_clutter_container_child_set_property (PyGObject *self, PyObject *args)
{
  PyGObject *py_child;
  const gchar *property_name;
  PyObject *py_value;
  GObjectClass *klass;
  GParamSpec *pspec;
  GValue value = { 0, };

  if (!PyArg_ParseTuple (args, "O!sO:clutter.Container.child_set_property",
                         &PyClutterActor_Type, &py_child, 
                         &property_name, &py_value))
    return NULL;

  klass = G_OBJECT_GET_CLASS (self->obj);
  pspec = clutter_container_class_find_child_property (klass, property_name);

  if (!pspec) {
      PyErr_Format (PyExc_TypeError,
                    "Container does not have property '%s'", property_name);
      return NULL;
  }

  g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

  pyg_value_from_pyobject (&value, py_value);

  clutter_container_child_set_property (CLUTTER_CONTAINER (self->obj),
                                        CLUTTER_ACTOR (py_child->obj),
                                        property_name, &value);

  g_value_unset (&value);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override clutter_container_child_get_property
static PyObject *
_wrap_clutter_container_child_get_property (PyGObject *self, PyObject *args)
{
  PyGObject *py_child;
  const gchar *property_name;
  GObjectClass *klass;
  GParamSpec *pspec;
  GValue value = { 0, };
  PyObject *py_ret;

  if (!PyArg_ParseTuple (args, "O!s:clutter.Container.child_get_property",
                         &PyClutterActor_Type, &py_child, &property_name))
    return NULL;

  klass = G_OBJECT_GET_CLASS (self->obj);

  pspec = clutter_container_class_find_child_property (klass,
                                                       property_name);
  if (!pspec) {
      PyErr_Format (PyExc_TypeError,
                    "Container does not have property '%s'", property_name);
      return NULL;
  }

  g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

  clutter_container_child_get_property (CLUTTER_CONTAINER (self->obj),
                                        CLUTTER_ACTOR (py_child->obj),
                                        property_name, &value);

  py_ret = pyg_value_as_pyobject (&value, TRUE);
  g_value_unset (&value);

  return py_ret;
}
%%
override-slot ClutterContainer.tp_iter

/*
 * The code for iterating is shamelessly taken from pygtk, so credits go to
 * Johan Dahlin :)
 */

typedef struct
{
  PyObject_HEAD
  GList *list;
} PyClutterContainerIter;

static void
pyclutter_container_iter_dealloc (PyClutterContainerIter *self)
{
  g_list_free (self->list);
  PyObject_Del ((PyObject *)self);
}

static PyObject *
pyclutter_container_iter_next (PyClutterContainerIter *iter)
{
  PyObject *child;

  if (!iter->list) {
      PyErr_SetNone (PyExc_StopIteration);
      return NULL;
  }

  child = pygobject_new ((GObject *)iter->list->data);
  iter->list = g_list_next (iter->list);
  return child;
}

static PyTypeObject PyClutterContainerIter_Type = {
    PyObject_HEAD_INIT (NULL)
    0,                                      /* ob_size */
    "clutter.ClutterContainerIter",         /* tp_name */
    sizeof(PyClutterContainerIter),         /* tp_basicsize */
    0,                                      /* tp_itemsize */
    (destructor)pyclutter_container_iter_dealloc, /* tp_dealloc */
    0,                                      /* tp_print */
    0,                                      /* tp_getattr */
    0,                                      /* tp_setattr */
    0,                                      /* tp_compare */
    0,                                      /* tp_repr */
    0,                                      /* tp_as_number */
    0,                                      /* tp_as_sequence */
    0,                                      /* tp_as_mapping */
    0,                                      /* tp_hash */
    0,                                      /* tp_call */
    0,                                      /* tp_str */
    0,                                      /* tp_getattro */
    0,                                      /* tp_setattro */
    0,                                      /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                     /* tp_flags */
    "ClutterContainer child iterator",      /* tp_doc */
    0,                                      /* tp_traverse */
    0,                                      /* tp_clear */
    0,                                      /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    0,                                      /* tp_iter */
    (iternextfunc)pyclutter_container_iter_next, /* tp_iternext */
};

static PyObject *
_wrap_clutter_container_tp_iter (PyGObject *self)
{
  PyClutterContainerIter *iter;
  
  iter = PyObject_NEW (PyClutterContainerIter, &PyClutterContainerIter_Type);
  iter->list = clutter_container_get_children (CLUTTER_CONTAINER (self->obj));
  return (PyObject *)iter;
}
%%
define ClutterContainer.install_child_meta onearg classmethod
static PyObject *
_wrap_clutter_container_install_child_meta (PyObject *self, PyObject *meta)
{
  GType type, meta_type;
  gpointer klass;
  ClutterContainerIface *iface;

  if ((type = pyg_type_from_object (self)) == 0)
      return NULL;

  klass = g_type_class_peek (type);
  iface = (ClutterContainerIface *)
    g_type_interface_peek(klass, CLUTTER_TYPE_CONTAINER);

  if ((meta_type = pyg_type_from_object (meta)) == 0)
    return NULL;

  iface->child_meta_type = meta_type;

  Py_INCREF (Py_None);
  return Py_None;
}
