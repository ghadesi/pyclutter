%%
ignore
  clutter_actor_animatev
  clutter_actor_animate_with_timelinev
  clutter_actor_animate_with_alphav
%%
override clutter_actor_animate
static PyObject *
_wrap_clutter_actor_animate (PyGObject *self,
                             PyObject  *args)
{
    ClutterActor *actor;
    GObjectClass *klass;
    gulong mode;
    guint n, p, i, len, duration;
    gchar **properties;
    GValueArray *values;
    ClutterAnimation *animation;

    len = PyTuple_Size (args);
    if (len < 4 || (len % 2) != 0)
        goto out;

    if (!PyInt_Check (PyTuple_GetItem (args, 0)))
        goto out;

    if (!PyInt_Check (PyTuple_GetItem (args, 1)))
        goto out;

    mode = PyInt_AsLong (PyTuple_GetItem (args, 0));
    duration = PyInt_AsLong (PyTuple_GetItem (args, 1));

    actor = CLUTTER_ACTOR (self->obj);
    klass = G_OBJECT_GET_CLASS (self->obj);

    n = (len - 2) / 2;

    properties = g_new0 (gchar*, n);
    values = g_value_array_new (n);

    for (i = 2, p = 0; i < len; i += 2, p++) {
        gchar *property_name;
        PyObject *py_value = NULL;
        GParamSpec *pspec;
        GValue value = { 0, };

        if (!PyString_Check (PyTuple_GetItem (args, i))) {
            PyErr_SetString (PyExc_TypeError, "propertyname is not a string");
            g_free (properties);
            return NULL;
        }

        property_name = PyString_AsString (PyTuple_GetItem (args, i));
        properties[p] = property_name;

        if (g_str_has_prefix (property_name, "fixed::"))
            property_name += 7;
        /* Ignore signals for now */
        else if (g_str_has_prefix (property_name, "signal::")||
                 g_str_has_prefix (property_name, "signal-after::")||
                 g_str_has_prefix (property_name, "signal-swapped::")) {
            PyErr_SetString (PyExc_TypeError,
                             "Connecting to signals isn't supported yet");
            g_free (properties);
            return NULL;
        }

        pspec = g_object_class_find_property (klass, property_name);
        if (!pspec) {
            PyErr_Format (PyExc_TypeError,
                          "Class %s has no property %s",
                          G_OBJECT_CLASS_NAME (klass),
                          properties[p]);
            g_free (properties);
        }

        g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

        py_value = PyTuple_GetItem (args, i + 1);
        if (pyg_value_from_pyobject (&value, py_value)) {
            PyErr_Format (PyExc_TypeError,
                          "Wrong value type for property %s (required %s)",
                          properties[p],
                          g_type_name (G_PARAM_SPEC_VALUE_TYPE (pspec)));
            g_value_unset (&value);
            g_free (properties);
            return NULL;
        }

        g_value_array_append (values, &value);
        g_value_unset (&value);
    }

    animation = clutter_actor_animatev (actor, mode, duration, n,
                                        (const gchar**) properties,
                                        values->values);

    g_free (properties);
    g_value_array_free (values);

    return pygobject_new ((GObject *)animation);

out:
    PyErr_Clear ();
    PyErr_SetString (PyExc_TypeError,
                     "clutter.Actor.animate requires an AnimationMode, "
                     "duration and at least one pair of property/value.");
    return NULL;
}
%%
override clutter_actor_animate_with_timeline
static PyObject *
_wrap_clutter_actor_animate_with_timeline (PyGObject *self,
                                           PyObject  *args)
{
    ClutterActor *actor;
    GObjectClass *klass;
    gulong mode;
    guint n, p, i, len;
    gchar **properties;
    GValueArray *values;
    ClutterTimeline *timeline;
    ClutterAnimation *animation;

    len = PyTuple_Size (args);
    if (len < 4 || (len % 2) != 0)
        goto out;

    if (!PyInt_Check (PyTuple_GetItem (args, 0)))
        goto out;

    if (!pygobject_check (PyTuple_GetItem (args, 1), &PyClutterTimeline_Type))
        goto out;

    mode = PyInt_AsLong (PyTuple_GetItem (args, 0));
    timeline = CLUTTER_TIMELINE (pygobject_get (PyTuple_GetItem (args, 1)));

    actor = CLUTTER_ACTOR (self->obj);
    klass = G_OBJECT_GET_CLASS (self->obj);

    n = (len - 2) / 2;

    properties = g_new0 (gchar*, n);
    values = g_value_array_new (n);

    for (i = 2, p = 0; i < len; i += 2, p++) {
        gchar *property_name;
        PyObject *py_value = NULL;
        GParamSpec *pspec;
        GValue value = { 0, };

        if (!PyString_Check (PyTuple_GetItem (args, i))) {
            PyErr_SetString (PyExc_TypeError, "propertyname is not a string");
            g_free (properties);
            return NULL;
        }

        property_name = PyString_AsString (PyTuple_GetItem (args, i));
        properties[p] = property_name;

        if (g_str_has_prefix (property_name, "fixed::"))
            property_name += 7;
        /* Ignore signals for now */
        else if (g_str_has_prefix (property_name, "signal::")||
                 g_str_has_prefix (property_name, "signal-after::")||
                 g_str_has_prefix (property_name, "signal-swapped::")) {
            PyErr_SetString (PyExc_TypeError,
                             "Connecting to signals isn't supported yet");
            g_free (properties);
            return NULL;
        }

        pspec = g_object_class_find_property (klass, property_name);
        if (!pspec) {
            PyErr_Format (PyExc_TypeError,
                          "Class %s has no property %s",
                          G_OBJECT_CLASS_NAME (klass),
                          properties[p]);
            g_free (properties);
            return NULL;
        }

        g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

        py_value = PyTuple_GetItem (args, i + 1);
        if (pyg_value_from_pyobject (&value, py_value)) {
            PyErr_Format (PyExc_TypeError,
                          "Wrong value type for property %s (required %s)",
                          properties[p],
                          g_type_name (G_PARAM_SPEC_VALUE_TYPE (pspec)));
            g_free (properties);
            g_value_unset (&value);
            return NULL;
        }

        g_value_array_append (values, &value);
        g_value_unset (&value);
    }

    animation = clutter_actor_animate_with_timelinev (actor, mode, timeline, n,
                                                     (const gchar**) properties,
                                                      values->values);

    g_free (properties);
    g_value_array_free (values);

    return pygobject_new ((GObject *)animation);

out:
    PyErr_Clear ();
    PyErr_SetString (PyExc_TypeError,
                     "clutter.Actor.animate_with_timeline requires an "
                     "AnimationMode, a ClutterTimeline and at least one "
                     "pair of property/value.");
    return NULL;
}
%%
override clutter_actor_animate_with_alpha
static PyObject *
_wrap_clutter_actor_animate_with_alpha (PyGObject *self,
                                        PyObject  *args)
{
    ClutterActor *actor;
    GObjectClass *klass;
    guint n, p, i, len;
    gchar **properties;
    GValueArray *values;
    ClutterAlpha *alpha;
    ClutterAnimation *animation;

    len = PyTuple_Size (args);
    if (len < 3 || (len % 2) == 0)
        goto out;

    if (!pygobject_check (PyTuple_GetItem (args, 0), &PyClutterAlpha_Type))
        goto out;

    alpha = CLUTTER_ALPHA (pygobject_get (PyTuple_GetItem (args, 0)));

    actor = CLUTTER_ACTOR (self->obj);
    klass = G_OBJECT_GET_CLASS (self->obj);

    n = (len - 1) / 2;

    properties = g_new0 (gchar*, n);
    values = g_value_array_new (n);

    for (i = 1, p = 0; i < len; i += 2, p++) {
        gchar *property_name;
        PyObject *py_value = NULL;
        GParamSpec *pspec;
        GValue value = { 0, };

        if (!PyString_Check (PyTuple_GetItem (args, i))) {
            PyErr_SetString (PyExc_TypeError, "propertyname is not a string");
            g_free (properties);
            return NULL;
        }

        property_name = PyString_AsString (PyTuple_GetItem (args, i));
        properties[p] = property_name;

        if (g_str_has_prefix (property_name, "fixed::"))
            property_name += 7;
        /* Ignore signals for now */
        else if (g_str_has_prefix (property_name, "signal::")||
                 g_str_has_prefix (property_name, "signal-after::")||
                 g_str_has_prefix (property_name, "signal-swapped::")) {
            PyErr_SetString (PyExc_TypeError,
                             "Connecting to signals isn't supported yet");
            g_free (properties);
            return NULL;
        }

        pspec = g_object_class_find_property (klass, property_name);
        if (!pspec) {
            PyErr_Format (PyExc_TypeError,
                          "Class %s has no property %s",
                          G_OBJECT_CLASS_NAME (klass),
                          properties[p]);
            g_free (properties);
            return NULL;
        }

        g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

        py_value = PyTuple_GetItem (args, i + 1);
        if (pyg_value_from_pyobject (&value, py_value)) {
            PyErr_Format (PyExc_TypeError,
                          "Wrong value type for property %s (required %s)",
                          properties[p],
                          g_type_name (G_PARAM_SPEC_VALUE_TYPE (pspec)));
            g_free (properties);
            g_value_unset (&value);
            return NULL;
        }

        g_value_array_append (values, &value);
        g_value_unset (&value);
    }

    animation = clutter_actor_animate_with_alphav (actor, alpha, n,
                                                  (const gchar**) properties,
                                                  values->values);

    g_free (properties);
    g_value_array_free (values);

    return pygobject_new ((GObject *)animation);

out:
    PyErr_Clear ();
    PyErr_SetString (PyExc_TypeError,
                     "clutter.Actor.animate_with_alpha requires an "
                     "AnimationMode, a ClutterAlpha and at least one "
                     "pair of property/value.");
    return NULL;
}
%%
override clutter_animation_bind kwargs
static PyObject *
_wrap_clutter_animation_bind (PyGObject *self,
                              PyObject  *args,
                              PyObject  *kwargs)
{

    static char *kwlist[] = { "property_name", "value", NULL };
    gchar *property_name;
    PyObject *py_value;
    ClutterAnimation *anim;
    GObjectClass *klass;
    GParamSpec *pspec;
    GValue value = { 0, };

    if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                      "sO:clutter.Animation.bind",
                                      kwlist,
                                      &property_name, &py_value))
        return NULL;

    anim = CLUTTER_ANIMATION (self->obj);
    klass = G_OBJECT_GET_CLASS (clutter_animation_get_object (anim));
    pspec = g_object_class_find_property (klass, property_name);

    if (!pspec) {
        PyErr_Format (PyExc_TypeError,
                      "Controlled object %s has no property %s",
                      G_OBJECT_CLASS_NAME (klass), property_name);
        return NULL;
    }

    g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));

    if (pyg_value_from_pyobject (&value, py_value)) {
        PyErr_Format (PyExc_TypeError,
                      "Wrong value type for property %s (required %s)",
                      property_name,
                      g_type_name (G_PARAM_SPEC_VALUE_TYPE (pspec)));
        g_value_unset (&value);
        return NULL;
    }
    
    clutter_animation_bind (anim, property_name, &value);

    Py_INCREF (Py_None);
    return Py_None;
}
%%
override clutter_animation_get_mode noargs
static PyObject *
_wrap_clutter_animation_get_mode(PyGObject *self)
{
	gulong mode = clutter_animation_get_mode(CLUTTER_ANIMATION(self->obj));
    if (mode < CLUTTER_ANIMATION_LAST) {
        return pyg_enum_from_gtype(CLUTTER_TYPE_ANIMATION_MODE, mode);
    }
    return PyLong_FromUnsignedLong(mode);
}
%%
override ClutterAnimatable__proxy_do_animate_property kwargs
static gboolean
_wrap_ClutterAnimatable__proxy_do_animate_property(ClutterAnimatable *self,
                                                   ClutterAnimation *animation,
                                                   const gchar *property_name,
                                                   const GValue *initial_value,
                                                   const GValue *final_value,
                                                   gdouble progress,
                                                   GValue* value)
{
    PyGILState_STATE __py_state;
    PyObject *py_self;
    PyObject *py_animation = NULL;
    PyObject *py_property_name;
    PyObject *py_initial_value = NULL;
    PyObject *py_final_value = NULL;
    PyObject *py_progress;
    gboolean retval;
    PyObject *py_main_retval;
    PyObject *py_retval;
    PyObject *py_args;
    PyObject *py_method;

    __py_state = pyg_gil_state_ensure();
    py_self = pygobject_new((GObject *) self);
    if (!py_self) {
        if (PyErr_Occurred())
            PyErr_Print();
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    if (animation)
        py_animation = pygobject_new((GObject *) animation);
    else {
        Py_INCREF(Py_None);
        py_animation = Py_None;
    }
    py_property_name = PyString_FromString(property_name);
    if (!py_property_name) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_animation);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    if (initial_value)
        py_initial_value = pyg_value_as_pyobject (initial_value, TRUE);
    else {
        Py_INCREF(Py_None);
        py_initial_value = Py_None;
    }
    if (final_value)
        py_final_value = pyg_value_as_pyobject (final_value, TRUE);
    else {
        Py_INCREF(Py_None);
        py_final_value = Py_None;
    }
    py_progress = PyFloat_FromDouble(progress);

    py_args = PyTuple_New(5);
    PyTuple_SET_ITEM(py_args, 0, py_animation);
    PyTuple_SET_ITEM(py_args, 1, py_property_name);
    PyTuple_SET_ITEM(py_args, 2, py_initial_value);
    PyTuple_SET_ITEM(py_args, 3, py_final_value);
    PyTuple_SET_ITEM(py_args, 4, py_progress);

    py_method = PyObject_GetAttrString(py_self, "do_animate_property");
    if (!py_method) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    py_retval = PyObject_CallObject(py_method, py_args);
    if (!py_retval) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_XDECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }
    py_retval = Py_BuildValue("(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, "O", &py_main_retval)) {
        if (PyErr_Occurred())
            PyErr_Print();
        Py_XDECREF(py_retval);
        Py_DECREF(py_method);
        Py_DECREF(py_args);
        Py_DECREF(py_self);
        pyg_gil_state_release(__py_state);
        return FALSE;
    }

    pyg_value_from_pyobject (value, py_main_retval);
    if (py_main_retval == Py_None)
        retval = FALSE;
    else
        retval = TRUE;

    Py_XDECREF(py_retval);
    Py_DECREF(py_method);
    Py_DECREF(py_args);
    Py_DECREF(py_self);
    pyg_gil_state_release(__py_state);

    return retval;
}
%%
override ClutterAnimatable__do_animate_property kwargs
static PyObject *
_wrap_ClutterAnimatable__do_animate_property(PyObject *cls,
                                             PyObject *args,
                                             PyObject *kwargs)
{
    ClutterAnimatableIface *iface;
    static char *kwlist[] = { "self", "animation", "property_name", "initial_value", "final_value", "progress", NULL };
    PyGObject *self, *animation;
    char *property_name;
    PyObject *py_initial_value, *py_final_value;
    int ret;
    double progress;
    GValue initial = { 0, };
    GValue final = { 0, };
    GValue value = { 0, };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                     "O!O!sOOd:ClutterAnimatable.animate_property",
                                     kwlist,
                                     &PyClutterAnimatable_Type, &self,
                                     &PyClutterAnimation_Type, &animation,
                                     &property_name,
                                     &py_initial_value, &py_final_value,
                                     &progress))
        return NULL;

    iface = g_type_interface_peek(g_type_class_peek(pyg_type_from_object(cls)),
                                  CLUTTER_TYPE_ANIMATABLE);

    if (iface->animate_property) {
        GParamSpec *pspec;
        pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (self->obj),
                                              property_name);
        g_value_init (&initial, G_PARAM_SPEC_VALUE_TYPE (pspec));
        g_value_init (&final, G_PARAM_SPEC_VALUE_TYPE (pspec));
        g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));
        pyg_value_from_pyobject (&initial, py_initial_value);
        pyg_value_from_pyobject (&final, py_final_value);
        ret = iface->animate_property (CLUTTER_ANIMATABLE (self->obj),
                                       CLUTTER_ANIMATION (animation->obj),
                                       property_name,
                                       &initial,
                                       &final,
                                       progress,
                                       &value);
    } else {
        PyErr_SetString(PyExc_NotImplementedError, "interface method ClutterAnimatable.animate_property not implemented");
        return NULL;
    }
    return PyBool_FromLong(ret);

}
