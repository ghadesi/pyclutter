%%
ignore
  clutter_box_packv
  clutter_box_pack_after
  clutter_box_pack_before
  clutter_box_pack_at
%%
override clutter_box_pack
static PyObject *
_wrap_clutter_box_pack (PyGObject *self,
                        PyObject  *args)
{
  PyGObject *py_actor;
  gint len, i, p;
  gchar **properties;
  GValueArray *values;
  ClutterLayoutManager *manager;

  if ((len = PyTuple_Size (args)) < 3)
    {
      PyErr_SetString (PyExc_TypeError,
                       "clutter.Box.pack requires at least 3 arguments");
      return NULL;
    }

  py_actor = (PyGObject *)PyTuple_GetItem (args, 0);
  if (!pygobject_check (py_actor, &PyClutterActor_Type))
    {
      PyErr_SetString (PyExc_TypeError,
                       "first argument must be a clutter.Actor");
      return NULL;
    }

  manager = clutter_box_get_layout_manager (CLUTTER_BOX (self->obj));
  if (!manager)
    {
      PyErr_SetString (PyExc_Exception,
                       "clutter.Box has no LayoutManager set");
      return NULL;
    }

  properties = g_new0 (gchar *, (len - 1) / 2);
  values = g_value_array_new ((len - 1) / 2);

  for (i = 1, p = 0; i < len; i += 2, p++)
    {
      gchar *name;
      PyObject *py_value;
      GParamSpec *pspec;
      GValue value = { 0, };

      if (!PyString_Check (PyTuple_GetItem (args, i)))
        {
          PyErr_SetString (PyExc_TypeError,
                           "Expected string argument for property");
          return NULL;
        }

      name = PyString_AsString (PyTuple_GetItem (args, i));
      properties[p] = g_strdup (name);

      g_debug ("name: %s", name);
      pspec = clutter_layout_manager_find_child_property (manager, name);
      if (!pspec)
        {
          PyErr_Format (PyExc_TypeError,
                        "LayoutMeta does not have property '%s'", name);
          g_free (name);
          return NULL;
        }

      g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (pspec));
      py_value = PyTuple_GetItem (args, i + 1);
      if (pyg_value_from_pyobject (&value, py_value))
        {
          PyErr_Format (PyExc_TypeError,
                        "Wrong value type for property %s (required %s)",
                        name, g_type_name (G_PARAM_SPEC_VALUE_TYPE (pspec)));

          g_value_unset (&value);
          g_free (name);
          g_strfreev (properties);
          g_value_array_free (values);

          return NULL;
        }

      g_value_array_append (values, &value);
    }

  clutter_box_packv (CLUTTER_BOX (self->obj), CLUTTER_ACTOR (py_actor->obj),
                     (len - 1)/2, (const gchar **) properties, values->values);

  Py_INCREF (Py_None);
  return Py_None;
}
