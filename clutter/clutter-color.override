ignore
  clutter_color_copy
  clutter_color_free
  clutter_color_equal
  clutter_color_shadex
  clutter_color_to_hlsx
  clutter_color_from_hlsx
%%
override clutter_color_new kwargs
static int
_wrap_clutter_color_new (PyGBoxed *self,
                         PyObject *args,
                         PyObject *kwargs)
{
        static char *kwlist[] = { "red", "green", "blue", "alpha", NULL };
        unsigned int red, green, blue, alpha;
        ClutterColor color;

        red = green = blue = 0x0;
        alpha = 0xff;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "|kkkk:clutter.Color", kwlist,
                                          &red, &green, &blue, &alpha))
                return -1;

        color.red = (guint8) red;
        color.green = (guint8) green;
        color.blue = (guint8) blue;
        color.alpha = (guint8) alpha;

        self->boxed = g_boxed_copy (CLUTTER_TYPE_COLOR, &color);
        self->free_on_dealloc = TRUE;
        self->gtype = CLUTTER_TYPE_COLOR;

        return 0;
}
%%
override-slot ClutterColor.tp_setattr
static int
_wrap_clutter_color_tp_setattr (PyGBoxed *self,
                                char     *attr,
                                PyObject *value)
{
        if (value == NULL) {
                PyErr_SetString (PyExc_TypeError, "can't delete attributes");
                return -1;
        }

        if (PyInt_Check (value)) {
                unsigned int i = PyInt_AsLong (value);
                
                switch (attr[0]) {
                        case 'r':
                                pyg_boxed_get (self, ClutterColor)->red = i;
                                return 0;
                        case 'g':
                                pyg_boxed_get (self, ClutterColor)->green = i;
                                return 0;
                        case 'b':
                                pyg_boxed_get (self, ClutterColor)->blue = i;
                                return 0;
                        case 'a':
                                pyg_boxed_get (self, ClutterColor)->alpha = i;
                                return 0;
                }
        }
        
        PyErr_SetString (PyExc_AttributeError, "could not write attribute");
        return -1;
}
%%
override clutter_color_to_hls noargs
static PyObject *
_wrap_clutter_color_to_hls (PyGBoxed *self)
{
        ClutterColor *color;
        guint8 h, l, s;

        color = pyg_boxed_get (self, ClutterColor);
        clutter_color_to_hls (color, &h, &l, &s);

        return Py_BuildValue ("(kkk)", h, l, s);
}
%%
override clutter_color_from_hls kwargs
static PyObject *
_wrap_clutter_color_from_hls (PyObject *self,
			      PyObject *args,
                              PyObject *kwargs)
{
        static char *kwlist[] = { "hue", "luminance", "saturation", NULL };
        unsigned int h, l, s;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "|kkk:color_from_hls", kwlist,
                                          &h, &l, &s))
                return NULL;

        clutter_color_from_hls (&color, h, l, s);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_color_from_pixel kwargs
static PyObject *
_wrap_clutter_color_from_pixel (PyObject *self,
			        PyObject *args,
                                PyObject *kwargs)
{
        static char *kwlist[] = { "pixel", NULL };
        unsigned long pixel;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "k:color_from_pixel", kwlist,
                                          &pixel))
                return NULL;
        
        clutter_color_from_pixel (&color, pixel);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_color_parse kwargs
static PyObject *
_wrap_clutter_color_parse (PyObject *self,
                           PyObject *args,
                           PyObject *kwargs)
{
        static char *kwlist[] = { "spec", NULL };
        const char *spec;
        ClutterColor color = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "s:color_parse", kwlist,
                                          &spec))
                return NULL;

        if (!clutter_color_parse (spec, &color)) {
                PyErr_SetString (PyExc_ValueError,
                                 "unable to parse color specification");
                return NULL;
        }

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &color, TRUE, TRUE);
}
%%
override clutter_color_add kwargs
static PyObject *
_wrap_clutter_color_add (PyGBoxed *self,
                         PyObject *args,
                         PyObject *kwargs)
{
        static char *kwlist[] = { "add", NULL };
        PyObject *py_add;
        ClutterColor add, dest = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterColor.add", kwlist,
                                          &py_add)) {
                return NULL;
        }

        if (pyg_boxed_check (py_add, CLUTTER_TYPE_COLOR))
                add = *pyg_boxed_get (py_add, ClutterColor);
        else {
                PyErr_SetString (PyExc_TypeError, "color should be a ClutterColor");
                return NULL;
        }

        clutter_color_add (pyg_boxed_get (self, ClutterColor), &add, &dest);
        
        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &dest, TRUE, TRUE);
}
%%
override clutter_color_subtract kwargs
static PyObject *
_wrap_clutter_color_subtract (PyGBoxed *self,
                              PyObject *args,
                              PyObject *kwargs)
{
        static char *kwlist[] = { "subtract", NULL };
        PyObject *py_subtract;
        ClutterColor subtract, dest = { 0, };

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "O:ClutterColor.subtract", kwlist,
                                          &py_subtract)) {
                return NULL;
        }

        if (pyg_boxed_check (py_subtract, CLUTTER_TYPE_COLOR))
                subtract = *pyg_boxed_get (py_subtract, ClutterColor);
        else {
                PyErr_SetString (PyExc_TypeError, "color should be a ClutterColor");
                return NULL;
        }

        clutter_color_subtract (pyg_boxed_get (self, ClutterColor), &subtract, &dest);
        
        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &dest, TRUE, TRUE);
}
%%
override clutter_color_darken noargs
static PyObject *
_wrap_clutter_color_darken (PyGBoxed *self)
{
        ClutterColor dest = { 0, };

        clutter_color_darken (pyg_boxed_get (self, ClutterColor), &dest);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &dest, TRUE, TRUE);
}
%%
override clutter_color_lighten noargs
static PyObject *
_wrap_clutter_color_lighten (PyGBoxed *self)
{
        ClutterColor dest = { 0, };

        clutter_color_lighten (pyg_boxed_get (self, ClutterColor), &dest);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &dest, TRUE, TRUE);
}
%%
override clutter_color_shade kwargs
static PyObject *
_wrap_clutter_color_shade (PyGBoxed *self,
                           PyObject *args,
                           PyObject *kwargs)
{
        static char *kwlist[] = { "shade", NULL };
        ClutterColor dest = { 0, };
        gdouble shade = 0.0;

        if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                          "d:ClutterColor.shade", kwlist,
                                          &shade))
                return NULL;

        clutter_color_shade (pyg_boxed_get (self, ClutterColor), &dest, shade);

        return pyg_boxed_new (CLUTTER_TYPE_COLOR, &dest, TRUE, TRUE);
}
