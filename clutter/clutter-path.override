%%
ignore
  clutter_path_add_cairo_path
%%
override-slot ClutterPath.tp_repr
static PyObject *
_wrap_clutter_path_tp_repr (PyObject *self)
{
        ClutterPath *path = CLUTTER_PATH (pygobject_get (self));
        gchar *repr, *desc;
        PyObject *py_repr;

        desc = clutter_path_get_description (path);
        if (desc == NULL)
                repr = g_strdup ("clutter.Path()");
        else
                repr = g_strconcat ("clutter.Path(description='", desc, "')",
                                    NULL);

        py_repr = PyString_FromString (repr);

        g_free (desc);
        g_free (repr);

        return py_repr;
}
%%
override-slot ClutterPath.tp_str
static PyObject *
_wrap_clutter_path_tp_str (PyObject *self)
{
        ClutterPath *path = CLUTTER_PATH (pygobject_get (self));
        PyObject *py_str;
        gchar *desc;

        desc = clutter_path_get_description (path);
        if (desc == NULL) {
                py_str = PyString_FromString("");
        }
        else {
                py_str = PyString_FromString (desc);
                g_free (desc);
        }

        return py_str;
}
%%
override clutter_path_get_nodes noargs
static PyObject *
_wrap_clutter_path_get_nodes (PyGObject *self)
{
        GSList *nodes, *l;
        PyObject *py_list;

        nodes = clutter_path_get_nodes (CLUTTER_PATH (self->obj));

        if ((py_list = PyList_New (0)) == NULL) {
                g_slist_free (nodes);
                return NULL;
        }

        for (l = nodes; l != NULL; l = l->next) {
                ClutterPathNode *node = l->data;
                PyObject *py_node;

                py_node = pyg_boxed_new (CLUTTER_TYPE_PATH_NODE, node, TRUE, TRUE);
                if (!py_node) {
                        g_slist_free (nodes);
                        Py_DECREF (py_list);
                        return NULL;
                }

                PyList_Append (py_list, py_node);
                Py_DECREF (py_node);
        }

        g_slist_free (nodes);

        return py_list;
}
%%
override clutter_path_get_node
static PyObject *
_wrap_clutter_path_get_node (PyGObject *self, PyObject *args)
{
  guint index;
  ClutterPathNode node;

  if (!PyArg_ParseTuple (args, "i:clutter.Path.get_node",
                         &index))
    return NULL;

  clutter_path_get_node (CLUTTER_PATH (self->obj), index, &node);

  return pyg_boxed_new (CLUTTER_TYPE_PATH_NODE, &node, TRUE, TRUE);
}
%%
override clutter_path_foreach
static void
pyclutter_path_foreach (ClutterPathNode *node,
                        gpointer             data)
{
  PyClutterCallback *pycb = data;
  PyGILState_STATE state;
  PyObject *py_node;
  PyObject *retobj;

  state = pyg_gil_state_ensure ();
  
  py_node = pyg_boxed_new (CLUTTER_TYPE_PATH_NODE, node, TRUE, TRUE);
  retobj = pyclutter_callback_invoke (pycb, py_node);
  if (retobj == NULL)
    PyErr_Print ();

  Py_XDECREF (retobj);
  pyg_gil_state_release (state);
}

static PyObject *
_wrap_clutter_path_foreach (PyGObject *self,
                            PyObject  *args,
                            PyObject  *kwargs)
{
  static char *kwlist[] = { "func", "data", NULL };
  PyObject *py_func, *py_data = NULL;
  ClutterPath *path;
  PyClutterCallback *pycb;
  GType param_types[] = { CLUTTER_TYPE_PATH_NODE, };

  if (!PyArg_ParseTupleAndKeywords (args, kwargs,
                                    "O|O:clutter.Path.foreach",
                                    kwlist,
                                    &py_func, &py_data))
    return NULL;

  if (!PyCallable_Check (py_func))
    {
      PyErr_SetString (PyExc_TypeError, "func must be callable");
      return NULL;
    }

  if (py_data == NULL)
    {
      Py_INCREF (Py_None);
      py_data = Py_None;
    }

  pycb = pyclutter_callback_new (py_func, py_data, 1, param_types);

  path = CLUTTER_PATH (self->obj);
  clutter_path_foreach (path, (ClutterPathCallback)pyclutter_path_foreach, pycb);

  pyclutter_callback_free (pycb);

  Py_INCREF (Py_None);
  return Py_None;
}
%%
override-slot ClutterPathNode.tp_init
static int
_wrap_clutter_path_node_tp_init (PyGBoxed *self, 
                                 PyObject *args,
                                 PyObject *kwargs)
{
  static char *kwlist[] = { "type", "points", NULL };
  PyObject *py_type, *py_points = NULL;
  ClutterPathNodeType type;
  ClutterPathNode node;
  gint n_points, i, p;

  if (!PyArg_ParseTupleAndKeywords (args, kwargs, "O|O:clutter.PathNode",
                                   kwlist, &py_type, &py_points))
    return -1;

  if (pyg_enum_get_value (CLUTTER_TYPE_PATH_NODE_TYPE, py_type,
                          (gpointer)&type))
    return -1;

  node.type = type;

  switch (type)
    {
    case CLUTTER_PATH_MOVE_TO:
    case CLUTTER_PATH_REL_MOVE_TO:
    case CLUTTER_PATH_LINE_TO:
    case CLUTTER_PATH_REL_LINE_TO:
      n_points = 1;
      break;
    case CLUTTER_PATH_CURVE_TO:
    case CLUTTER_PATH_REL_CURVE_TO:
      n_points = 3;
      break;
    case CLUTTER_PATH_CLOSE:
      n_points = 0;
      break;
    default:
      PyErr_SetString (PyExc_TypeError, "Not a valid PathNode type");
      return -1;
    }

  if (n_points != 0)
    {
      if (py_points == NULL || !PyTuple_Check (py_points) ||
          PyTuple_Size (py_points) != n_points*2)
        {
          PyErr_Format (PyExc_TypeError,
                        "Node of type %i needs a tuple of %i integers",
                        type, n_points*2);
          return -1;
        }

      for (i = 0, p = 0; i < n_points; i++, p+=2)
        {
          node.points[i].x = PyInt_AsLong (PyTuple_GetItem (py_points, p));
          node.points[i].y = PyInt_AsLong (PyTuple_GetItem (py_points, p+1));
          if (PyErr_Occurred ())
            return -1;
        }
    }


  self->boxed = g_boxed_copy (CLUTTER_TYPE_PATH_NODE, &node);
  self->free_on_dealloc = TRUE;
  self->gtype = CLUTTER_TYPE_PATH_NODE;

  return 0;
}
%%
override-attr ClutterPathNode.type
static int
_wrap_clutter_path_node__set_type (PyGBoxed *self,
                                   PyObject *value,
                                   void *closure)
{
  ClutterPathNodeType type;

  if (pyg_enum_get_value (CLUTTER_TYPE_PATH_NODE_TYPE, value,
                          (gpointer)&type))
    return -1;

  pyg_boxed_get (self, ClutterPathNode)->type = type;

  return 0;
}
static PyObject *
_wrap_clutter_path_node__get_type (PyGBoxed *self, void *closure)
{
  return pyg_enum_from_gtype(CLUTTER_TYPE_PATH_NODE_TYPE,
                             pyg_boxed_get (self, ClutterPathNode)->type);
}
%%
override-slot ClutterPathNode.tp_as_sequence
static int
_wrap_clutter_path_node_length (PyGBoxed *self)
{
  switch (pyg_boxed_get (self, ClutterPathNode)->type)
    {
    case CLUTTER_PATH_MOVE_TO:
    case CLUTTER_PATH_REL_MOVE_TO:
    case CLUTTER_PATH_LINE_TO:
    case CLUTTER_PATH_REL_LINE_TO:
      return 1;
    case CLUTTER_PATH_CURVE_TO:
    case CLUTTER_PATH_REL_CURVE_TO:
      return 3;
    case CLUTTER_PATH_CLOSE:
      return 0;
    default:
      g_assert_not_reached();
      return -1;
    }
}

static PyObject *
_wrap_clutter_path_node_getitem (PyGBoxed *self, int pos)
{
  ClutterPathNode *node;
  int len;

  len = _wrap_clutter_path_node_length (self);

  node = pyg_boxed_get (self, ClutterPathNode);

  if (pos < 0)
    pos += 3;

  if (pos < 0 || pos >= len)
    {
      PyErr_SetString (PyExc_IndexError, "index out of range");
      return NULL;
    }

  return Py_BuildValue("(ii)", node->points[pos].x, node->points[pos].y);
}

static int
_wrap_clutter_path_node_setitem (PyGBoxed *self, int pos, PyObject *value)
{
  ClutterPathNode *node;
  int x, y, len;

  len = _wrap_clutter_path_node_length (self);

  if (pos < 0)
    pos += 3;

  if (pos < 0 || pos >= len)
    {
      PyErr_SetString (PyExc_IndexError, "index out of range");
      return -1;
    }

  if (!PyTuple_Check (value) || PyTuple_Size (value) != 2)
    {
      PyErr_SetString (PyExc_TypeError,
                       "a point must be a tuple of two integers");
      return -1;
    }

  node = pyg_boxed_get (self, ClutterPathNode);

  x = PyInt_AsLong (PyTuple_GetItem (value, 0));
  y = PyInt_AsLong (PyTuple_GetItem (value, 1));

  if (PyErr_Occurred ())
    {
      PyErr_SetString (PyExc_TypeError,
                       "a point must be a tuple of 2 integers");
      return -1;
    }

  node->points[pos].x = x;
  node->points[pos].y = y;

  return 0;
}

static PySequenceMethods _wrap_clutter_path_node_tp_as_sequence = {
    (lenfunc)_wrap_clutter_path_node_length,
    0,
    0,
    (ssizeargfunc)_wrap_clutter_path_node_getitem,
    0,
    (ssizeobjargproc)_wrap_clutter_path_node_setitem,
    0,
};
%%
override-slot ClutterPath.tp_richcompare
static PyObject *
_wrap_clutter_path_tp_richcompare (PyObject *a, PyObject *b, int op)
{
  ClutterPath *path_a, *path_b;
  gboolean ret = TRUE;

  if (!pygobject_check (b, &PyClutterPath_Type)) {
      if (op == Py_NE) {
          Py_RETURN_TRUE;
      } else {
          Py_RETURN_FALSE;
      }
  }

  path_a = CLUTTER_PATH (pygobject_get (a));
  path_b = CLUTTER_PATH (pygobject_get (b));

  if (clutter_path_get_n_nodes (path_a) == clutter_path_get_n_nodes (path_b))
    {
      ClutterPathNode node_a, node_b;
      guint i, n_nodes;

      n_nodes = clutter_path_get_n_nodes (path_a);

      for (i = 0; i < n_nodes; i++)
        {
          clutter_path_get_node (path_a, i, &node_a);
          clutter_path_get_node (path_b, i, &node_b);

          if (!clutter_path_node_equal (&node_a, &node_b))
            {
              ret = FALSE;
              break;
            }
        }
    }
  else
    ret = FALSE;

  switch (op)
    {
    case Py_EQ:
      return PyBool_FromLong (ret);
    case Py_NE:
      return PyBool_FromLong (!ret);
    default:
      PyErr_SetString (PyExc_TypeError,
                       "only '==' and '!=' comparisons are allowed");
      return NULL;
    }
}
