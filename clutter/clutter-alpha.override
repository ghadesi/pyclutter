%%
ignore
  clutter_alpha_new_full
  clutter_alpha_new_with_func
  clutter_alpha_set_closure
  clutter_alpha_register_closure
%%
override clutter_alpha_set_func kwargs
static PyObject *
_wrap_clutter_alpha_set_func (PyGObject *self,
                              PyObject  *args,
                              PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        ClutterAlpha *alpha;
        GClosure *clos;

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.Alpha.set_func",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }

        clos = pyg_closure_new (py_func, py_data, NULL);
        if (clos == NULL) {
                PyErr_Print ();
                return NULL;
        }

        alpha = CLUTTER_ALPHA (self->obj);
        clutter_alpha_set_closure (alpha, clos);

        Py_INCREF (Py_None);
        return Py_None;
}
%%
override clutter_alpha_register_func kwargs
static PyObject *
_wrap_clutter_alpha_register_func (PyObject *self,
                                   PyObject  *args,
                                   PyObject  *kwargs)
{
        static char *kwlist[] = { "func", "data", NULL };
        PyObject *py_func, *py_data = NULL;
        GClosure *clos;
        gulong id;

        if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                         "O|O:clutter.alpha_register_func",
                                         kwlist,
                                         &py_func, &py_data)) {
                return NULL;
        }

        if (!PyCallable_Check (py_func)) {
                PyErr_SetString (PyExc_TypeError, "func must be callable");
                return NULL;
        }

        clos = pyg_closure_new (py_func, py_data, NULL);
        if (clos == NULL) {
                PyErr_Print ();
                return NULL;
        }

        id = clutter_alpha_register_closure (clos);

        return Py_BuildValue("K", id);
}
%%
override clutter_alpha_get_mode noargs
static PyObject *
_wrap_clutter_alpha_get_mode (PyGObject *self)
{
        gulong mode = clutter_alpha_get_mode(CLUTTER_ALPHA(self->obj));
        if (mode < CLUTTER_ANIMATION_LAST) {
                return pyg_enum_from_gtype(CLUTTER_TYPE_ANIMATION_MODE, mode);
        }
        return PyLong_FromUnsignedLong(mode);
}
